* Linux My Personal Notes and Thoughts :TOC_9:
  - [[#linux-notes--thoughts][Linux Notes / Thoughts]]
    - [[#fedora-silverblue-and-bluefin-customized-version-of-fedora-silverblue][Fedora Silverblue and bluefin customized version of Fedora Silverblue]]
    - [[#doom-emacs][doom emacs]]
    - [[#cheat-sheet-links][Cheat Sheet Links]]
    - [[#manjaro-linux-plasma-kde][Manjaro Linux Plasma KDE]]
    - [[#opensuse-linux-leap-155-x86_64-plasma-kde][openSUSE Linux Leap 15.5 x86_64 Plasma KDE]]
    - [[#random-linux-commands-flag-notes][Random Linux Commands Flag Notes]]
    - [[#random-linux-commands][Random Linux Commands]]
      - [[#trash-cli-commands][Trash-cli commands]]
      - [[#other-random-opensuse-links][Other Random openSUSE Links]]
    - [[#linux-distributions][Linux Distributions]]
    - [[#apps][Apps]]
    - [[#configurations-and-tweaks][Configurations and Tweaks]]
      - [[#alacritty][Alacritty]]
        - [[#main-configuration-from-here][Main Configuration From Here]]
        - [[#other-interesting-configurations][Other Interesting Configurations]]
  - [[#text-editing-resources][Text Editing Resources]]
    - [[#introduction-text][Introduction Text]]
      - [[#links][Links]]
    - [[#learning-the-vim-keybindings---video-game-for-vim-keybindings][Learning The Vim Keybindings - Video Game For Vim Keybindings]]
      - [[#videos-from-vomikod][Videos From Vomikod]]
      - [[#file-formats-for-note-taking][File Formats For Note Taking]]
        - [[#short-videos-note-taking][Short Videos Note Taking]]
          - [[#is-neovim-the-ultimate-note-taking-tool][Is Neovim The Ultimate Note Taking Tool?]]
        - [[#long-videos-note-taking][Long Videos Note Taking]]
          - [[#videos-of-interest][Videos Of Interest]]
    - [[#neovim-distributions][Neovim Distributions]]
    - [[#the-primeagen-related-links---michael-paulson][The Primeagen Related Links - Michael Paulson]]
    - [[#emacs-m-x-commands-i-randomly-use][Emacs M-x Commands I randomly use]]
    - [[#greader-notes][Greader Notes]]
      - [[#my-greader-workflow-in-detail][My Greader Workflow In Detail]]
  - [[#newsboat-configuration-and-my-youtube-playlist-watch-list][Newsboat Configuration and My Youtube Playlist Watch list]]
    - [[#config-file][config file]]
    - [[#urls][urls]]
  - [[#faqs][FAQs]]
    - [[#which-text-editor-do-you-recommend-the-most][Which text editor do you recommend the most?]]
    - [[#which-text-format-do-you-recommend-the-most][Which text format do you recommend the most?]]
    - [[#which-system-do-you-recommend-learning-for-emacs-keybindings-between-evil][Which system do you recommend learning for emacs keybindings between evil,]]
  - [[#additional-links][Additional Links]]
  - [[#additional-configuration-file-notes][Additional Configuration File Notes]]
    - [[#bashrc-bashrc][bashrc .bashrc]]
    - [[#notmuch-config-notmuch-config][Notmuch config .notmuch-config]]
    - [[#mbsyncrc-mbsyncrc][mbsyncrc .mbsyncrc]]
    - [[#wezterm-lua-weztermlua][wezterm lua .wezterm.lua]]
    - [[#git-config-gitconfig][git config .gitconfig]]
    - [[#zellij-configkdl][zellij config.kdl]]

** Linux Notes / Thoughts
*** Fedora Silverblue and bluefin customized version of Fedora Silverblue
- [[https://docs.fedoraproject.org/en-US/quick-docs/fonts/][Adding New Fonts in Fedora]]
- [[https://docs.fedoraproject.org/en-US/fedora/latest/][Fedora Linux User Documentation]]
- [[https://docs.fedoraproject.org/en-US/quick-docs/][Fedora Quick Docs]]
- [[https://docs.fedoraproject.org/en-US/fedora-silverblue/][Fedora Silverblue User Guide]]
- [[https://universal-blue.discourse.group/t/gui-install-which-order/2018/9][GUI install, which order?]]
- [[https://universal-blue.discourse.group/docs?topic=41][Introduction to Bluefin]]
- [[https://projectbluefin.io/][Project Bluefin home]]
- [[https://docs.fedoraproject.org/en-US/docs/][User Documentation - Fedora Linux]]
- [[https://universal-blue.discourse.group/docs][Welcome to Universal Blue General Documentation]]

-$ cat ~/.distroboxrc
/home/linuxbrew/.linuxbrew/opt/isync/bin/mbsync -a
aspell dicts - lists dictionaries installed - en_US worked in emacs
brew install aspell
brew install aspell
brew install detox
brew install espeak-ng
brew install gh
brew install git
brew install hyfetch
brew install isync
brew install newsboat
brew services start isync
cd /usr/bin/
distrobox create --init --image docker.io/library/ubuntu:22.04 --name
ubuntu_box_22_04_new_2 --pre-init-hooks "apt-get update && apt-get install -y
systemd"
distrobox enter ubuntu_box_22_04_new_2
sudo apt-get update
sudo apt-get install -y xfce4 xfce4-goodies
cd ~/projects  # or any directory you prefer
sudo apt-get update
$ apt-cache show emacs | grep Version
Version: 1:27.1+1-3ubuntu3
Version: 1:26.3+1-1ubuntu2
https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
git clone https://git.savannah.gnu.org/git/emacs.git
apt-get update
apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
nvim /etc/apt/sources.list
newer ubuntu location:
nvim # Ubuntu sources have moved to /etc/apt/sources.list.d/ubuntu.sources
Types: deb deb-src
URIs: http://us.archive.ubuntu.com/ubuntu/
Suites: noble noble-updates noble-backports
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
Types: deb deb-src
URIs: http://security.ubuntu.com/ubuntu/
Suites: noble-security
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
add-apt-repository ppa:ubuntu-toolchain-r/ppa
apt-get update
apt-get install gcc-10 libgccjit0 libgccjit-10-dev
apt-get build-dep emacs
apt-get install libjansson4 libjansson-dev
export CC="gcc-10"
./configure --prefix=$HOME/.local --without-compress-install --with-native-compilation
git clone -b master git://git.sv.gnu.org/emacs.git
git clone https://github.com/emacs-mirror/emacs.git
./autogen.sh
./configure --help
When installing software from source on Fedora Silverblue, or any other
immutable system like it, you might prefer to install to a different prefix to
avoid potential issues with the system's default configuration and to keep the
system directories clean. The default installation prefix (/usr/local) is
generally fine for most systems, but on Fedora Silverblue, you might want to use
a user-specific directory or an alternative location that doesn't interfere with
the system-managed directories. A common alternative is to use $HOME/.local or
/opt/emacs. Here’s how you can specify an alternative prefix during the
./configure step: ./configure --prefix=$HOME/.local
make
sudo make install
distrobox create --init --image quay.io/fedora/fedora:39 --name fedora_box_39
--pre-init-hooks "dnf install -y systemd"
distrobox enter fedora_box_39
dnf group list -v --available | grep desktop
sudo dnf check-update
sudo dnf install python-pip
dnf search fonts
fc-match Font Name
flatpak install
flatpak list
flatpak update
gh auth
gh auth login
gh auth setup-git
gh auth status
git config --global user.email "david.rrrrrr@yandex.com"
git config --global user.name "David R Rrrrr"
homebrew is for CLI apps. examples: neovim, dysk, gh, glances, grype, helix,
micro, ollama, spf, ranger, ripgrep, and yt-dlp.
hyfetch - prints system information in nice format for screenshots
nano ~/.gitconfig
rpm-ostree install htop (do not install software this way)
rpm-ostree status
rpm-ostree upgrade
sudo apt install xfce4 xfce4-goodies
sudo dnf install -y bat
sudo dnf install -y dua-cli
sudo dnf install -y eza
sudo dnf install -y feh
sudo dnf install -y htop
sudo dnf install -y tldr
sudo dnf install -y tmux
sudo dnf install -y tree
sudo dnf install -y which
sudo dnf install ./VMware-Horizon-Client-2312.1-8.12.1-23543969.x64.rpm
sudo dnf install ./google-chrome-stable_current_x86_64.rpm
sudo dnf install ./microsoft-edge-stable-125.0.2535.79-1.x86_64.rpm
sudo dnf install @xfce-desktop-environment
sudo dnf install aspell
sudo dnf install aspell-en
sudo dnf install emacs
sudo dnf install espeak-ng
sudo dnf install libreoffice-opensymbol-fonts
sudo dnf install python3 - this was already installed
sudo dnf update
sudo fc-cache -fv
sudo ln -s /usr/bin/espeak-ng espeak
sudo ostree admin status
sudo rpm-ostree status
sudo rpm-ostree update
sudo systemctl status
sudo unzip -d . ~/Downloads/FontArchive.zip
systemctl reboot
ubuntu-family-fonts - these are preinstalled do not need to install them
xhost +si:localuser:$USER >/dev/null
mkdir -p ~/.local/share/fonts
mv /path/to/your/downloaded/font.ttf ~/.local/share/fonts/
or you can do .fonts folder instead if preferred
mkdir -p ~/.fonts
mv ~/Downloads/<your-font-file.ttf> ~/.fonts/
fc-cache -fv
fc-list | grep -i <partial-font-name>
# Aliases to use nvim instead of vi or vim
alias vi='nvim'
alias vim='nvim'
============================================================
python3.12 -m pip install exifread
error: externally-managed-environment
× This environment is externally managed
╰─> To install Python packages system-wide, try brew install
xyz, where xyz is the package you are trying to
install.

If you wish to install a Python library that isn't in Homebrew,
use a virtual environment:

python3 -m venv path/to/venv
source path/to/venv/bin/activate
python3 -m pip install xyz

If you wish to install a Python application that isn't in Homebrew,
it may be easiest to use 'pipx install xyz', which will manage a
virtual environment for you. You can install pipx with

brew install pipx

You may restore the old behavior of pip by passing
the '--break-system-packages' flag to pip, or by adding
'break-system-packages = true' to your pip.conf file. The latter
will permanently disable this error.

If you disable this error, we STRONGLY recommend that you additionally
pass the '--user' flag to pip, or set 'user = true' in your pip.conf
file. Failure to do this can result in a broken Homebrew installation.

Read more about this behavior here: <https://peps.python.org/pep-0668/>
#+end_example
*** doom emacs
- before you start install these items
- git
- ripgrep
- Manjaro
- sudo pacman -S ripgrep
- should already be included in openSUSE or
- sudo zypper install ripgrep
- fd
- Manjaro
- pacman -S fd
- openSUSE
- because fd is out of date in the openSUSE Leap I am installing with cargo
  which is part of rust instead
- https://www.rust-lang.org/tools/install
- https://doc.rust-lang.org/book/ch01-01-installation.html
- https://learning-rust.github.io/docs/installation/
- https://en.opensuse.org/Rust - better to not use this and instead use the
  above, but it is another option
- cargo install fd-find
- snap install emacs --classic
- Manjaro
- # required dependencies
- pacman -S git emacs ripgrep
- # optional dependencies
- pacman -S fd
- openSUSE
- zypper addrepo
  https://download.opensuse.org/repositories/editors/openSUSE_Leap_15.1/editors.repo
- zypper refresh
- zypper install emacs
- git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
- ~/.emacs.d/bin/doom install
- cd ~/.local/share/fonts/
- https://www.nerdfonts.com/font-downloads
- save UbuntuMono Nerd Font files to the above folder
- https://design.ubuntu.com/font
- save Ubuntu font files to the above folder
- sudo fc-cache -fv
- fc-list | grep -i 'ubuntu'
- M-x all-the-icons-install-fonts
*** Cheat Sheet Links
- https://wiki.manjaro.org/index.php/CheatSheet
- https://wiki.manjaro.org/index.php/Main_Page
- https://docs.manjaro.org/
- https://forum.manjaro.org/
- https://en.opensuse.org/SDB:Zypper_usage
-
  https://doc.opensuse.org/documentation/leap/reference/single-html/book-reference/index.html#sec-zypper
- https://doc.opensuse.org/
*** Manjaro Linux Plasma KDE
- open graphical pamac
  - official repositories
    - refresh mirrors list (or sudo pacman-mirrors --fasttrack)
- hamburger menu
  - preferences
    - enable aur support
- terminal
  - sudo pacman -Syyu
- open graphical pamac
- terminal
  - sudo pacman -S base-devel
  - sudo pacman -S yay
  - sudo pacman -S espeak-ng
  - sudo pacman -S texlive-core texlive-bin texlive-latexextra
    - this is for exporting to pdf from org mode emacs command pdflatex
    - alternative for larger install: sudo pacman -S texlive-most texlive-lang
      - note this is a large install
    - to find additional packages: pacman -Ss texlive
  - sudo pacman -S isync #mbsync
*** openSUSE Linux Leap 15.5 x86_64 Plasma KDE
- [[https://www.opensuse.org/#Leap][openSUSE Leap]]
- [[https://snapcraft.io/install/snap-store/opensuse][Install Snap on openSUSE]]
- [[https://flatpak.org/setup/openSUSE][Install Flatpak on openSUSE]]
- [[https://opensuse-guide.org/help.php][Unofficial guide - Appendix A: Help and Docs]]
- [[https://opensuse-guide.org/contribute.php][Unofficial guide - Appendix E: Getting Involved]]
- [[https://build.opensuse.org/][Build openSUSE.org]]
*** Random Linux Commands Flag Notes
grep [options] [pattern] [file or folder or .]
- I ignore binary files from search
- L files-without-match - just list filenames that do not contain matches
- i ignore-case
- l files-with-matches - just list filenames that contain matches
- r recursive
- v instead of returning matches return everything that does NOT match
  (invert-match)
detox
- detox -n or --dry-run to see what is going to do before running a command
- detox -rvn path/ then once you are sure changes are ok detox -rv path/
- n --dry-run does not change anything
- r recursive into subfolders (any folders starting with . such as .git and
  .cache are skipped by default)
- v be verbose about files being renamed
rsync
- a - archive mode - quick way to tell it you want recursion and preserve almost
  everything about the file properties permissions
- v - verbose
- h - output numbers in a human-readable format
- --delete (automatically calls --delete-during) - tells rsync to delete
  extraneous files - read the manual (man) page for this option as their are
  some complex nuances to it for difference scenarios, but for my backup to
  external hard drive use this is a good option
- --exclude - exclude something from being synced
*** Random Linux Commands
Here are a bunch of commands I have run recently just for future reference. I
may or may not have continued using some of these, but you have to sometimes
play around and try different options to find out what is helpful. Some of this
is general command line and some is openSUSE or Manjaro specific.
#+begin_example
  cat /etc/os-release
  sudo zypper refresh
  # if you are running tumbleweed sudo zypper dup
  # --allow-vendor-change dup stands for distribution upgrades whereas
  # zypper up is for package updates
  sudo zypper update
  # command not found - it will tell you what to install to make a
  # certain command available to you
  cnf <command>
  # compiling and linking applications needed for make, make install commands
  sudo zypper install patterns-devel-base-devel_basis # minimal set of tools for
  sudo apt install autoconf automake bison flex gcc make pkg-config
  # install command detox for fixing filenames https://github.com/dharple/detox
  mkdir ~/build
  cd ~/build
  wget
  https://github.com/dharple/detox/releases/download/v2.0.0/detox-2.0.0.tar.gz
  tar xzvf detox-2.0.0.tar.gz
  cd detox-2.0.0
  ./configure
  make
  sudo make install
  # tool for hp printer
  sudo zypper install hplip
  sudo zypper install git-core
  git --version
  git config --global user.name "David R Rrrrr"
  git config --global user.email "david.rrrrrr@yandex.com"
  git config --global core.editor "vim"
  git config --global user.name
  git config --global user.email
  git config --global core.editor
  sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
  sudo zypper refresh
  sudo zypper install gh
  gh auth login
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo zypper addrepo https://packages.microsoft.com/yumrepos/edge
  microsoft-edge
  sudo zypper refresh
  sudo zypper install microsoft-edge-stable
  # alternative method for obtaining edge below
  sudo zypper install opi
  opi msedge
  # other interesting options for opi - brave, megasync, vivaldi, vscode,
  yandex-browser
  opi codecs
  sudo zypper install fetchmsttfonts
  sudo zypper install fira-code-fonts
  sudo zypper install the_silver_searcher
  sudo zypper install ripgrep
  # to make sure there are no emacs files that need to be deleted before I
  # install doom emacs
  find ~ -type f \( -name ".emacs" -o -name ".emacs.el" -o -name "init.el" \)
  -print
  sudo zypper install pandoc
  sudo zypper install isync # mbsync
  sudo zypper install espeak-ng
  sudo zypper install espeak-ng-compat
  sudo zypper addrepo
  https://download.opensuse.org/repositories/Emulators:/Wine/15.4/Emulators:Wine.repo
  sudo zypper refresh
  sudo zypper install wine-staging
  wine --version
  # adjust windows version to latest
  winecfg
  wine AdobeDNGConverter_x64_16_2_1.exe
  sudo zypper install aspell
  # adding tex support to a system is a substantial large install
  # you could export the latex source and upload to a website like
  # overleaf and have their system render the pdf from the latex source
  # if you are doing a lot of updates it might be annoying to keep
  # refreshing, but if you just do something occassionally it might be
  # sufficent
  sudo zypper install texlive texlive-pdflatex
  pandoc -f markdown -t org -o note.org /tmp/md_note.md
  python3.11 -m pip install exifread
  python3.11 -m pip install hyfetch
  python3.11 -m pip install trash-cli
  sudo rsync -avh --delete <copy from path> <copy to path>
  sudo rsync -avh --delete
  /run/media/david/140a6cd2-c07c-4339-bb9a-c87b592bafe5/
  /run/media/david/01d0e521-1a65-41ad-a1b2-e77f68c41894/
  sudo rsync -avh --delete --exclude='.cache/' --exclude='*~' /home/david/ .
  sudo rsync -avh --delete /var/mnt/140a6cd2-c07c-4339-bb9a-c87b592bafe5/{i,m}/
  .
  sudo mkdir /mnt/internal_data/
  sudo blkid # find drive uuid
  # edit /etc/fstab - man fstab for details if needed
  # add line:
  # openSUSE
  UUID=140a6cd2-c07c-4339-bb9a-c87b592bafe5 /mnt/internal_data btrfs user 0 0
  # Manjaro
  UUID=140a6cd2-c07c-4339-bb9a-c87b592bafe5 /mnt/internal_data btrfs users 0 0
  sudo snap install mpv
  find /path/to/search -type d \( -iname "*elfeed*" -o -iname ".*elfeed*" \)
  sudo rsync -avh /run/media/david/AmazonThumbDrive/reorganized_emails/
  /home/david/Maildir/reorganized_emails/
  ln -s /home/david/reorganized_emails /home/david/Maildir/reorganized_emails
  awk '{for(i=1;i<=NF;i++){printf "%s%s",$i,(i%10==0? ".\n":" ")}}' input.txt >
  output.txt
  # https://photoqt.org/downpopupflatpak
  # https://flathub.org/apps/org.photoqt.PhotoQt
  flatpak install flathub org.photoqt.PhotoQt
  # https://www.xnview.com/en/xnviewmp/
  # https://flathub.org/apps/com.xnview.XnViewMP
  flatpak update
  sudo snap refresh
  # iname is case insensitive (versus name)
  find ~/ -iname "*vim*"
  rsync -av --remove-source-files ~/Maildir/gmail/INBOX/
  ~/Maildir/reorganized_emails/
  mv ~/Maildir/gmail/INBOX/* ~/Maildir/gmail/Trash/
  mbsync -a
  You can also update Ubuntu using the terminal.
  Press CTRL+ALT+T to bring up a Terminal window (or click the terminal icon in the sidebar).
  Type in:
  sudo apt update
  You will be prompted to enter your login password.
  This will check for updates and tell you if there are any that need applying. To apply any updates, type:
  sudo apt upgrade
  Type Y, then press ENTER to confirm to finish the update process.
  sudo apt update
  sudo apt install python3.12-venv
  sudo apt install python3.12-dev (I don't think I need this?)
        python3.12 -m venv myenv
        source myenv/bin/activate
        deactivate
        python -m ensurepip --upgrade
        pip install pandas
        wget -qO- https://omakub.org/install | bash
      sudo apt install gnutls-bin (not confident I need this)
      sudo apt-get install meson libgmime-3.0-dev libxapian-dev
      cd projects/
      git clone https://github.com/djcb/mu.git
      ./autogen.sh && make
      sudo make install
      git clone -b main https://github.com/dharple/detox.git
      autoreconf --install
      ./configure
      make
      sudo make install
      man detox
      emacs
      pacman to install libgccjit and mailutils (gnu)
      ./autogen.sh
      ./configure --without-compress-install --with-native-compilation --with-mailutils
      make
      sudo make install
      for python
      use pacman to install python-virtualenv
      pamac install base-devel
      sudo pacman -S github-cli
  gh auth
  gh auth login
  gh auth setup-git
  gh auth status
     sudo pacman -Syu
     sudo pacman -S base-devel git texinfo
#+end_example
**** Trash-cli commands
- trash-put           trash files and directories.
- trash-empty         empty the trashcan(s).
- trash-list          list trashed files.
- trash-restore       restore a trashed file.
- trash-rm            remove individual files from the trashcan.
#+begin_example
  # add to .bashrc
  alias rm='echo "use trash-put or backslash rm to use rm normally"; false'
#+end_example
**** Other Random openSUSE Links
- [[https://en.opensuse.org/Additional_package_repositories]]
- [[https://www.techhut.tv/opensuse-5-things-you-must-do-after-installing/]]
*** Linux Distributions
We are lucky there are so many great distributions out there, here a few but
there are many more.
- [[https://fedoraproject.org/]]
- [[https://www.linuxmint.com/]]
- [[https://pop.system76.com/]]
- [[https://system76.com/]]
  - company sells computers with pop OS pre-installed
- [[https://ubuntu.com/]]
- [[https://manjaro.org/][https://Manjaro.org/]]
*** Apps
- Adobe DNG Converter (windows app run through emulation on wine)
  - [[https://helpx.adobe.com/camera-raw/using/adobe-dng-converter.html]]
  - [[https://helpx.adobe.com/camera-raw/digital-negative.html]]
  - [[https://www.adobe.com/creativecloud/file-types/image/raw/dng-file.html]]
- Alacritty terminal emulator
  - [[https://alacritty.org/]]
- Brave Browser
  - [[https://brave.com/linux/]]
- Emacs - installed from snap
  - [[https://snapcraft.io/emacs]]
- Espeak
  - installed from system package manager
- FD find entries on your file system
  - [[https://github.com/sharkdp/fd]]
  - installed from system package manager
- Handbrake
  - [[https://handbrake.fr/downloads.php]]
  - Flatpak - [[https://flathub.org/apps/fr.handbrake.ghb]]
- MEGA (online backup)
  - [[https://help.mega.io/installs-apps/desktop-syncing]]
    [[https://help.mega.io/installs-apps/desktop-syncing/linux]]
    [[https://mega.io/desktop#download]]
    [[https://mega.nz/linux/repo/]]
- Mbsync
  - installed from system package manager
  - called isync in package manager
- Microsoft Edge Browser
  - [[https://www.microsoft.com/en-us/edge/download?form=MA13FJ]]
- Neovim
  - [[https://github.com/neovim/neovim/blob/master/INSTALL.md]]
- Newsboat
  - installed from snap - [[https://snapcraft.io/newsboat]]
- Opera Browser
  - [[https://www.opera.com/download]]
  - RPM is hidden further down on page or can be installed from snap
  - [[https://snapcraft.io/opera]]
- Pandoc
  - [[https://pandoc.org/installing.html]]
  - installed from system package manager
- Ripgrep (rg)
  - Has some similarities to grep, but also includes its own defaults and
    optimizations that make it behave slightly differently in some cases.
  - [[https://github.com/BurntSushi/ripgrep]]
  - installed from system package manager
- The Silver Searcher (ag)
  - Behavior and syntax are very close to GNU grep.
  - [[https://github.com/ggreer/the_silver_searcher]]
- Vivaldi Browser
  - [[https://vivaldi.com/download/]]
  -
    [[https://help.vivaldi.com/desktop/install-update/manual-setup-vivaldi-linux-repositories/]]
- Wine (windows emulation)
  - [[https://wiki.winehq.org/Download]]
*** Configurations and Tweaks
**** Alacritty
***** Main Configuration From Here
- [[https://github.com/Widkidone/AlacrittyToml/blob/main/alacritty.toml]]
***** Other Interesting Configurations
- [[https://github.com/sabinpocris/alacritty.toml/blob/main/alacritty.toml]]
- [[https://github.com/scalarwaves/dotfiles/blob/main/alacritty/alacritty.toml]]
Neovim does not work fully without a Nerd Font set as your terminal font
[[https://www.nerdfonts.com/]]
Liberation Mono in the Nerd Font world is referenced as Literation Mono Nerd
Font since the Liberation Mono is a reserved name
#+begin_src toml
  [font.bold]
  family = "Liberation Mono"
  style = "Bold"
  [font.bold_italic]
  family = "Liberation Mono"
  style = "Bold Italic"
  [font.italic]
  family = "Liberation Mono"
  style = "Italic"
  [font.normal]
  family = "Liberation Mono"
  style = "Regular"
#+end_src
** Text Editing Resources
*** Introduction Text
Text editing is incredibly valuable for programming, note taking, organizing and
reviewing written information. Here is a collection of thoughts and links I have
found to be valuable.

A lot of people on reddit and on forums ask if it is worth learning the vim
normal mode keybindings. This is a difficult question to answer since it depends
on your needs and workflows. I believe if you work in a text a certain amount of
time it is worth learning, but if you only do small amounts of time in a text
editor it may not be worth it. Here is a way to think about this, if you do
programming in a text editor more than a couple hours a week I would say it
could be worth learning. If you write notes or read a lot of text more than a
couple of hours a week then it may also be worth learning. However, please note
that folks who do not program are a little more mixed on whether it is worth the
time to learn and use, whereas programmers tend to find it worth the time to
learn. It is not just a productivity boost, it is also more engaging and fun as
you work through code or text. I would explore the other options for editing
besides the vim keybindings to see if you like one of the other approaches
better.

If you are a programmer I recommend trying and learning the basics of all three
major text editors which are Visual Studio Code, neovim (or original vim) and
emacs. If you are a writer there are specific setups (distributions) that you
can find for these tools that are targeted for that type of work. I mostly
program and take notes so that is how I focus on these tools. If you are a
programmer the Visual Studio Code with the add-on (extension) vscodevim provides
a setup that you can have up and running super fast that allow you to learn the
ways of vim but have all of the modern conveniences of a high end text editor
working right away. Make sure you go through all of the extensions settings and
turn on some of the plugins if you want to get familiar with them. They are not
all enabled by default. Emacs with vim emulation. Emacs has a robust platform
with tremendous built in functionality. Plus you can extend it with add-ons and
you can have custom functions you can easily add. OpenAI ChatGPT, Google Gemini
can generate custom functions you can add to your emacs configuration. Make sure
you add a unique prefix to any custom functions so you do not create any name
conflicts. If you do not like the vim keybindings Emacs has the most other
options available including variations of the vim keybindings and keybindings
that are completely different or can be customized to suite your needs. The only
slight downside if you go these routes is that they are only readily available
for emacs, but luckily emacs can be infinitely customized and extended.

Examples of other keybinding options: First a quick note on the vanilla Emacs
keybindings. I have spent time learning them and they are really hard on your
hands. The only way you can sort of mitigate that issue is by having a custom
keyboard where you can reprogram the buttons so you do not put strain on your
pinky. God mode and devil mode can also solve the hand fatigue problem. Yes,
emacs pinky is actually a problem and hand fatigue in general. If you do want to
learn the vanilla keybindings they are very logical once you get used to them
and they pair well with either god mode or devil mode.

Xah Fly Keys is the most efficient system for programmers, but only readily
available for Emacs. I would only consider learning Xah Fly Keys if you program
more than 70% of your time and you are ok being locked into emacs. The author
asks for donations for folks who use his tools. Of course it is requested that
people donate to all open source projects that help them if they can afford to
do so. Below are links to YouTube videos, you have to watch multiple videos to
see the real benefit of this system.

Boon is a well thought out system, again only for emacs. I like some of the
thoughts and layouts that are in the system. It is clearly a smart design. The
only problem with it is even though it is easy to learn I do not feel like
learning it gives you the boost that most people are looking for in their
workflow. It is still nice and straightforward and well designed. Still worth
looking at, but I think most people would be happier with vim or if you are all
in on emacs Xah Fly Keys.

Meow is a variation on the vim keybindings. The only problem I have with that is
if I switch between Meow and standard vim it is too confusing to my brain
because they are so similar. It is almost easier to keep two different systems
distinguished in your brain if they are totally different. A lot of people
really like Meow and it is really easy to make adjustments to the setup of it. I
would say if you are leaving vim and not going to go back you might really enjoy
the improvements that Meow makes.

Wakib: Emacs for the rest of us. This is both a minor mode and a starter kit.
This is incredibly well thought out. I like the keyboard layout it is very
logical and similar to some of the other systems mentioned above. This feels
very well polished with the starter kit giving you a lot of functionality right
away. This gives you the benefit of cut, copy, paste in the same way as other
apps it also has a robust starter kit. You can use the starter kit or the
keybindings independently. I used this for a little while, but I went back to
vim keybindings.

**** Links
- [[https://www.youtube.com/watch?v=rK51Lp_lreI][Intro to Wakib, an Emacs Starter Kit]]
- [[https://github.com/darkstego/wakib-emacs]]
- [[https://github.com/darkstego/wakib-keys]]
- [[https://ergoemacs.github.io/]]
- [[https://github.com/xahlee/xah-fly-keys]]
- [[https://www.youtube.com/watch?v=-iDJV2GPjEY][The Most Efficient Emacs Workflow, more efficient than vim]]
- [[https://www.youtube.com/watch?v=deg74diF_2Q&t=1445s][Xah Talk Show 2023-10-25 Xah Fly Keys, Bill Gosper Equations, Game of Life]]
- [[https://www.youtube.com/watch?v=TXKlr67qSlc&t=14s][Xah Talk Show Ep532 What Happens When You Blog for 25 Years]]
- [[https://www.youtube.com/watch?v=giwqQY1inn0][intro to svalboard datahand, best input device]]
- [[https://www.youtube.com/watch?v=KZA6tojsGfU][Xah Talk Show Ep541, emacs org-mode key, WolframLang tiling, plane curves,
  math]]
- [[https://www.youtube.com/watch?v=ypjsgrpG1r4][xah emacs talk show 2019-01-07 xah-html-mode vs org mode]]
- [[https://www.youtube.com/watch?v=-vQ56wu30Lg][emacs xah fly keys intro]]
- [[https://github.com/emacsorphanage/god-mode]]
- [[https://github.com/jyp/boon]]
- [[https://github.com/susam/devil]]
- [[https://www.youtube.com/watch?v=MPSkyfOp5H8][Emacs Packages for Modal Editing - System Crafters Live!]]
- [[https://systemcrafters.net/live-streams/april-21-2023/]]
Emacs can read written text out loud in audio format text-to-speech. It has a
robotic voice, but I actually prefer that when I am trying to study or review
certain kinds of information.

You can take a video and extract the audio and then transcribe it with a paid
service like this one [[https://turboscribe][https://turboscribe.ai]]. Then you can read it or have Emacs
perform text-to-speech. This allows you to review the information at different
speeds. It allows a more consistent pace to be possible. It allows for searching
through information.

Emacs has a built in web browser, it is handy if you have a text heavy document
that you want open side by side with a place to take notes in emacs. It does not
replace full featured web browsers, but is still helpful for reference document
review.

Neovim and Emacs both have distributions. A lot of people tell you to build your
own configuration. It can take a long time to really understand how to setup
your own configuration to best optimize your workflows. I like how the
distributions usually offer keybindings decided on with a logical layout. It is
helpful to build your own config because you learn so much.
-
  [[https://gitlab.com/public-repositories/emacs-groundup/-/blob/main/src/docs/emacs-groundup.org]]
*** Learning The Vim Keybindings - Video Game For Vim Keybindings
- [[https://vim-adventures.com/]]
I highly recommend playing this game. I have to confess that I find the game
frustrating, but it helps you learn, so I feel it is worth the trouble of
playing the game and paying for it. As long as you know you want to build vim
skills, then it is worth the trouble to play the game in my opinion. You can
play the game a little while for free, after that you have to pay. At first I
was not willing to pay for it, but I decided to just do it anyway and I am
really glad I did. It forces you to learn the vim motions in a different context
and makes you more effective in text editing contexts.

The reason why I find the game frustrating is the author does not give you
enough information for you to know what you are supposed to do. He does this on
purpose to challenge you, but I wish he added more of a hint system in the game
to give you a bit more information to work with, but please do not let this
detour you from working through the challenges.

I recommend you play the game and struggle as much as possible before trying to
find any answers online.

I have some mental/brain challenges with working through a game like this, so I
know others may also experience challenges where it may be very difficult for
you to figure out what to do in the game.

First take a break and try the problem again. Look at the motions available to
you and think about creative ways to use them.

Instead of looking up an answer you can also email the author for a hint. He
tries not to give you the answer but prefers just to give you a hint so you can
try to figure it out.
- [[https://github.com/pepers/vim-adventures]]
This has answers in text form from Level 8 to the Last Level of the main story
line. This does not cover the Macro puzzles. There are some small mistakes in
the document, but it is mostly correct.
**** Videos From Vomikod
Playlist
-
  [[https://youtube.com/playlist?list=PLl3Gy8rm8g9THKPnmbegeeiu0NvmbLg-V&si=Kc9uqQXNbWAoJTA7]]
Plays through levels 1 -- Last Level, videos are not in English -- there is at
least one puzzle that had a small change implemented since he recorded these
videos, but it is mostly accurate to the current game. The game authors YouTube
Channel:
- [[https://www.youtube.com/@DoronLinder/videos][https://www.youtube.com/@DoronLinder/videos]]
Videos of note:
- Video Explaining the Game
- Level 1 -- How to cross the ocean information
- Explains Level 5 where is the hidden key
**** File Formats For Note Taking
Org, AsciiDoc and Markdown are a few examples of popular formats for taking
notes. There are more choices out there then these options. You can use plain
text documents (txt) if you just want to copy and paste a bunch of information
into a file that you can search or grep later to find. If you are organizing
information that you are going share with others or need the document to be more
structured for your own reference then org and Markdown formats are worth
learning and using. If you need highly structured control over formatting above
what AsciiDoc, Markdown and Org can provide then look into LaTeX. Note you can
use a tool called Pandoc to convert these formats to other formats. So you do
not need to go to the LaTeX level which is very involved unless you need very
specific formatting for PDFs or print.
***** Short Videos Note Taking
****** Is Neovim The Ultimate Note Taking Tool?
- [[https://www.youtube.com/watch?v=vdBkQ4jT2OE]]
Org style notation that can be exported to other formats Author has transitioned
to this system instead now (I like the simpler approach above, but this does
offer more):
- [[https://www.youtube.com/watch?v=5ht8NYkU9wQ&t=5s]]
***** Long Videos Note Taking
- [[https://www.youtube.com/@mischavandenburg/videos][https://www.youtube.com/@mischavandenburg/videos]]
****** Videos Of Interest
- FULL NEOVIM Configuration Walkthrough As A DevOps Engineer On MacOS
- Ultimate Notetaking: My Neovim Zettelkasten Based on Obsidian - Complete
  Walkthrough
- My Entire Neovim + Tmux Workflow As A DevOps Engineer On MacOS
I like the style and approach of how he uses Markdown and his workflows. When
you install neovim it is bare bones, so you can add distribution layer on top of
the base that makes it easy to use and awesome right away, you can still
customize it further to meet your needs but it gives you a good out of the box
experience.
*** Neovim Distributions
- [[https://www.lazyvim.org/]]
- [[https://nvchad.com/]]
funny video about note taking if you jump to 14:43 his explanation of emacs and
21:20 for neovim or watch the whole thing for entertainment and additional
context:
- [[https://www.youtube.com/watch?v=XRpHIa-2XCE]]
Popular series on doom Emacs:
- [[https://www.youtube.com/@DistroTube/videos][https://www.youtube.com/@DistroTube/videos]]
Japanese app author shares his neovim setups, his app is a note taking app, very
inspirational:
- [[https://www.youtube.com/@devaslife/videos][https://www.youtube.com/@devaslife/videos]]
*** The Primeagen Related Links - Michael Paulson
- [[https://youtube.com/@ThePrimeagen/videos]]
- [[https://www.youtube.com/@ThePrimeTimeagen/videos][https://www.youtube.com/@ThePrimeTimeagen/videos]]
- [[https://www.youtube.com/@TheVimeagen/videos][https://www.youtube.com/@TheVimeagen/videos]]
- [[https://www.twitch.tv/theprimeagen]]
- [[https://kinesis-ergo.com/prime360/][Discount Codes on Kinesis Official Website - they have many types of keyboards
  so make sure you look through all of the options.]]
- [[https://twitter.com/ThePrimeagen]]
- [[https://www.instagram.com/ThePrimeagen/]]
- [[https://www.tiktok.com/@theprimeagen][https://www.tiktok.com/@theprimeagen]]
- [[https://discord.gg/ThePrimeagen]]
- [[https://linktr.ee/ThePrimeagen]]
- [[https://github.com/ThePrimeagen]]
- [[https://github.com/ThePrimeagen?tab=repositories]]
- [[https://github.com/ThePrimeagen/ThePrimeagen]]
- [[https://github.com/ThePrimeagen/yt]]
- [[https://frontendmasters.com/courses/vim-fundamentals/]]
- [[https://frontendmasters.com/teachers/the-primeagen/]]
- [[https://github.com/hakluke/how-to-exit-vim][How to exit vim - just a silly lol article - if you do need to quit ESC :q!
  (quit do not save changes) or ESC :wq (write/save your changes and quit)]]
- [[https://www.youtube.com/watch?v=ZRnWmNdf5IE][From Vim To Zed]]
- [[https://www.boot.dev/?promo=PRIME][Boot.dev - Learn Backend Development the Smart Way - Primeagen Discount Link]]
*** Emacs M-x Commands I randomly use
- auto-fill-mode - automatically inserts line lines at specified line width
- avy-copy-line
- avy-move-line
- buffer-menu
- capitalize-word
- check-parens
- dired
- display-fill-column-indicator-mode - shows vertical bar on the number of
  characters you have set for fill-column value
- eshell
- flush-lines (with parameter ^$) - deletes blank lines in highlighted region
- greader-mode
- ibuffer
- list-command-history (shows minibuffer history)
- manual-entry (shows manual page inside of emacs)
- narrow-to-region (widen to re-expand - this allows you to just work on a small
  part of your file without accidentally messing up something off screen)
- olivetti-mode
- org-insert-link
- org-lint
- org-mark-subtree
- org-narrow-to-block
- org-narrow-to-element
- org-narrow-to-subtree
- org-open-at-point - opens a link under the point (cursor) when on a link in
  org mode
- org-sort
- org-sort-list
- org-toggle-narrow-to-subtree
- query-replace-regexp
- set-variable (fill-column for location of text width to adjust to 80
  characters or whatever)
- sort-columns
- sort-fields
- sort-lines
- sort-numeric-fields
- sort-paragraphs
- treemacs-edit-workspaces
- turn-off-evil-mode
- turn-on-evil-mode
- visual-line-mode
- wakib-keys
- whitespace-cleanup
- whitespace-mode
- yank-from-kill-ring
*** Greader Notes
First you have to install espeak on your system. Then install greader.
**** My Greader Workflow In Detail
Open Emacs then open the text file I want to have read to me with the robotic
voice. Note the reading speed of the robot is set in your Emacs configuration
file with variable: ~(setq greader-espeak-rate 300)~. You vary the number to
whatever suites your preferred speaking pace. I would keep in mind that since it
is reading text it is not perfectly comparable to the rate that people talk or
what speed you would normally read. So just try different speeds until you find
what works best for you.

A customization I like to use it to toggle olivetti-mode (or some other zen type
mode) before reading. =M-x= type =greader-mode ENTER=. To have it start reading
you do =C-r SPACE= and to have it stop you do =SPACE=.
** Newsboat Configuration and My Youtube Playlist Watch list
*** config file
#+begin_example
  browser "xdg-open '%u'
#+end_example
*** urls
#+begin_example
"query:Unread Articles:unread = \"yes\""
"query:Read Articles:unread = \"no\""
"https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg" ;DistroTube
#+end_example
** FAQs
*** Which text editor do you recommend the most?
Emacs. It offers the most customization, flexibility, add-ons/plugins...
basically an incredible ecosystem. The wide variety of tools can help in many
areas, for example:
- You can set a text to speech to read to you.
- You can use a variety of terminals.
- You can edit text using any methodology you want including vim keybindings.
- You can navigate your file system using dired
- You can optimize your workflows by having more tasks inside of Emacs.
- You have full org mode support for text tasks which then can be exported to a
  myriad of formats.
*** Which text format do you recommend the most?
The org format from Emacs org mode. It is a more consistent implementation
compared to Markdown. Although Markdown is not really that bad, Emacs has a
robust Markdown mode if you do need that format. You can also convert from org
documents to Markdown using Pandoc. Org mode can seem a little overwhelming at
first because it can do so much. However, learning the basics can allow you to
do the same things that Markdown allows but have the flexibility to expand what
you use it for if needed. Look at Orgdown if you want a simpler starting point
then full org mode. Another interesting feature is you can use code blocks and
then tangle them to export the code blocks to a separate file. This is called
literate programming allows you to create one file and then have different
exports for documentation and for code. You only have to maintain one file, but
you create whatever exports you need. Another option of note is AsciiDoc which
has better formatting than Markdown and can be converted using Pandoc to lots of
formats as well. It seems to be popular for technical publishing, including but
not limited to producing actual technical books, README files, man pages,
articles and taking notes.
*** Which system do you recommend learning for emacs keybindings between evil,
vanilla emacs, xah fly keys, boon, meow, wakib?
My answer on this question has changed multiple times. Many people were shocked
when the great YouTuber David Wilson of System Crafters channel switched from
evil back to vanilla Emacs keybindings. His reasoning was then he does not have
to context switch as much and there is more consistency as he moves around to
different parts of Emacs. It also allows him to use plain Emacs with efficiency
without having to worry about getting evil mode installed to complete basic
tasks. I do agree with this logic. You can always add god or devil mode to
translate the normal Emacs keybindings without as much hand strain. Then you can
also learn from books more easily since you are using the default keybindings
and not a custom setup. If you want to be able to use the same keybindings in
multiple programs then you would be either learning some of the vim ways as that
is the only one that spans emacs, neovim and vscode as an option. I do not have
a perfect answer to this problem, I wish I did. I like switching editors and
learning different systems. My usual workflow is to use vim keybindings but to
have a quick toggle to turn them off for vanilla Emacs keybindings depending on
what I am doing. Then if I want to use neovim for something specific it is
easier to use that tool in place of Emacs.
** Additional Links
- https://asciidoc.org/
- https://powerman.name/doc/asciidoc
- https://pandoc.org/
- Vim/Neovim: [[https://github.com/YanivZalach/Vim_Config_NO_PLUGINS]]
- Vim/Neovim: [[https://github.com/YanivZalach/Vim_Config]]
- Neovim: [[https://github.com/YanivZalach/Nvim_Config]]
- Emacs: [[https://github.com/doomemacs/doomemacs]]
- Emacs: [[https://github.com/corgi-emacs/corgi]]
- Markdown: [[https://www.markdownguide.org/]]
- Org Mode: [[https://orgmode.org/]]
- LaTeX (if you need precise formatting control): [[https://www.latex-project.org/]]
- Github Markdown: [[https://docs.github.com/en/get-started/writing-on-github]]
- Markdown Cheat Sheet:
  [[https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet]]
- Markdown Here: [[https://github.com/adam-p/markdown-here]]
- Emacs: [[https://distro.tube/]]
- Emacs: [[https://emacsconf.org/2023/talks/]]
- Emacs: [[https://emacs.stackexchange.com/]]
- Emacs: [[https://github.com/daviwil/dotfiles/]]
- Emacs: [[https://github.com/daviwil/emacs-from-scratch]]
- Emacs: [[https://github.com/Gavinok/emacs.d]]
- Emacs: [[https://github.com/susam/dotfiles]]
- Emacs: [[https://github.com/susam/emfy]]
- Emacs: [[https://github.com/SystemCrafters/crafted-emacs]]
- Emacs: [[https://gitlab.com/Clsmith1]]
- Emacs: [[https://gitlab.com/dwt1]]
- Emacs: [[https://gitlab.com/protesilaos/dotfiles]]
- Emacs: [[https://planet.emacslife.com/]]
- Emacs: [[https://protesilaos.com/]]
- Emacs: [[https://protesilaos.com/emacs/]]
- Emacs: [[https://protesilaos.com/emacs/iosevka-comfy-pictures]]
- Emacs: [[https://systemcrafters.net/emacs-from-scratch/]]
- Emacs: [[https://www.masteringemacs.org/]]
- Emacs: [[https://www.masteringemacs.org/book]]
- Font GNU Unifont on Wikipedia: [[https://en.wikipedia.org/wiki/GNU_Unifont]]
- Font Unifont Download: [[https://ftp.gnu.org/gnu/unifont/]]
- Font Unifont: [[http://unifoundry.com/unifont/index.html]]
- Font YouTube Video about Unifont: [[https://www.youtube.com/watch?v=ckrkW8VHRIs]]
- YouTube Channel: [[https://www.youtube.com/@bwestbro/videos][https://www.youtube.com/@bwestbro/videos]]
- YouTube Channel: [[https://www.youtube.com/@DistroTube/videos][https://www.youtube.com/@DistroTube/videos]]
- YouTube Channel: [[https://www.youtube.com/@linuxtechgeek/videos][https://www.youtube.com/@linuxtechgeek/videos]]
- YouTube Channel: [[https://www.youtube.com/@protesilaos/videos][https://www.youtube.com/@protesilaos/videos]]
- YouTube Channel: [[https://www.youtube.com/@SystemCrafters/videos][https://www.youtube.com/@SystemCrafters/videos]]
- YouTube Channel: [[https://www.youtube.com/@mzamansky/videos][https://www.youtube.com/@mzamansky/videos]]
- YouTube Channel: [[https://www.youtube.com/@abcdw/videos][https://www.youtube.com/@abcdw/videos]]
- YouTube Channel: [[https://www.youtube.com/@GavinFreeborn/videos][https://www.youtube.com/@GavinFreeborn/videos]]
- YouTube Channel: [[https://www.youtube.com/@emacselements/videos][https://www.youtube.com/@emacselements/videos]]
- Neovim: [[https://github.com/rvbug/neovim]]
- Neovim: [[https://github.com/NormalNvim/NormalNvim]]
- Neovim: [[https://github.com/rockerBOO/awesome-neovim]]
- Neovim: [[https://dotfyle.com/neovim/plugins/top?categories=preconfigured]]
- Vim: [[https://github.com/ibhagwan/vim-cheatsheet]]
- Vim: [[https://github.com/vbd/Fieldnotes/blob/main/vim.md]]
- Emacs:
  [[http://yummymelon.com/devnull/announcing-casual-an-opinionated-porcelain-for-emacs-calc.html]]
- Emacs: [[https://xenodium.com/my-emacs-eye-candy/]]
- Emacs: [[https://github.com/xenodium/dotsies]]
- Neovim: [[https://github.com/itsvinayak/TurboNvimConfig.nvim]]
- Vim/Neovim: [[https://www.youtube.com/watch?v=5BU2gBOe9RU][YouTube Video: Vim
  Tips I Wish I Knew Earlier by Sebastian Daschner]]
- Neovim: [[https://www.youtube.com/watch?v=6pAG3BHurdM][YouTube Video: How I
  Setup Neovim On My Mac To Make It AMAZING In 2024 by Josean Martinez]]
- [[https://github.com/trishume/dotfiles]]
- [[https://github.com/trishume]]
- [[https://elpa.gnu.org/packages/greader.html]]
- [[https://github.com/emacs-straight/greader]]
- [[https://github.com/emacs-straight]]
- [[https://espeak.sourceforge.net/]]
- [[https://github.com/espeak-ng/espeak-ng]]
- [[https://github.com/thinkhuman/writingwithemacs]]
- [[https://www.gnu.org/manual/manual.html][GNU Manuals Online]]
- [[https://www.gnu.org/doc/doc.html][Documentation of the GNU Project]]
- [[https://www.gnu.org/software/emacs/documentation.html][GNU Emacs Documentation & Support]]
- [[https://www.gnu.org/software/emacs/manual/index.html][GNU Emacs Manuals Online]]
- [[https://www.gnu.org/software/emacs/refcards/index.html][GNU Emacs Reference Cards]]
- [[https://www.gnu.org/doc/other-free-books.html][Free Books from Other Publishers]]
-
  [[https://github.com/SilverSnake0/File-Automated-Assistant-Mover][SilverSnake0/File-Automated-Assistant-Mover
  Excellent Python Toolkit for Organizing and Searching Files - You can run it
  on a folder and it will sort all of the loose files into file type sub folders
  and it will not mess with your existing subfolders - it also has tools for
  searching and finding through sets of files uses python 3]]
- [[https://www.youtube.com/@cantucodes/videos][Cantu Codes - Weekly Neovim Plugin Series]]
- [[https://github.com/alextricity25/nvim_weekly_plugin_configs][Alex Cantu Github for Code from the Weekly Neovim Plugin Series]]
- [[https://www.youtube.com/watch?v=jgogUgeuBPo][goparism youtube channel video: Where To Learn Emacs in 2024]]
- [[https://www.youtube.com/@goparism/videos][goparism youtube channel]]
- [[https://francopasut.netlify.app/post/markdown-vim-emacs-sublime-vscode/][Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code - Franco Pasut]]
- [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Article Org Mode
  Syntax Is One of the Most Reasonable Markup Languages to Use for Text]]
- [[https://missing.csail.mit.edu/2020/editors/]]
- [[https://www.youtube.com/watch?v=aiBt8CieE7U][Gavin Freeborn - Double Your Productivity With Emacs Org-Mode]]
- [[https://www.youtube.com/watch?v=DEeStDz_imQ][Gavin Freeborn - 5 Reasons I Love Emacs Orgmode]]
- [[https://www.youtube.com/watch?v=0-brF21ShRk][Gavin Freeborn - You Should Really Learn Org Mode - It's Easy]]
- [[https://protesilaos.com/codelog/2024-04-24-re-what-keeps-you-emacs/][Protesilaos Stavrou - Re: what keeps you coming back to Emacs?]]
- [[https://protesilaos.com/commentary/2024-04-10-joy-of-writing/][Protesilaos Stavrou - The joy of writing]]
- [[https://www.youtube.com/watch?v=-ybCiHPWKNA][TheVimeagen - Teaching Neovim From Scratch To A Noob]]
- [[https://gitlab.com/publicvoit/orgdown/-/blob/master/README.org][https://gitlab.com/publicvoit/orgdown/-/blob/master/README.org]]
  - Orgdown (in short “OD) is a lightweight markup language similar to Markdown
    but it’s consistent, easy to learn, simple to type even without
    tool-support, and it is based on its older brother: Org-mode
  - The purpose of this site is to provide basic information on the Orgdown
    syntax, supported software programs, mobile apps, services, and parsers.
- [[https://www.youtube.com/watch?v=mmqDYw9C30I][Josean Martinez - 7 Amazing CLI Tools You Need To Try]]
- [[https://www.youtube.com/watch?v=uOnL4fEnldA][Josean Martinez - How To Make
  Your Boring macOS Terminal Amazing With Alacritty (some of the tips apply to
  linux Alacritty use as well)]]
- https://github.com/james-stoup/org-mode-better-defaults
- https://github.com/james-stoup/emacs-org-mode-tutorial/
- https://orgmode.org/quickstart.html
- https://karl-voit.at/2021/07/23/emacs-lock-in/
- https://lazyvim-ambitious-devs.phillips.codes/ - LazyVim for Ambitious Developers (LazyVim Distribution for neovim free e-book)
- https://omakub.org/ - An Omakase Developer Setup for Ubuntu 24.04 by DHH (eza, fzf, rg, zoxide, and bg)
  - quote from above site: Use the six default workspaces for apps (hotkeys:
    Super+1/2/3/…), preferably full-screen ones on laptop displays (hotkey:
    F11), or tiled neatly using Tactile (hotkey: Super+T). Speed of motion is
    also why all the transition animations have been nerfed. And start any app
    in the dock (hotkey: Super) based on it’s position (hotkey: Alt+1/2/3/4). So
    browser is just Alt+1, Terminal Alt+2, etc. Additionally, Ulauncher provides
    an app launcher ala Raycast, which you trigger with Super+Space. And you can
    quickly enter emojis with the compose key (which is mapped to Caps Lock) m
    and then a single letter representing the emoji. Run omakub, pick hotkeys,
    and there you can see it all.

** Additional Configuration File Notes
*** bashrc .bashrc

this is my bashrc file on Manjaro, a lot of this was default, I added the
aliases and exports at the end
#+begin_example
#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
	else
		PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

#alias cp="cp -i"                          # confirm before overwriting something
#alias df='df -h'                          # human-readable sizes
#alias free='free -m'                      # show sizes in MB
#alias np='nano -w PKGBUILD'
#alias more=less

xhost +local:root > /dev/null 2>&1

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

alias vi='nvim'
alias vim='nvim'

export EDITOR="nvim"
export SUDO_EDITOR="nvim"
#+end_example
*** Notmuch config .notmuch-config
this is created automatically by running notmuch setup - you then run notmuch
new to index your emails
#+begin_example
# .notmuch-config - Configuration file for the notmuch mail system
#
# For more information about notmuch, see https://notmuchmail.org
# Database configuration
#
# The only value supported here is 'path' which should be the top-level
# directory where your mail currently exists and to where mail will be
# delivered in the future. Files should be individual email messages.
# Notmuch will store its database within a sub-directory of the path
# configured here named ".notmuch".
#
[database]
path=/run/media/david/myINTERNAL/reorganized_emails
# User configuration
#
# Here is where you can let notmuch know how you would like to be
# addressed. Valid settings are
#
#	name		Your full name.
#	primary_email	Your primary email address.
#	other_email	A list (separated by ';') of other email addresses
#			at which you receive email.
#
# Notmuch will use the various email addresses configured here when
# formatting replies. It will avoid including your own addresses in the
# recipient list of replies, and will set the From address based on the
# address to which the original email was addressed.
#
[user]
name=
primary_email=
other_email=
# Configuration for "notmuch new"
#
# The following options are supported here:
#
#	tags	A list (separated by ';') of the tags that will be
#		added to all messages incorporated by "notmuch new".
#
#	ignore	A list (separated by ';') of file and directory names
#		that will not be searched for messages by "notmuch new".
#
#		NOTE: *Every* file/directory that goes by one of those
#		names will be ignored, independent of its depth/location
#		in the mail store.
#
[new]
tags=archived
# Search configuration
#
# The following option is supported here:
#
#	exclude_tags
#		A ;-separated list of tags that will be excluded from
#		search results by default.  Using an excluded tag in a
#		query will override that exclusion.
#
[search]
# Maildir compatibility configuration
#
# The following option is supported here:
#
#	synchronize_flags      Valid values are true and false.
#
#	If true, then the following maildir flags (in message filenames)
#	will be synchronized with the corresponding notmuch tags:
#
#		Flag	Tag
#		----	-------
#		D	draft
#		F	flagged
#		P	passed
#		R	replied
#		S	unread (added when 'S' flag is not present)
#
#	The "notmuch new" command will notice flag changes in filenames
#	and update tags, while the "notmuch tag" and "notmuch restore"
#	commands will notice tag changes and update flags in filenames
#
[maildir]
#+end_example
*** mbsyncrc .mbsyncrc
#+begin_example
IMAPAccount gmail
Host imap.gmail.com
User emailgoeshere
Pass secretpasswordgoeshere
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path /run/media/david/myINTERNAL/Maildir/gmail/
Inbox /run/media/david/myINTERNAL/Maildir/gmail/INBOX
SubFolders Verbatim

Channel gmail
Far :gmail-remote:
Near :gmail-local:
Patterns * "[Gmail]/Sent Mail" "[Gmail]/Trash" "[Gmail]/All Mail" !"[Gmail]/Starred"
Create Near
SyncState *
#+end_example
*** wezterm lua .wezterm.lua
#+begin_example
-- Pull in the wezterm API
local wezterm = require("wezterm")

-- This will hold the configuration.
local config = wezterm.config_builder()

-- This is where you actually apply your config choices

config.font = wezterm.font("FiraMono Nerd Font")
config.font_size = 14

-- config.enable_tab_bar = false

config.window_decorations = "RESIZE"
config.window_background_opacity = 0.75
config.color_scheme = "tokyonight_night"
-- config.macos_window_background_blur = 8

-- and finally, return the configuration to wezterm
return config
#+end_example
*** git config .gitconfig
#+begin_example
[user]
	email = david.rrrrrr@yandex.com
	name = David R Rrrrr
[credential "https://github.com"]
	helper =
	helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
	helper = !/usr/bin/gh auth git-credential
#+end_example
*** zellij config.kdl
this is just the default configuration it generates with a command
#+begin_example
// If you'd like to override the default keybindings completely, be sure to change "keybinds" to "keybinds clear-defaults=true"
keybinds {
    normal {
        // uncomment this and adjust key if using copy_on_select=false
        // bind "Alt c" { Copy; }
    }
    locked {
        bind "Ctrl g" { SwitchToMode "Normal"; }
    }
    resize {
        bind "Ctrl n" { SwitchToMode "Normal"; }
        bind "h" "Left" { Resize "Increase Left"; }
        bind "j" "Down" { Resize "Increase Down"; }
        bind "k" "Up" { Resize "Increase Up"; }
        bind "l" "Right" { Resize "Increase Right"; }
        bind "H" { Resize "Decrease Left"; }
        bind "J" { Resize "Decrease Down"; }
        bind "K" { Resize "Decrease Up"; }
        bind "L" { Resize "Decrease Right"; }
        bind "=" "+" { Resize "Increase"; }
        bind "-" { Resize "Decrease"; }
    }
    pane {
        bind "Ctrl p" { SwitchToMode "Normal"; }
        bind "h" "Left" { MoveFocus "Left"; }
        bind "l" "Right" { MoveFocus "Right"; }
        bind "j" "Down" { MoveFocus "Down"; }
        bind "k" "Up" { MoveFocus "Up"; }
        bind "p" { SwitchFocus; }
        bind "n" { NewPane; SwitchToMode "Normal"; }
        bind "d" { NewPane "Down"; SwitchToMode "Normal"; }
        bind "r" { NewPane "Right"; SwitchToMode "Normal"; }
        bind "x" { CloseFocus; SwitchToMode "Normal"; }
        bind "f" { ToggleFocusFullscreen; SwitchToMode "Normal"; }
        bind "z" { TogglePaneFrames; SwitchToMode "Normal"; }
        bind "w" { ToggleFloatingPanes; SwitchToMode "Normal"; }
        bind "e" { TogglePaneEmbedOrFloating; SwitchToMode "Normal"; }
        bind "c" { SwitchToMode "RenamePane"; PaneNameInput 0;}
    }
    move {
        bind "Ctrl h" { SwitchToMode "Normal"; }
        bind "n" "Tab" { MovePane; }
        bind "p" { MovePaneBackwards; }
        bind "h" "Left" { MovePane "Left"; }
        bind "j" "Down" { MovePane "Down"; }
        bind "k" "Up" { MovePane "Up"; }
        bind "l" "Right" { MovePane "Right"; }
    }
    tab {
        bind "Ctrl t" { SwitchToMode "Normal"; }
        bind "r" { SwitchToMode "RenameTab"; TabNameInput 0; }
        bind "h" "Left" "Up" "k" { GoToPreviousTab; }
        bind "l" "Right" "Down" "j" { GoToNextTab; }
        bind "n" { NewTab; SwitchToMode "Normal"; }
        bind "x" { CloseTab; SwitchToMode "Normal"; }
        bind "s" { ToggleActiveSyncTab; SwitchToMode "Normal"; }
        bind "b" { BreakPane; SwitchToMode "Normal"; }
        bind "]" { BreakPaneRight; SwitchToMode "Normal"; }
        bind "[" { BreakPaneLeft; SwitchToMode "Normal"; }
        bind "1" { GoToTab 1; SwitchToMode "Normal"; }
        bind "2" { GoToTab 2; SwitchToMode "Normal"; }
        bind "3" { GoToTab 3; SwitchToMode "Normal"; }
        bind "4" { GoToTab 4; SwitchToMode "Normal"; }
        bind "5" { GoToTab 5; SwitchToMode "Normal"; }
        bind "6" { GoToTab 6; SwitchToMode "Normal"; }
        bind "7" { GoToTab 7; SwitchToMode "Normal"; }
        bind "8" { GoToTab 8; SwitchToMode "Normal"; }
        bind "9" { GoToTab 9; SwitchToMode "Normal"; }
        bind "Tab" { ToggleTab; }
    }
    scroll {
        bind "Ctrl s" { SwitchToMode "Normal"; }
        bind "e" { EditScrollback; SwitchToMode "Normal"; }
        bind "s" { SwitchToMode "EnterSearch"; SearchInput 0; }
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Normal"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        // uncomment this and adjust key if using copy_on_select=false
        // bind "Alt c" { Copy; }
    }
    search {
        bind "Ctrl s" { SwitchToMode "Normal"; }
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Normal"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        bind "n" { Search "down"; }
        bind "p" { Search "up"; }
        bind "c" { SearchToggleOption "CaseSensitivity"; }
        bind "w" { SearchToggleOption "Wrap"; }
        bind "o" { SearchToggleOption "WholeWord"; }
    }
    entersearch {
        bind "Ctrl c" "Esc" { SwitchToMode "Scroll"; }
        bind "Enter" { SwitchToMode "Search"; }
    }
    renametab {
        bind "Ctrl c" { SwitchToMode "Normal"; }
        bind "Esc" { UndoRenameTab; SwitchToMode "Tab"; }
    }
    renamepane {
        bind "Ctrl c" { SwitchToMode "Normal"; }
        bind "Esc" { UndoRenamePane; SwitchToMode "Pane"; }
    }
    session {
        bind "Ctrl o" { SwitchToMode "Normal"; }
        bind "Ctrl s" { SwitchToMode "Scroll"; }
        bind "d" { Detach; }
        bind "w" {
            LaunchOrFocusPlugin "session-manager" {
                floating true
                move_to_focused_tab true
            };
            SwitchToMode "Normal"
        }
    }
    tmux {
        bind "[" { SwitchToMode "Scroll"; }
        bind "Ctrl b" { Write 2; SwitchToMode "Normal"; }
        bind "\"" { NewPane "Down"; SwitchToMode "Normal"; }
        bind "%" { NewPane "Right"; SwitchToMode "Normal"; }
        bind "z" { ToggleFocusFullscreen; SwitchToMode "Normal"; }
        bind "c" { NewTab; SwitchToMode "Normal"; }
        bind "," { SwitchToMode "RenameTab"; }
        bind "p" { GoToPreviousTab; SwitchToMode "Normal"; }
        bind "n" { GoToNextTab; SwitchToMode "Normal"; }
        bind "Left" { MoveFocus "Left"; SwitchToMode "Normal"; }
        bind "Right" { MoveFocus "Right"; SwitchToMode "Normal"; }
        bind "Down" { MoveFocus "Down"; SwitchToMode "Normal"; }
        bind "Up" { MoveFocus "Up"; SwitchToMode "Normal"; }
        bind "h" { MoveFocus "Left"; SwitchToMode "Normal"; }
        bind "l" { MoveFocus "Right"; SwitchToMode "Normal"; }
        bind "j" { MoveFocus "Down"; SwitchToMode "Normal"; }
        bind "k" { MoveFocus "Up"; SwitchToMode "Normal"; }
        bind "o" { FocusNextPane; }
        bind "d" { Detach; }
        bind "Space" { NextSwapLayout; }
        bind "x" { CloseFocus; SwitchToMode "Normal"; }
    }
    shared_except "locked" {
        bind "Ctrl g" { SwitchToMode "Locked"; }
        bind "Ctrl q" { Quit; }
        bind "Alt n" { NewPane; }
        bind "Alt i" { MoveTab "Left"; }
        bind "Alt o" { MoveTab "Right"; }
        bind "Alt h" "Alt Left" { MoveFocusOrTab "Left"; }
        bind "Alt l" "Alt Right" { MoveFocusOrTab "Right"; }
        bind "Alt j" "Alt Down" { MoveFocus "Down"; }
        bind "Alt k" "Alt Up" { MoveFocus "Up"; }
        bind "Alt =" "Alt +" { Resize "Increase"; }
        bind "Alt -" { Resize "Decrease"; }
        bind "Alt [" { PreviousSwapLayout; }
        bind "Alt ]" { NextSwapLayout; }
    }
    shared_except "normal" "locked" {
        bind "Enter" "Esc" { SwitchToMode "Normal"; }
    }
    shared_except "pane" "locked" {
        bind "Ctrl p" { SwitchToMode "Pane"; }
    }
    shared_except "resize" "locked" {
        bind "Ctrl n" { SwitchToMode "Resize"; }
    }
    shared_except "scroll" "locked" {
        bind "Ctrl s" { SwitchToMode "Scroll"; }
    }
    shared_except "session" "locked" {
        bind "Ctrl o" { SwitchToMode "Session"; }
    }
    shared_except "tab" "locked" {
        bind "Ctrl t" { SwitchToMode "Tab"; }
    }
    shared_except "move" "locked" {
        bind "Ctrl h" { SwitchToMode "Move"; }
    }
    shared_except "tmux" "locked" {
        bind "Ctrl b" { SwitchToMode "Tmux"; }
    }
}

plugins {
    tab-bar location="zellij:tab-bar"
    status-bar location="zellij:status-bar"
    strider location="zellij:strider"
    compact-bar location="zellij:compact-bar"
    session-manager location="zellij:session-manager"
    welcome-screen location="zellij:session-manager" {
        welcome_screen true
    }
    filepicker location="zellij:strider" {
        cwd "/"
    }
}

// Choose what to do when zellij receives SIGTERM, SIGINT, SIGQUIT or SIGHUP
// eg. when terminal window with an active zellij session is closed
// Options:
//   - detach (Default)
//   - quit
//
// on_force_close "quit"

//  Send a request for a simplified ui (without arrow fonts) to plugins
//  Options:
//    - true
//    - false (Default)
//
// simplified_ui true

// Choose the path to the default shell that zellij will use for opening new panes
// Default: $SHELL
//
// default_shell "fish"

// Choose the path to override cwd that zellij will use for opening new panes
//
// default_cwd ""

// Toggle between having pane frames around the panes
// Options:
//   - true (default)
//   - false
//
// pane_frames true

// Toggle between having Zellij lay out panes according to a predefined set of layouts whenever possible
// Options:
//   - true (default)
//   - false
//
// auto_layout true

// Whether sessions should be serialized to the cache folder (including their tabs/panes, cwds and running commands) so that they can later be resurrected
// Options:
//   - true (default)
//   - false
//
// session_serialization false

// Whether pane viewports are serialized along with the session, default is false
// Options:
//   - true
//   - false (default)
// serialize_pane_viewport true

// Scrollback lines to serialize along with the pane viewport when serializing sessions, 0
// defaults to the scrollback size. If this number is higher than the scrollback size, it will
// also default to the scrollback size. This does nothing if `serialize_pane_viewport` is not true.
//
// scrollback_lines_to_serialize 10000

// Define color themes for Zellij
// For more examples, see: https://github.com/zellij-org/zellij/tree/main/example/themes
// Once these themes are defined, one of them should to be selected in the "theme" section of this file
//
// themes {
//     dracula {
//         fg 248 248 242
//         bg 40 42 54
//         red 255 85 85
//         green 80 250 123
//         yellow 241 250 140
//         blue 98 114 164
//         magenta 255 121 198
//         orange 255 184 108
//         cyan 139 233 253
//         black 0 0 0
//         white 255 255 255
//     }
// }

// Choose the theme that is specified in the themes section.
// Default: default
//
// theme "default"

// The name of the default layout to load on startup
// Default: "default"
//
// default_layout "compact"

// Choose the mode that zellij uses when starting up.
// Default: normal
//
// default_mode "locked"

// Toggle enabling the mouse mode.
// On certain configurations, or terminals this could
// potentially interfere with copying text.
// Options:
//   - true (default)
//   - false
//
// mouse_mode false

// Configure the scroll back buffer size
// This is the number of lines zellij stores for each pane in the scroll back
// buffer. Excess number of lines are discarded in a FIFO fashion.
// Valid values: positive integers
// Default value: 10000
//
// scroll_buffer_size 10000

// Provide a command to execute when copying text. The text will be piped to
// the stdin of the program to perform the copy. This can be used with
// terminal emulators which do not support the OSC 52 ANSI control sequence
// that will be used by default if this option is not set.
// Examples:
//
// copy_command "xclip -selection clipboard" // x11
// copy_command "wl-copy"                    // wayland
// copy_command "pbcopy"                     // osx

// Choose the destination for copied text
// Allows using the primary selection buffer (on x11/wayland) instead of the system clipboard.
// Does not apply when using copy_command.
// Options:
//   - system (default)
//   - primary
//
// copy_clipboard "primary"

// Enable or disable automatic copy (and clear) of selection when releasing mouse
// Default: true
//
// copy_on_select false

// Path to the default editor to use to edit pane scrollbuffer
// Default: $EDITOR or $VISUAL
//
// scrollback_editor "/usr/bin/vim"

// When attaching to an existing session with other users,
// should the session be mirrored (true)
// or should each user have their own cursor (false)
// Default: false
//
// mirror_session true

// The folder in which Zellij will look for layouts
//
// layout_dir "/path/to/my/layout_dir"

// The folder in which Zellij will look for themes
//
// theme_dir "/path/to/my/theme_dir"

// Enable or disable the rendering of styled and colored underlines (undercurl).
// May need to be disabled for certain unsupported terminals
// Default: true
//
// styled_underlines false

// Enable or disable writing of session metadata to disk (if disabled, other sessions might not know
// metadata info on this session)
// Default: false
//
// disable_session_metadata true
#+end_example
