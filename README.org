* Linux My Personal Notes and Thoughts :TOC_9:
  - [[#linux-notes--thoughts][Linux Notes / Thoughts]]
    - [[#fedora-silverblue-and-bluefin-customized-version-of-fedora-silverblue-plus-fedora-kinoite-and-aurora-customized-version-of-fedora-kinoite][Fedora Silverblue and bluefin customized version of Fedora Silverblue, plus Fedora Kinoite and Aurora customized version of Fedora Kinoite]]
    - [[#doom-emacs][doom emacs]]
    - [[#cheat-sheet-links][Cheat Sheet Links]]
    - [[#manjaro-linux-plasma-kde][Manjaro Linux Plasma KDE]]
    - [[#opensuse-linux-leap-155-x86_64-plasma-kde][openSUSE Linux Leap 15.5 x86_64 Plasma KDE]]
    - [[#random-linux-commands-flag-notes][Random Linux Commands Flag Notes]]
    - [[#random-linux-commands][Random Linux Commands]]
      - [[#trash-cli-commands][Trash-cli commands]]
      - [[#other-random-opensuse-links][Other Random openSUSE Links]]
    - [[#linux-distributions][Linux Distributions]]
    - [[#apps][Apps]]
    - [[#configurations-and-tweaks][Configurations and Tweaks]]
      - [[#alacritty][Alacritty]]
        - [[#main-configuration-from-here][Main Configuration From Here]]
        - [[#other-interesting-configurations][Other Interesting Configurations]]
  - [[#text-editing-resources][Text Editing Resources]]
    - [[#introduction-text][Introduction Text]]
      - [[#links][Links]]
    - [[#learning-the-vim-keybindings---video-game-for-vim-keybindings][Learning The Vim Keybindings - Video Game For Vim Keybindings]]
      - [[#videos-from-vomikod][Videos From Vomikod]]
      - [[#file-formats-for-note-taking][File Formats For Note Taking]]
        - [[#short-videos-note-taking][Short Videos Note Taking]]
          - [[#is-neovim-the-ultimate-note-taking-tool][Is Neovim The Ultimate Note Taking Tool?]]
        - [[#long-videos-note-taking][Long Videos Note Taking]]
          - [[#videos-of-interest][Videos Of Interest]]
    - [[#neovim-distributions][Neovim Distributions]]
    - [[#the-primeagen-related-links---michael-paulson][The Primeagen Related Links - Michael Paulson]]
    - [[#emacs-m-x-commands-i-randomly-use][Emacs M-x Commands I randomly use]]
    - [[#greader-notes][Greader Notes]]
      - [[#my-greader-workflow-in-detail][My Greader Workflow In Detail]]
  - [[#newsboat-configuration-and-my-youtube-playlist-watch-list][Newsboat Configuration and My Youtube Playlist Watch list]]
    - [[#config-file][config file]]
    - [[#urls][urls]]
  - [[#faqs][FAQs]]
    - [[#which-text-editor-do-you-recommend-the-most][Which text editor do you recommend the most?]]
    - [[#which-text-format-do-you-recommend-the-most][Which text format do you recommend the most?]]
    - [[#which-system-do-you-recommend-learning-for-emacs-keybindings-between-evil][Which system do you recommend learning for emacs keybindings between evil,]]
  - [[#additional-links][Additional Links]]
  - [[#additional-configuration-file-notes][Additional Configuration File Notes]]
    - [[#kitty-kittyconf-current-themeconf][kitty kitty.conf current-theme.conf]]
    - [[#mailcap-mailcap-for-use-with-alot-that-works-with-notmuch][mailcap .mailcap (for use with alot that works with notmuch)]]
      - [[#alot-example-command][alot example command]]
      - [[#reference-links-for-searching-notmuch][reference links for searching notmuch]]
      - [[#alot-config-theme][alot config theme]]
      - [[#alot-config][alot config]]
    - [[#mailcap-mailcap-for-use-with-notmuch-inside-of-emacs][mailcap .mailcap (for use with notmuch inside of emacs)]]
    - [[#bashrc-bashrc][bashrc .bashrc]]
    - [[#bash-profile-bash_profile][bash profile .bash_profile]]
    - [[#notmuch-config-notmuch-config][Notmuch config .notmuch-config]]
    - [[#mbsyncrc-mbsyncrc][mbsyncrc .mbsyncrc]]
    - [[#wezterm-lua-weztermlua][wezterm lua .wezterm.lua]]
    - [[#git-config-gitconfig][git config .gitconfig]]
    - [[#authinfo][.authinfo]]
    - [[#zellij-configkdl][zellij config.kdl]]

** Linux Notes / Thoughts
*** Fedora Silverblue and bluefin customized version of Fedora Silverblue, plus Fedora Kinoite and Aurora customized version of Fedora Kinoite
- [[https://docs.fedoraproject.org/en-US/quick-docs/fonts/][Adding New Fonts in Fedora]]
- [[https://docs.fedoraproject.org/en-US/fedora/latest/][Fedora Linux User Documentation]]
- [[https://docs.fedoraproject.org/en-US/quick-docs/][Fedora Quick Docs]]
- [[https://docs.fedoraproject.org/en-US/fedora-silverblue/][Fedora Silverblue User Guide]]
- [[https://universal-blue.discourse.group/t/gui-install-which-order/2018/9][GUI install, which order?]]
- [[https://universal-blue.discourse.group/docs?topic=41][Introduction to Bluefin]]
- [[https://projectbluefin.io/][Project Bluefin home]]
- [[https://docs.fedoraproject.org/en-US/docs/][User Documentation - Fedora Linux]]
- [[https://universal-blue.discourse.group/docs][Welcome to Universal Blue General Documentation]]
- [[https://getaurora.dev/][Get Aurora home]]
- [[https://fedoraproject.org/atomic-desktops/kinoite/][Fedora Kinoite]]
#+begin_example
-$ cat ~/.distroboxrc
/home/linuxbrew/.linuxbrew/opt/isync/bin/mbsync -a
aspell dicts - lists dictionaries installed - en_US worked in emacs
brew install aspell
brew install aspell
brew install detox
brew install espeak-ng
brew install gh
brew install git
brew install hyfetch
brew install isync
brew install newsboat
brew services start isync
cd /usr/bin/
distrobox enter ubuntu_box_22_04_new_2
sudo apt-get update
sudo apt-get install -y xfce4 xfce4-goodies
cd ~/projects  # or any directory you prefer
sudo apt-get update
$ apt-cache show emacs | grep Version
Version: 1:27.1+1-3ubuntu3
Version: 1:26.3+1-1ubuntu2
https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
git clone https://git.savannah.gnu.org/git/emacs.git
apt-get update
apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
nvim /etc/apt/sources.list
newer ubuntu location:
nvim # Ubuntu sources have moved to /etc/apt/sources.list.d/ubuntu.sources
Types: deb deb-src
URIs: http://us.archive.ubuntu.com/ubuntu/
Suites: noble noble-updates noble-backports
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
Types: deb deb-src
URIs: http://security.ubuntu.com/ubuntu/
Suites: noble-security
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
add-apt-repository ppa:ubuntu-toolchain-r/ppa
apt-get update
apt-get install gcc-10 libgccjit0 libgccjit-10-dev
apt-get build-dep emacs
apt-get install libjansson4 libjansson-dev
export CC="gcc-10"
./configure --prefix=$HOME/.local --without-compress-install --with-native-compilation
git clone -b master git://git.sv.gnu.org/emacs.git
git clone https://github.com/emacs-mirror/emacs.git
./autogen.sh
./configure --help
When installing software from source on Fedora Silverblue, or any other
immutable system like it, you might prefer to install to a different prefix to
avoid potential issues with the system's default configuration and to keep the
system directories clean. The default installation prefix (/usr/local) is
generally fine for most systems, but on Fedora Silverblue, you might want to use
a user-specific directory or an alternative location that doesn't interfere with
the system-managed directories. A common alternative is to use $HOME/.local or
/opt/emacs. Here’s how you can specify an alternative prefix during the
./configure step: ./configure --prefix=$HOME/.local
make
sudo make install
distrobox enter fedora_box_39
dnf group list -v --available | grep desktop
sudo dnf check-update
sudo dnf install python-pip
dnf search fonts
fc-match Font Name
flatpak install
flatpak list
flatpak update
gh auth
gh auth login
gh auth setup-git
gh auth status
git config --global user.email "david.rrrrrr@yandex.com"
git config --global user.name "David R Rrrrr"
homebrew is for CLI apps. examples: neovim, dysk, gh, glances, grype, helix,
micro, ollama, spf, ranger, ripgrep, and yt-dlp.
hyfetch - prints system information in nice format for screenshots
nano ~/.gitconfig
rpm-ostree install htop (do not install software this way)
rpm-ostree status
rpm-ostree upgrade
sudo apt install xfce4 xfce4-goodies
sudo dnf install -y bat
sudo dnf install -y dua-cli
sudo dnf install -y eza
sudo dnf install -y feh
sudo dnf install -y htop
sudo dnf install -y tldr
sudo dnf install -y tmux
sudo dnf install -y tree
sudo dnf install -y which
sudo dnf install ./VMware-Horizon-Client-2312.1-8.12.1-23543969.x64.rpm
sudo dnf install ./google-chrome-stable_current_x86_64.rpm
sudo dnf install ./microsoft-edge-stable-125.0.2535.79-1.x86_64.rpm
sudo dnf install @xfce-desktop-environment
sudo dnf install aspell
sudo dnf install aspell-en
sudo dnf install emacs
sudo dnf install espeak-ng
sudo dnf install libreoffice-opensymbol-fonts
sudo dnf install python3 - this was already installed
sudo dnf update
sudo fc-cache -fv
sudo ln -s /usr/bin/espeak-ng espeak
sudo ostree admin status
sudo rpm-ostree status
sudo rpm-ostree update
sudo systemctl status
sudo unzip -d . ~/Downloads/FontArchive.zip
systemctl reboot
ubuntu-family-fonts - these are preinstalled do not need to install them
xhost +si:localuser:$USER >/dev/null
mkdir -p ~/.local/share/fonts
mv /path/to/your/downloaded/font.ttf ~/.local/share/fonts/
or you can do .fonts folder instead if preferred
mkdir -p ~/.fonts
mv ~/Downloads/<your-font-file.ttf> ~/.fonts/
fc-cache -fv
fc-list | grep -i <partial-font-name>
# Aliases to use nvim instead of vi or vim
alias vi='nvim'
alias vim='nvim'
distrobox create --init --image docker.io/library/archlinux:latest --name arch_box_latest --pre-init-hooks "pacman -Syu --noconfirm"
distrobox enter arch_box_latest
sudo pacman -S xfce4 xfce4-goodies
sudo pacman -Syu - update system
distrobox create --init --image docker.io/library/ubuntu:22.04 --name ubuntu_box_22_04_new_2 --pre-init-hooks "apt-get update && apt-get upgrade -y" --additional-packages "systemd"
exit
distrobox rm fedora_box_39
distrobox create --init --image quay.io/fedora/fedora:39 --name fedora_box_39 --pre-init-hooks "dnf update -y" --additional-packages "systemd"
https://distrobox.it/useful_tips/#resolve-error-cannot-open-display-0
Resolve “Error cannot open display: :0”
If your container is not able to connect to your host xserver, make sure to install xhost on the host machine and run xhost +si:localuser:$USER. If you wish to enable this functionality on future reboots add the above command to your ~/.distroboxrc
-$ cat ~/.distroboxrc
xhost +si:localuser:$USER >/dev/null
sudo pacman -Rs php - remove a package (manually delete config files left behind)
sudo pacman -Ss php - search for package
sudo pacman -Qs php - search for an already installed package
sudo pacman -Qm php - search for an already installed package that is from outside of the offical repositories like the AUR
https://aur.archlinux.org
sudo pacman -S --needed base-devel
sudo pacman -S git
git clone <url>
yay.git
makepkg -si
sudo pacman -U yay-ver.pkg.tar.zst
yay --version
yay -Syu - run update with packages installed from AUR
https://github.com/Jguer/yay
First Use
Development packages upgrade

    Use yay -Y --gendb to generate a development package database for *-git packages that were installed without yay. This command should only be run once.

    yay -Syu --devel will then check for development package updates

    Use yay -Y --devel --save to make development package updates permanently enabled (yay and yay -Syu will then always check dev packages)
check latest version of google chrome using this command
curl -sSf https://dl.google.com/linux/chrome/deb/dists/stable/main/binary-amd64/Packages | \
     grep -A1 "Package: google-chrome-stable" | \
     awk '/Version/{print $2}' | \
     cut -d '-' -f1
from: https://aur.archlinux.org/packages/google-chrome
yay -S google-chrome
==> NOTE: Custom flags should be put directly in: ~/.config/chrome-flags.conf
==> NOTE: The launcher is called: 'google-chrome-stable'
yay -S brave-bin
Flatpak
Brave is available as a Flatpak package from Flathub. While it is maintained by Brave Software, it is not yet working as well as our native packages. We currently recommend that users who are able to use our official package repositories do so instead of using the Flatpak.
brave-bin
https://cli.github.com/
https://github.com/cli/cli#installation
sudo pacman -S github-cli
sudo pacman -S aspell
sudo pacman -S aspell-en
sudo pacman -S espeak-ng
detox install for cleaning up filenames
pacman -S --needed base-devel gcc git mingw-w64-x86_64-toolchain
# install command detox for fixing filenames https://github.com/dharple/detox
git clone -b main https://github.com/dharple/detox.git
cd detox
autoreconf --install
./configure
make
sudo make install
sudo pacman -S isync #mbsync
git clone https://git.savannah.gnu.org/git/emacs.git
sudo pacman -Syu base-devel git libjpeg-turbo libpng libtiff giflib gnutls jansson libxml2 libxpm libxaw librsvg gcc cmake
sudo pacman -S libgccjit
# Configure the build
./autogen.sh
./configure --prefix=/home/david/.local --without-compress-install --with-native-compilation --with-mailutils
# Build and install
make
sudo make install
sudo pacman -S meson
sudo pacman -S cmake
sudo pacman -S gmime3
sudo pacman -S xapian-core
yay -S cld2-git
git clone https://github.com/djcb/mu.git
./autogen.sh
make
sudo make install
notmuch
sudo pacman -S notmuch
dependencies for arch for wezterm
https://github.com/wez/wezterm/blob/main/get-deps
arch_deps() {
  PACMAN="$SUDO pacman"
  $PACMAN -S --noconfirm --needed \
    'base-devel' \
    'cargo' \
    'cmake' \
    'fontconfig' \
    'git' \
    'hicolor-icon-theme' \
    'libx11' \
    'libxkbcommon-x11' \
    'pkgconf' \
    'python3' \
    'wayland' \
    'xcb-util' \
    'xcb-util-image' \
    'xcb-util-keysyms' \
    'xcb-util-wm'

  if test_flag; then
    $PACMAN -S --noconfirm --needed \
      'openssh'
  fi
}
https://github.com/wez/wezterm
https://wezfurlong.org/wezterm/installation
User facing docs and guide at: https://wezfurlong.org/wezterm/
sudo pacman -S wezterm
Go ahead and install rust to give you the cargo option and some additional neovim compatibility
https://www.rust-lang.org/tools/install
sudo pacman -S neovim
lazyvim
live grep: ripgrep
If you're a Rust programmer, ripgrep can be installed with cargo.

    Note that the minimum supported version of Rust for ripgrep is 1.72.0, although ripgrep may work with older versions.
    Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run strip on the binary.

$ cargo install ripgrep

Alternatively, one can use cargo binstall to install a ripgrep binary directly from GitHub:

$ cargo binstall ripgrep
https://github.com/BurntSushi/ripgrep?tab=readme-ov-file#installation
find files: fd
https://github.com/sharkdp/fd
From source

With Rust's package manager cargo, you can install fd via:

cargo install fd-find

Note that rust version 1.77.2 or later is required.
Development
git clone https://github.com/sharkdp/fd

# Build
cd fd
cargo build

# Run unit tests and integration tests
cargo test

# Install
cargo install --path .
pacman -S fd
lazygit requirements
a terminal that support true color and undercurl:
    kitty (Linux & Macos)
    wezterm (Linux, Macos & Windows)
    alacritty (Linux, Macos & Windows)
    iterm2 (Macos)
# required
mv ~/.config/nvim{,.bak}

# optional but recommended
mv ~/.local/share/nvim{,.bak}
mv ~/.local/state/nvim{,.bak}
mv ~/.cache/nvim{,.bak}
git clone https://github.com/LazyVim/starter ~/.config/nvim
rm -rf ~/.config/nvim/.git
nvim
chat with ChatGPT
my question: if I want neovim and vim on the same system, where can I put my vim config for original vim where neovim won't look for it
answer from ChatGPT:
To have both Vim and Neovim on the same system with separate configurations, you can place your Vim configuration in the default location (`~/.vimrc` and `~/.vim/`) and Neovim will not use these files by default. Neovim uses a different location for its configuration files (`~/.config/nvim/init.vim` or `~/.config/nvim` for the directory). Here's how you can set it up:

### Vim Configuration
1. Place your Vim configuration in `~/.vimrc`.
2. Put any Vim-specific configuration files or plugins in `~/.vim/`.

### Neovim Configuration
1. Place your Neovim configuration in `~/.config/nvim/init.vim`.
2. Put any Neovim-specific configuration files or plugins in `~/.config/nvim/`.

### Example Setup

- **Vim**
  - Configuration file: `~/.vimrc`
  - Directory for plugins and other configurations: `~/.vim/`

- **Neovim**
  - Configuration file: `~/.config/nvim/init.vim`
  - Directory for plugins and other configurations: `~/.config/nvim/`

### Sample Directories and Files

#### Vim
```plaintext
~/.vimrc
~/.vim/
  ├── autoload/
  ├── colors/
  ├── plugin/
  └── ...
```

#### Neovim
```plaintext
~/.config/nvim/init.vim
~/.config/nvim/
  ├── lua/
  ├── plugin/
  └── ...
```

By keeping your Vim configuration files in `~/.vimrc` and `~/.vim/`, and your Neovim configuration files in `~/.config/nvim/init.vim` and `~/.config/nvim/`, you ensure that each editor uses its respective configuration files without conflict.
sudo pacman -S python-pip
sudo pacman -S python-virtualenv
python3.12 -m venv ./myenv
source ./myenv/bin/activate
pip install --upgrade pip setuptools wheel
pip install pynvim
deactivate
sudo pacman -S python-pynvim
sudo pacman -S elinks
sudo pacman -S alacritty
sudo pacman -S kitty
sudo pacman -S fzf
Optional dependencies for fzf
    fish: fish keybindings
    tmux: fzf-tmux script for launching fzf in a tmux pane [installed]
    vim: plugin
    zsh: zsh keybindings
:: Running post-transaction hooks...
(1/1) Arming ConditionNeedsUpdate...
sudo pacman -S bat
# installs nvm (Node Version Manager)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

# download and install Node.js (you may need to restart the terminal)
nvm install 20

# verifies the right Node.js version is in the environment
node -v # should print `v20.15.1`

# verifies the right NPM version is in the environment
npm -v # should print `10.7.0`
sudo pacman -S gvim
sudo pacman -Syu
sudo pacman -S ffmpeg
sudo pacman -S vieb
sudo pacman -S wl-clipboard
yay -S vieb-bin (or yay -S vieb-git)
sudo pacman -S eza
sudo pacman -S zoxide
do not use: sudo pacman -S tldr (this gives and error so install directly with npm or python pip)
example replacement for above: npm install -g tldr

============================================================
python3.12 -m pip install exifread
error: externally-managed-environment
× This environment is externally managed
╰─> To install Python packages system-wide, try brew install
xyz, where xyz is the package you are trying to
install.

If you wish to install a Python library that isn't in Homebrew,
use a virtual environment:

python3 -m venv path/to/venv
source path/to/venv/bin/activate
python3 -m pip install xyz

If you wish to install a Python application that isn't in Homebrew,
it may be easiest to use 'pipx install xyz', which will manage a
virtual environment for you. You can install pipx with

brew install pipx

You may restore the old behavior of pip by passing
the '--break-system-packages' flag to pip, or by adding
'break-system-packages = true' to your pip.conf file. The latter
will permanently disable this error.

If you disable this error, we STRONGLY recommend that you additionally
pass the '--user' flag to pip, or set 'user = true' in your pip.conf
file. Failure to do this can result in a broken Homebrew installation.

Read more about this behavior here: <https://peps.python.org/pep-0668/>
#+end_example
*** doom emacs
- before you start install these items
- git
- ripgrep
- Manjaro
- sudo pacman -S ripgrep
- should already be included in openSUSE or
- sudo zypper install ripgrep
- fd
- Manjaro
- pacman -S fd
- openSUSE
- because fd is out of date in the openSUSE Leap I am installing with cargo
  which is part of rust instead
- https://www.rust-lang.org/tools/install
- https://doc.rust-lang.org/book/ch01-01-installation.html
- https://learning-rust.github.io/docs/installation/
- https://en.opensuse.org/Rust - better to not use this and instead use the
  above, but it is another option
- cargo install fd-find
- snap install emacs --classic
- Manjaro
- # required dependencies
- pacman -S git emacs ripgrep
- # optional dependencies
- pacman -S fd
- openSUSE
- zypper addrepo
  https://download.opensuse.org/repositories/editors/openSUSE_Leap_15.1/editors.repo
- zypper refresh
- zypper install emacs
- git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
- ~/.emacs.d/bin/doom install
- cd ~/.local/share/fonts/
- https://www.nerdfonts.com/font-downloads
- save UbuntuMono Nerd Font files to the above folder
- https://design.ubuntu.com/font
- save Ubuntu font files to the above folder
- sudo fc-cache -fv
- fc-list | grep -i 'ubuntu'
- M-x all-the-icons-install-fonts
*** Cheat Sheet Links
- https://wiki.manjaro.org/index.php/CheatSheet
- https://wiki.manjaro.org/index.php/Main_Page
- https://docs.manjaro.org/
- https://forum.manjaro.org/
- https://en.opensuse.org/SDB:Zypper_usage
-
  https://doc.opensuse.org/documentation/leap/reference/single-html/book-reference/index.html#sec-zypper
- https://doc.opensuse.org/
*** Manjaro Linux Plasma KDE
- open graphical pamac
  - official repositories
    - refresh mirrors list (or sudo pacman-mirrors --fasttrack)
- hamburger menu
  - preferences
    - enable aur support
- terminal
  - sudo pacman -Syyu
- open graphical pamac
- terminal
  - sudo pacman -S base-devel
  - sudo pacman -S yay
  - sudo pacman -S espeak-ng
  - sudo pacman -S texlive-core texlive-bin texlive-latexextra
    - this is for exporting to pdf from org mode emacs command pdflatex
    - alternative for larger install: sudo pacman -S texlive-most texlive-lang
      - note this is a large install
    - to find additional packages: pacman -Ss texlive
  - sudo pacman -S isync #mbsync
*** openSUSE Linux Leap 15.5 x86_64 Plasma KDE
- [[https://www.opensuse.org/#Leap][openSUSE Leap]]
- [[https://snapcraft.io/install/snap-store/opensuse][Install Snap on openSUSE]]
- [[https://flatpak.org/setup/openSUSE][Install Flatpak on openSUSE]]
- [[https://opensuse-guide.org/help.php][Unofficial guide - Appendix A: Help and Docs]]
- [[https://opensuse-guide.org/contribute.php][Unofficial guide - Appendix E: Getting Involved]]
- [[https://build.opensuse.org/][Build openSUSE.org]]
*** Random Linux Commands Flag Notes
grep [options] [pattern] [file or folder or .]
- I ignore binary files from search
- L files-without-match - just list filenames that do not contain matches
- i ignore-case
- l files-with-matches - just list filenames that contain matches
- r recursive
- v instead of returning matches return everything that does NOT match
  (invert-match)
detox
- detox -n or --dry-run to see what is going to do before running a command
- detox -rvn path/ then once you are sure changes are ok detox -rv path/
- n --dry-run does not change anything
- r recursive into subfolders (any folders starting with . such as .git and
  .cache are skipped by default)
- v be verbose about files being renamed
rsync
- a - archive mode - quick way to tell it you want recursion and preserve almost
  everything about the file properties permissions
- v - verbose
- h - output numbers in a human-readable format
- --delete (automatically calls --delete-during) - tells rsync to delete
  extraneous files - read the manual (man) page for this option as their are
  some complex nuances to it for difference scenarios, but for my backup to
  external hard drive use this is a good option
- --exclude - exclude something from being synced
*** Random Linux Commands
Here are a bunch of commands I have run recently just for future reference. I
may or may not have continued using some of these, but you have to sometimes
play around and try different options to find out what is helpful. Some of this
is general command line and some is openSUSE or Manjaro specific.
#+begin_example
cat /etc/os-release
sudo zypper refresh
# if you are running tumbleweed sudo zypper dup
# --allow-vendor-change dup stands for distribution upgrades whereas
# zypper up is for package updates
sudo zypper update
# command not found - it will tell you what to install to make a
# certain command available to you
cnf <command>
# compiling and linking applications needed for make, make install commands
sudo zypper install patterns-devel-base-devel_basis # minimal set of tools for
sudo apt install autoconf automake bison flex gcc make pkg-config
# install command detox for fixing filenames https://github.com/dharple/detox
mkdir ~/build
cd ~/build
wget
https://github.com/dharple/detox/releases/download/v2.0.0/detox-2.0.0.tar.gz
tar xzvf detox-2.0.0.tar.gz
cd detox-2.0.0
./configure
make
sudo sudo make install
# tool for hp printer
sudo zypper install hplip
sudo zypper install git-core
git --version
git config --global user.name "David R Rrrrr"
git config --global user.email "david.rrrrrr@yandex.com"
git config --global core.editor "vim"
git config --global user.name
git config --global user.email
git config --global core.editor
sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
sudo zypper refresh
sudo zypper install gh
gh auth login
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo zypper addrepo https://packages.microsoft.com/yumrepos/edge
microsoft-edge
sudo zypper refresh
sudo zypper install microsoft-edge-stable
# alternative method for obtaining edge below
sudo zypper install opi
opi msedge
# other interesting options for opi - brave, megasync, vivaldi, vscode,
yandex-browser
opi codecs
sudo zypper install fetchmsttfonts
sudo zypper install fira-code-fonts
sudo zypper install the_silver_searcher
sudo zypper install ripgrep
# to make sure there are no emacs files that need to be deleted before I
# install doom emacs
find ~ -type f \( -name ".emacs" -o -name ".emacs.el" -o -name "init.el" \)
-print
sudo zypper install pandoc
sudo zypper install isync # mbsync
sudo zypper install espeak-ng
sudo zypper install espeak-ng-compat
sudo zypper addrepo
https://download.opensuse.org/repositories/Emulators:/Wine/15.4/Emulators:Wine.repo
sudo zypper refresh
sudo zypper install wine-staging
wine --version
# adjust windows version to latest
winecfg
wine AdobeDNGConverter_x64_16_2_1.exe
sudo zypper install aspell
# adding tex support to a system is a substantial large install
# you could export the latex source and upload to a website like
# overleaf and have their system render the pdf from the latex source
# if you are doing a lot of updates it might be annoying to keep
# refreshing, but if you just do something occassionally it might be
# sufficent
sudo zypper install texlive texlive-pdflatex
pandoc -f markdown -t org -o note.org /tmp/md_note.md
python3.11 -m pip install exifread
python3.11 -m pip install hyfetch
python3.11 -m pip install trash-cli
sudo rsync -avh --delete <copy from path> <copy to path>
sudo rsync -avh --delete
/run/media/david/140a6cd2-c07c-4339-bb9a-c87b592bafe5/
/run/media/david/01d0e521-1a65-41ad-a1b2-e77f68c41894/
sudo rsync -avh --delete --exclude='.cache/' --exclude='*~' /home/david/ .
sudo rsync -avh --delete /var/mnt/140a6cd2-c07c-4339-bb9a-c87b592bafe5/{i,m}/
.
sudo mkdir /mnt/internal_data/
sudo blkid # find drive uuid
# edit /etc/fstab - man fstab for details if needed
# add line:
# openSUSE
UUID=140a6cd2-c07c-4339-bb9a-c87b592bafe5 /mnt/internal_data btrfs user 0 0
# Manjaro
UUID=140a6cd2-c07c-4339-bb9a-c87b592bafe5 /mnt/internal_data btrfs users 0 0
sudo snap install mpv
find /path/to/search -type d \( -iname "*elfeed*" -o -iname ".*elfeed*" \)
sudo rsync -avh /run/media/david/AmazonThumbDrive/reorganized_emails/
/home/david/Maildir/reorganized_emails/
ln -s /home/david/reorganized_emails /home/david/Maildir/reorganized_emails
awk '{for(i=1;i<=NF;i++){printf "%s%s",$i,(i%10==0? ".\n":" ")}}' input.txt >
output.txt
# https://photoqt.org/downpopupflatpak
# https://flathub.org/apps/org.photoqt.PhotoQt
flatpak install flathub org.photoqt.PhotoQt
# https://www.xnview.com/en/xnviewmp/
# https://flathub.org/apps/com.xnview.XnViewMP
flatpak update
sudo snap refresh
# iname is case insensitive (versus name)
find ~/ -iname "*vim*"
rsync -av --remove-source-files ~/Maildir/gmail/INBOX/
~/Maildir/reorganized_emails/
mv ~/Maildir/gmail/INBOX/* ~/Maildir/gmail/Trash/
mbsync -a
You can also update Ubuntu using the terminal.
Press CTRL+ALT+T to bring up a Terminal window (or click the terminal icon in the sidebar).
Type in:
sudo apt update
You will be prompted to enter your login password.
This will check for updates and tell you if there are any that need applying. To apply any updates, type:
sudo apt upgrade
Type Y, then press ENTER to confirm to finish the update process.
sudo apt update
sudo apt install python3.12-venv
sudo apt install python3.12-dev (I don't think I need this?)
python3.12 -m venv myenv
source myenv/bin/activate
deactivate
python -m ensurepip --upgrade
pip install pandas
wget -qO- https://omakub.org/install | bash
sudo apt install gnutls-bin (not confident I need this)
sudo apt-get install meson libgmime-3.0-dev libxapian-dev
cd projects/
git clone https://github.com/djcb/mu.git
./autogen.sh && make
sudo make install
git clone -b main https://github.com/dharple/detox.git
autoreconf --install
./configure
make
sudo make install
man detox
emacs
pacman to install libgccjit and mailutils (gnu)
./autogen.sh
./configure --without-compress-install --with-native-compilation --with-mailutils
make
sudo make install
for python
use pacman to install python-virtualenv
pamac install base-devel
sudo pacman -S github-cli
gh auth
gh auth login
gh auth setup-git
gh auth status
sudo pacman -Syu
sudo pacman -S base-devel git texinfo
sudo apt update
sudo apt upgrade
sudo apt install python3-pip
mkdir Projects-Python
cd Projects-Python/
sudo apt install python3-venv
sudo apt install python3.12-pip
python3.12 -m venv myenv
source myenv/bin/activate
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade setuptools wheel
sudo snap install hello-world
hello-world
sudo apt-get install -s ffmpeg (to see what version would be
installed) -s does a simulated install without actually installing
anything
[david@arch_box_latest applications]$ ls -la
total 4
drwxr-xr-x 1 david david  46 Jul  8 00:55 .
drwxr-xr-x 1 david david 672 Jul  8 00:50 ..
-rw-r--r-- 1 david david 357 Jul  7 01:07 arch_box_latest.desktop
[david@arch_box_latest applications]$ pwd
/var/home/david/.local/share/applications
[david@arch_box_latest applications]$ mv /var/home/david/.local/share/applications/arch_box_latest.desktop /var/home/david/.local/share/applications/arch_box_latest.desktop.bak
[david@arch_box_latest applications]$ ls
arch_box_latest.desktop.bak
[david@arch_box_latest applications]$
I had to remove extra emacs shortcuts from the above folder that were not needed and did not work after manually installing emacs
I was not sure if I needed the one so I renamed it, but I probably do not need it.
git config --global core.editor "nvim"
git config --global --get core.editor (should return nvim)
sudo pacman -S tmux
sudo pacman -S lazygit

#+end_example
**** Trash-cli commands
- trash-put           trash files and directories.
- trash-empty         empty the trashcan(s).
- trash-list          list trashed files.
- trash-restore       restore a trashed file.
- trash-rm            remove individual files from the trashcan.
#+begin_example
  # add to .bashrc
  alias rm='echo "use trash-put or backslash rm to use rm normally"; false'
#+end_example
**** Other Random openSUSE Links
- [[https://en.opensuse.org/Additional_package_repositories]]
- [[https://www.techhut.tv/opensuse-5-things-you-must-do-after-installing/]]
*** Linux Distributions
We are lucky there are so many great distributions out there, here a few but
there are many more.
- [[https://fedoraproject.org/]]
- [[https://www.linuxmint.com/]]
- [[https://pop.system76.com/]]
- [[https://system76.com/]]
  - company sells computers with pop OS pre-installed
- [[https://ubuntu.com/]]
- [[https://manjaro.org/][https://Manjaro.org/]]
*** Apps
- Adobe DNG Converter (windows app run through emulation on wine)
  - [[https://helpx.adobe.com/camera-raw/using/adobe-dng-converter.html]]
  - [[https://helpx.adobe.com/camera-raw/digital-negative.html]]
  - [[https://www.adobe.com/creativecloud/file-types/image/raw/dng-file.html]]
- Alacritty terminal emulator
  - [[https://alacritty.org/]]
- Brave Browser
  - [[https://brave.com/linux/]]
- Emacs - installed from snap
  - [[https://snapcraft.io/emacs]]
- Espeak
  - installed from system package manager
- FD find entries on your file system
  - [[https://github.com/sharkdp/fd]]
  - installed from system package manager
- Handbrake
  - [[https://handbrake.fr/downloads.php]]
  - Flatpak - [[https://flathub.org/apps/fr.handbrake.ghb]]
- MEGA (online backup)
  - [[https://help.mega.io/installs-apps/desktop-syncing]]
    [[https://help.mega.io/installs-apps/desktop-syncing/linux]]
    [[https://mega.io/desktop#download]]
    [[https://mega.nz/linux/repo/]]
- Mbsync
  - installed from system package manager
  - called isync in package manager
- Microsoft Edge Browser
  - [[https://www.microsoft.com/en-us/edge/download?form=MA13FJ]]
- Neovim
  - [[https://github.com/neovim/neovim/blob/master/INSTALL.md]]
- Newsboat
  - installed from snap - [[https://snapcraft.io/newsboat]]
- Opera Browser
  - [[https://www.opera.com/download]]
  - RPM is hidden further down on page or can be installed from snap
  - [[https://snapcraft.io/opera]]
- Pandoc
  - [[https://pandoc.org/installing.html]]
  - installed from system package manager
- Ripgrep (rg)
  - Has some similarities to grep, but also includes its own defaults and
    optimizations that make it behave slightly differently in some cases.
  - [[https://github.com/BurntSushi/ripgrep]]
  - installed from system package manager
- The Silver Searcher (ag)
  - Behavior and syntax are very close to GNU grep.
  - [[https://github.com/ggreer/the_silver_searcher]]
- Vivaldi Browser
  - [[https://vivaldi.com/download/]]
  -
    [[https://help.vivaldi.com/desktop/install-update/manual-setup-vivaldi-linux-repositories/]]
- Wine (windows emulation)
  - [[https://wiki.winehq.org/Download]]
*** Configurations and Tweaks
**** Alacritty
***** Main Configuration From Here
- https://www.josean.com/posts/how-to-setup-alacritty-terminal
mkdir -p ~/.config/alacritty
nvim alacritty.toml
git clone https://github.com/alacritty/alacritty-theme themes
curl https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/alacritty/themes/themes/coolnight.toml --output ~/.config/alacritty/themes/themes/coolnight.toml
***** Other Interesting Configurations
- [[https://github.com/Widkidone/AlacrittyToml/blob/main/alacritty.toml]]
- [[https://github.com/sabinpocris/alacritty.toml/blob/main/alacritty.toml]]
- [[https://github.com/scalarwaves/dotfiles/blob/main/alacritty/alacritty.toml]]
#+begin_src toml
import = [
    "~/.config/alacritty/themes/themes/coolnight.toml"
]

[env]
TERM = "xterm-256color"

[window]
padding.x = 10
padding.y = 10

decorations = "Buttonless"

opacity = 0.7
blur = true

option_as_alt = "Both"

[font]
normal.family = "FiraCode Nerd Font"

size = 12
#+end_src
** Text Editing Resources
*** Introduction Text
Text editing is incredibly valuable for programming, note taking, organizing and
reviewing written information. Here is a collection of thoughts and links I have
found to be valuable.

A lot of people on reddit and on forums ask if it is worth learning the vim
normal mode keybindings. This is a difficult question to answer since it depends
on your needs and workflows. I believe if you work in a text a certain amount of
time it is worth learning, but if you only do small amounts of time in a text
editor it may not be worth it. Here is a way to think about this, if you do
programming in a text editor more than a couple hours a week I would say it
could be worth learning. If you write notes or read a lot of text more than a
couple of hours a week then it may also be worth learning. However, please note
that folks who do not program are a little more mixed on whether it is worth the
time to learn and use, whereas programmers tend to find it worth the time to
learn. It is not just a productivity boost, it is also more engaging and fun as
you work through code or text. I would explore the other options for editing
besides the vim keybindings to see if you like one of the other approaches
better.

If you are a programmer I recommend trying and learning the basics of all three
major text editors which are Visual Studio Code, neovim (or original vim) and
emacs. If you are a writer there are specific setups (distributions) that you
can find for these tools that are targeted for that type of work. I mostly
program and take notes so that is how I focus on these tools. If you are a
programmer the Visual Studio Code with the add-on (extension) vscodevim provides
a setup that you can have up and running super fast that allow you to learn the
ways of vim but have all of the modern conveniences of a high end text editor
working right away. Make sure you go through all of the extensions settings and
turn on some of the plugins if you want to get familiar with them. They are not
all enabled by default. Emacs with vim emulation. Emacs has a robust platform
with tremendous built in functionality. Plus you can extend it with add-ons and
you can have custom functions you can easily add. OpenAI ChatGPT, Google Gemini
can generate custom functions you can add to your emacs configuration. Make sure
you add a unique prefix to any custom functions so you do not create any name
conflicts. If you do not like the vim keybindings Emacs has the most other
options available including variations of the vim keybindings and keybindings
that are completely different or can be customized to suite your needs. The only
slight downside if you go these routes is that they are only readily available
for emacs, but luckily emacs can be infinitely customized and extended.

Examples of other keybinding options: First a quick note on the vanilla Emacs
keybindings. I have spent time learning them and they are really hard on your
hands. The only way you can sort of mitigate that issue is by having a custom
keyboard where you can reprogram the buttons so you do not put strain on your
pinky. God mode and devil mode can also solve the hand fatigue problem. Yes,
emacs pinky is actually a problem and hand fatigue in general. If you do want to
learn the vanilla keybindings they are very logical once you get used to them
and they pair well with either god mode or devil mode.

Xah Fly Keys is the most efficient system for programmers, but only readily
available for Emacs. I would only consider learning Xah Fly Keys if you program
more than 70% of your time and you are ok being locked into emacs. Below are
links to YouTube videos, you have to watch multiple videos to see the real
benefit of this system. Here is a great article about the pros and cons of this
approach: https://www.deusinmachina.net/p/modal-editing-with-emacs-using-xah

Boon is a well thought out system, again only for emacs. I like some of the
thoughts and layouts that are in the system. It is clearly a smart design. The
only problem with it is even though it is easy to learn I do not feel like
learning it gives you the boost that most people are looking for in their
workflow. It is still nice and straightforward and well designed. Still worth
looking at, but I think most people would be happier with vim or if you are all
in on emacs Xah Fly Keys.

Meow is a variation on the vim keybindings. The only problem I have with that is
if I switch between Meow and standard vim it is too confusing to my brain
because they are so similar. It is almost easier to keep two different systems
distinguished in your brain if they are totally different. A lot of people
really like Meow and it is really easy to make adjustments to the setup of it. I
would say if you are leaving vim and not going to go back you might really enjoy
the improvements that Meow makes.

Wakib: Emacs for the rest of us. This is both a minor mode and a starter kit.
This is incredibly well thought out. I like the keyboard layout it is very
logical and similar to some of the other systems mentioned above. This feels
very well polished with the starter kit giving you a lot of functionality right
away. This gives you the benefit of cut, copy, paste in the same way as other
apps it also has a robust starter kit. You can use the starter kit or the
keybindings independently. I used this for a little while, but I went back to
vim keybindings.

**** Links
- [[https://www.youtube.com/watch?v=rK51Lp_lreI][Intro to Wakib, an Emacs Starter Kit]]
- [[https://github.com/darkstego/wakib-emacs]]
- [[https://github.com/darkstego/wakib-keys]]
- [[https://ergoemacs.github.io/]]
- [[https://github.com/xahlee/xah-fly-keys]]
- [[https://www.youtube.com/watch?v=-iDJV2GPjEY][The Most Efficient Emacs Workflow, more efficient than vim]]
- [[https://www.youtube.com/watch?v=deg74diF_2Q&t=1445s][Xah Talk Show 2023-10-25 Xah Fly Keys, Bill Gosper Equations, Game of Life]]
- [[https://www.youtube.com/watch?v=TXKlr67qSlc&t=14s][Xah Talk Show Ep532 What Happens When You Blog for 25 Years]]
- [[https://www.youtube.com/watch?v=giwqQY1inn0][intro to svalboard datahand, best input device]]
- [[https://www.youtube.com/watch?v=KZA6tojsGfU][Xah Talk Show Ep541, emacs org-mode key, WolframLang tiling, plane curves,
  math]]
- [[https://www.youtube.com/watch?v=ypjsgrpG1r4][xah emacs talk show 2019-01-07 xah-html-mode vs org mode]]
- [[https://www.youtube.com/watch?v=-vQ56wu30Lg][emacs xah fly keys intro]]
- [[https://github.com/emacsorphanage/god-mode]]
- [[https://github.com/jyp/boon]]
- [[https://github.com/susam/devil]]
- [[https://www.youtube.com/watch?v=MPSkyfOp5H8][Emacs Packages for Modal Editing - System Crafters Live!]]
- [[https://systemcrafters.net/live-streams/april-21-2023/]]
Emacs can read written text out loud in audio format text-to-speech. It has a
robotic voice, but I actually prefer that when I am trying to study or review
certain kinds of information.

You can take a video and extract the audio and then transcribe it with a paid
service like this one [[https://turboscribe][https://turboscribe.ai]]. Then you can read it or have Emacs
perform text-to-speech. This allows you to review the information at different
speeds. It allows a more consistent pace to be possible. It allows for searching
through information.

Emacs has a built in web browser, it is handy if you have a text heavy document
that you want open side by side with a place to take notes in emacs. It does not
replace full featured web browsers, but is still helpful for reference document
review.

Neovim and Emacs both have distributions. A lot of people tell you to build your
own configuration. It can take a long time to really understand how to setup
your own configuration to best optimize your workflows. I like how the
distributions usually offer keybindings decided on with a logical layout. It is
helpful to build your own config because you learn so much.
-
  [[https://gitlab.com/public-repositories/emacs-groundup/-/blob/main/src/docs/emacs-groundup.org]]
*** Learning The Vim Keybindings - Video Game For Vim Keybindings
- [[https://vim-adventures.com/]]
I highly recommend playing this game. I have to confess that I find the game
frustrating, but it helps you learn, so I feel it is worth the trouble of
playing the game and paying for it. As long as you know you want to build vim
skills, then it is worth the trouble to play the game in my opinion. You can
play the game a little while for free, after that you have to pay. At first I
was not willing to pay for it, but I decided to just do it anyway and I am
really glad I did. It forces you to learn the vim motions in a different context
and makes you more effective in text editing contexts.

The reason why I find the game frustrating is the author does not give you
enough information for you to know what you are supposed to do. He does this on
purpose to challenge you, but I wish he added more of a hint system in the game
to give you a bit more information to work with, but please do not let this
detour you from working through the challenges.

I recommend you play the game and struggle as much as possible before trying to
find any answers online.

I have some mental/brain challenges with working through a game like this, so I
know others may also experience challenges where it may be very difficult for
you to figure out what to do in the game.

First take a break and try the problem again. Look at the motions available to
you and think about creative ways to use them.

Instead of looking up an answer you can also email the author for a hint. He
tries not to give you the answer but prefers just to give you a hint so you can
try to figure it out.
- [[https://github.com/pepers/vim-adventures]]
This has answers in text form from Level 8 to the Last Level of the main story
line. This does not cover the Macro puzzles. There are some small mistakes in
the document, but it is mostly correct.
**** Videos From Vomikod
Playlist
-
  [[https://youtube.com/playlist?list=PLl3Gy8rm8g9THKPnmbegeeiu0NvmbLg-V&si=Kc9uqQXNbWAoJTA7]]
Plays through levels 1 -- Last Level, videos are not in English -- there is at
least one puzzle that had a small change implemented since he recorded these
videos, but it is mostly accurate to the current game. The game authors YouTube
Channel:
- [[https://www.youtube.com/@DoronLinder/videos][https://www.youtube.com/@DoronLinder/videos]]
Videos of note:
- Video Explaining the Game
- Level 1 -- How to cross the ocean information
- Explains Level 5 where is the hidden key
**** File Formats For Note Taking
Org, AsciiDoc and Markdown are a few examples of popular formats for taking
notes. There are more choices out there then these options. You can use plain
text documents (txt) if you just want to copy and paste a bunch of information
into a file that you can search or grep later to find. If you are organizing
information that you are going share with others or need the document to be more
structured for your own reference then org and Markdown formats are worth
learning and using. If you need highly structured control over formatting above
what AsciiDoc, Markdown and Org can provide then look into LaTeX. Note you can
use a tool called Pandoc to convert these formats to other formats. So you do
not need to go to the LaTeX level which is very involved unless you need very
specific formatting for PDFs or print.
***** Short Videos Note Taking
****** Is Neovim The Ultimate Note Taking Tool?
- [[https://www.youtube.com/watch?v=vdBkQ4jT2OE]]
Org style notation that can be exported to other formats Author has transitioned
to this system instead now (I like the simpler approach above, but this does
offer more):
- [[https://www.youtube.com/watch?v=5ht8NYkU9wQ&t=5s]]
***** Long Videos Note Taking
- [[https://www.youtube.com/@mischavandenburg/videos][https://www.youtube.com/@mischavandenburg/videos]]
****** Videos Of Interest
- FULL NEOVIM Configuration Walkthrough As A DevOps Engineer On MacOS
- Ultimate Notetaking: My Neovim Zettelkasten Based on Obsidian - Complete
  Walkthrough
- My Entire Neovim + Tmux Workflow As A DevOps Engineer On MacOS
I like the style and approach of how he uses Markdown and his workflows. When
you install neovim it is bare bones, so you can add distribution layer on top of
the base that makes it easy to use and awesome right away, you can still
customize it further to meet your needs but it gives you a good out of the box
experience.
*** Neovim Distributions
- [[https://www.lazyvim.org/]]
- [[https://nvchad.com/]]
funny video about note taking if you jump to 14:43 his explanation of emacs and
21:20 for neovim or watch the whole thing for entertainment and additional
context:
- [[https://www.youtube.com/watch?v=XRpHIa-2XCE]]
Popular series on doom Emacs:
- [[https://www.youtube.com/@DistroTube/videos][https://www.youtube.com/@DistroTube/videos]]
Japanese app author shares his neovim setups, his app is a note taking app, very
inspirational:
- [[https://www.youtube.com/@devaslife/videos][https://www.youtube.com/@devaslife/videos]]
*** The Primeagen Related Links - Michael Paulson
- [[https://youtube.com/@ThePrimeagen/videos]]
- [[https://www.youtube.com/@ThePrimeTimeagen/videos][https://www.youtube.com/@ThePrimeTimeagen/videos]]
- [[https://www.youtube.com/@TheVimeagen/videos][https://www.youtube.com/@TheVimeagen/videos]]
- [[https://www.twitch.tv/theprimeagen]]
- [[https://kinesis-ergo.com/prime360/][Discount Codes on Kinesis Official Website - they have many types of keyboards
  so make sure you look through all of the options.]]
- [[https://twitter.com/ThePrimeagen]]
- [[https://www.instagram.com/ThePrimeagen/]]
- [[https://www.tiktok.com/@theprimeagen][https://www.tiktok.com/@theprimeagen]]
- [[https://discord.gg/ThePrimeagen]]
- [[https://linktr.ee/ThePrimeagen]]
- [[https://github.com/ThePrimeagen]]
- [[https://github.com/ThePrimeagen?tab=repositories]]
- [[https://github.com/ThePrimeagen/ThePrimeagen]]
- [[https://github.com/ThePrimeagen/yt]]
- [[https://frontendmasters.com/courses/vim-fundamentals/]]
- [[https://frontendmasters.com/teachers/the-primeagen/]]
- [[https://github.com/hakluke/how-to-exit-vim][How to exit vim - just a silly lol article - if you do need to quit ESC :q!
  (quit do not save changes) or ESC :wq (write/save your changes and quit)]]
- [[https://www.youtube.com/watch?v=ZRnWmNdf5IE][From Vim To Zed]]
- [[https://www.boot.dev/?promo=PRIME][Boot.dev - Learn Backend Development the Smart Way - Primeagen Discount Link]]
*** Emacs M-x Commands I randomly use
- auto-fill-mode - automatically inserts line lines at specified line width
- avy-copy-line
- avy-move-line
- buffer-menu
- capitalize-word
- check-parens
- dired
- display-fill-column-indicator-mode - shows vertical bar on the number of
  characters you have set for fill-column value
- eshell
- flush-lines (with parameter ^$) - deletes blank lines in highlighted region
- greader-mode
- ibuffer
- list-command-history (shows minibuffer history)
- manual-entry (shows manual page inside of emacs)
- narrow-to-region (widen to re-expand - this allows you to just work on a small
  part of your file without accidentally messing up something off screen)
- olivetti-mode
- org-insert-link
- org-lint
- org-mark-subtree
- org-narrow-to-block
- org-narrow-to-element
- org-narrow-to-subtree
- org-open-at-point - opens a link under the point (cursor) when on a link in
  org mode
- org-sort
- org-sort-list
- org-toggle-narrow-to-subtree
- query-replace-regexp
- set-variable (fill-column for location of text width to adjust to 80
  characters or whatever)
- sort-columns
- sort-fields
- sort-lines
- sort-numeric-fields
- sort-paragraphs
- treemacs-edit-workspaces
- turn-off-evil-mode
- turn-on-evil-mode
- visual-line-mode
- wakib-keys
- whitespace-cleanup
- whitespace-mode
- yank-from-kill-ring
*** Greader Notes
First you have to install espeak on your system. Then install greader.
**** My Greader Workflow In Detail
Open Emacs then open the text file I want to have read to me with the robotic
voice. Note the reading speed of the robot is set in your Emacs configuration
file with variable: ~(setq greader-espeak-rate 300)~. You vary the number to
whatever suites your preferred speaking pace. I would keep in mind that since it
is reading text it is not perfectly comparable to the rate that people talk or
what speed you would normally read. So just try different speeds until you find
what works best for you.

A customization I like to use it to toggle olivetti-mode (or some other zen type
mode) before reading. =M-x= type =greader-mode ENTER=. To have it start reading
you do =C-r SPACE= and to have it stop you do =SPACE=.
** Newsboat Configuration and My Youtube Playlist Watch list
*** config file
#+begin_example
  browser "xdg-open '%u'
#+end_example
*** urls
#+begin_example
"query:Unread Articles:unread = \"yes\""
"query:Read Articles:unread = \"no\""
"https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg" ;DistroTube
#+end_example
** FAQs
*** Which text editor do you recommend the most?
Emacs. It offers the most customization, flexibility, add-ons/plugins...
basically an incredible ecosystem. The wide variety of tools can help in many
areas, for example:
- You can set a text to speech to read to you.
- You can use a variety of terminals.
- You can edit text using any methodology you want including vim keybindings.
- You can navigate your file system using dired
- You can optimize your workflows by having more tasks inside of Emacs.
- You have full org mode support for text tasks which then can be exported to a
  myriad of formats.
*** Which text format do you recommend the most?
The org format from Emacs org mode. It is a more consistent implementation
compared to Markdown. Although Markdown is not really that bad, Emacs has a
robust Markdown mode if you do need that format. You can also convert from org
documents to Markdown using Pandoc. Org mode can seem a little overwhelming at
first because it can do so much. However, learning the basics can allow you to
do the same things that Markdown allows but have the flexibility to expand what
you use it for if needed. Look at Orgdown if you want a simpler starting point
then full org mode. Another interesting feature is you can use code blocks and
then tangle them to export the code blocks to a separate file. This is called
literate programming allows you to create one file and then have different
exports for documentation and for code. You only have to maintain one file, but
you create whatever exports you need. Another option of note is AsciiDoc which
has better formatting than Markdown and can be converted using Pandoc to lots of
formats as well. It seems to be popular for technical publishing, including but
not limited to producing actual technical books, README files, man pages,
articles and taking notes.
*** Which system do you recommend learning for emacs keybindings between evil,
vanilla emacs, xah fly keys, boon, meow, wakib?
My answer on this question has changed multiple times. Many people were shocked
when the great YouTuber David Wilson of System Crafters channel switched from
evil back to vanilla Emacs keybindings. His reasoning was then he does not have
to context switch as much and there is more consistency as he moves around to
different parts of Emacs. It also allows him to use plain Emacs with efficiency
without having to worry about getting evil mode installed to complete basic
tasks. I do agree with this logic. You can always add god or devil mode to
translate the normal Emacs keybindings without as much hand strain. Then you can
also learn from books more easily since you are using the default keybindings
and not a custom setup. If you want to be able to use the same keybindings in
multiple programs then you would be either learning some of the vim ways as that
is the only one that spans emacs, neovim and vscode as an option. I do not have
a perfect answer to this problem, I wish I did. I like switching editors and
learning different systems. My usual workflow is to use vim keybindings but to
have a quick toggle to turn them off for vanilla Emacs keybindings depending on
what I am doing. Then if I want to use neovim for something specific it is
easier to use that tool in place of Emacs.
** Additional Links
- TMUX: [[https://www.youtube.com/watch?v=U-omALWIBos][How I Use Tmux With Neovim For An Awesome Dev Workflow On My Mac]]
- TMUX: https://github.com/josean-dev/dev-environment-files
- TMUX: https://www.josean.com/posts/tmux-setup
- TMUX: https://github.com/dreamsofcode-io/tmux/blob/main/tmux.conf
- TMUX: https://www.youtube.com/watch?v=DzNmUNvnB04
- https://unifreak.github.io/ref/ref-emacs
- https://asciidoc.org/
- https://powerman.name/doc/asciidoc
- https://pandoc.org/
- Vim/Neovim: [[https://github.com/YanivZalach/Vim_Config_NO_PLUGINS]]
- Vim/Neovim: [[https://github.com/YanivZalach/Vim_Config]]
- Neovim: [[https://github.com/YanivZalach/Nvim_Config]]
- Emacs: [[https://github.com/doomemacs/doomemacs]]
- Emacs: [[https://github.com/corgi-emacs/corgi]]
- Markdown: [[https://www.markdownguide.org/]]
- Org Mode: [[https://orgmode.org/]]
- LaTeX (if you need precise formatting control): [[https://www.latex-project.org/]]
- Github Markdown: [[https://docs.github.com/en/get-started/writing-on-github]]
- Markdown Cheat Sheet:
  [[https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet]]
- Markdown Here: [[https://github.com/adam-p/markdown-here]]
- Emacs: [[https://distro.tube/]]
- Emacs: [[https://emacsconf.org/2023/talks/]]
- Emacs: [[https://emacs.stackexchange.com/]]
- Emacs: [[https://github.com/daviwil/dotfiles/]]
- Emacs: [[https://github.com/daviwil/emacs-from-scratch]]
- Emacs: [[https://github.com/Gavinok/emacs.d]]
- Emacs: [[https://github.com/susam/dotfiles]]
- Emacs: [[https://github.com/susam/emfy]]
- Emacs: [[https://github.com/SystemCrafters/crafted-emacs]]
- Emacs: [[https://gitlab.com/Clsmith1]]
- Emacs: [[https://gitlab.com/dwt1]]
- Emacs: [[https://gitlab.com/protesilaos/dotfiles]]
- Emacs: [[https://planet.emacslife.com/]]
- Emacs: [[https://protesilaos.com/]]
- Emacs: [[https://protesilaos.com/emacs/]]
- Emacs: [[https://protesilaos.com/emacs/iosevka-comfy-pictures]]
- Emacs: [[https://systemcrafters.net/emacs-from-scratch/]]
- Emacs: [[https://www.masteringemacs.org/]]
- Emacs: [[https://www.masteringemacs.org/book]]
- Font GNU Unifont on Wikipedia: [[https://en.wikipedia.org/wiki/GNU_Unifont]]
- Font Unifont Download: [[https://ftp.gnu.org/gnu/unifont/]]
- Font Unifont: [[http://unifoundry.com/unifont/index.html]]
- Font YouTube Video about Unifont: [[https://www.youtube.com/watch?v=ckrkW8VHRIs]]
- YouTube Channel: [[https://www.youtube.com/@bwestbro/videos][https://www.youtube.com/@bwestbro/videos]]
- YouTube Channel: [[https://www.youtube.com/@DistroTube/videos][https://www.youtube.com/@DistroTube/videos]]
- YouTube Channel: [[https://www.youtube.com/@linuxtechgeek/videos][https://www.youtube.com/@linuxtechgeek/videos]]
- YouTube Channel: [[https://www.youtube.com/@protesilaos/videos][https://www.youtube.com/@protesilaos/videos]]
- YouTube Channel: [[https://www.youtube.com/@SystemCrafters/videos][https://www.youtube.com/@SystemCrafters/videos]]
- YouTube Channel: [[https://www.youtube.com/@mzamansky/videos][https://www.youtube.com/@mzamansky/videos]]
- YouTube Channel: [[https://www.youtube.com/@abcdw/videos][https://www.youtube.com/@abcdw/videos]]
- YouTube Channel: [[https://www.youtube.com/@GavinFreeborn/videos][https://www.youtube.com/@GavinFreeborn/videos]]
- YouTube Channel: [[https://www.youtube.com/@emacselements/videos][https://www.youtube.com/@emacselements/videos]]
- Neovim: [[https://github.com/rvbug/neovim]]
- Neovim: [[https://github.com/NormalNvim/NormalNvim]]
- Neovim: [[https://github.com/rockerBOO/awesome-neovim]]
- Neovim: [[https://dotfyle.com/neovim/plugins/top?categories=preconfigured]]
- Vim: [[https://github.com/ibhagwan/vim-cheatsheet]]
- Vim: [[https://github.com/vbd/Fieldnotes/blob/main/vim.md]]
- Emacs:
  [[http://yummymelon.com/devnull/announcing-casual-an-opinionated-porcelain-for-emacs-calc.html]]
- Emacs: [[https://xenodium.com/my-emacs-eye-candy/]]
- Emacs: [[https://github.com/xenodium/dotsies]]
- Neovim: [[https://github.com/itsvinayak/TurboNvimConfig.nvim]]
- Vim/Neovim: [[https://www.youtube.com/watch?v=5BU2gBOe9RU][YouTube Video: Vim
  Tips I Wish I Knew Earlier by Sebastian Daschner]]
- Neovim: [[https://www.youtube.com/watch?v=6pAG3BHurdM][YouTube Video: How I
  Setup Neovim On My Mac To Make It AMAZING In 2024 by Josean Martinez]]
- [[https://github.com/trishume/dotfiles]]
- [[https://github.com/trishume]]
- [[https://elpa.gnu.org/packages/greader.html]]
- [[https://github.com/emacs-straight/greader]]
- [[https://github.com/emacs-straight]]
- [[https://espeak.sourceforge.net/]]
- [[https://github.com/espeak-ng/espeak-ng]]
- [[https://github.com/thinkhuman/writingwithemacs]]
- [[https://www.gnu.org/manual/manual.html][GNU Manuals Online]]
- [[https://www.gnu.org/doc/doc.html][Documentation of the GNU Project]]
- [[https://www.gnu.org/software/emacs/documentation.html][GNU Emacs Documentation & Support]]
- [[https://www.gnu.org/software/emacs/manual/index.html][GNU Emacs Manuals Online]]
- [[https://www.gnu.org/software/emacs/refcards/index.html][GNU Emacs Reference Cards]]
- [[https://www.gnu.org/doc/other-free-books.html][Free Books from Other Publishers]]
-
   [[https://github.com/SilverSnake0/File-Automated-Assistant-Mover][SilverSnake0/File-Automated-Assistant-Mover
   Excellent Python Toolkit for Organizing and Searching Files - You can run it
   on a folder and it will sort all of the loose files into file type sub folders
   and it will not mess with your existing subfolders - it also has tools for
   searching and finding through sets of files uses python 3]]
- [[https://www.youtube.com/@cantucodes/videos][Cantu Codes - Weekly Neovim Plugin Series]]
- [[https://github.com/alextricity25/nvim_weekly_plugin_configs][Alex Cantu Github for Code from the Weekly Neovim Plugin Series]]
- [[https://www.youtube.com/watch?v=jgogUgeuBPo][goparism youtube channel video: Where To Learn Emacs in 2024]]
- [[https://www.youtube.com/@goparism/videos][goparism youtube channel]]
- [[https://francopasut.netlify.app/post/markdown-vim-emacs-sublime-vscode/][Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code - Franco Pasut]]
- [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Article Org Mode
  Syntax Is One of the Most Reasonable Markup Languages to Use for Text]]
- [[https://missing.csail.mit.edu/2020/editors/]]
- [[https://www.youtube.com/watch?v=aiBt8CieE7U][Gavin Freeborn - Double Your Productivity With Emacs Org-Mode]]
- [[https://www.youtube.com/watch?v=DEeStDz_imQ][Gavin Freeborn - 5 Reasons I Love Emacs Orgmode]]
- [[https://www.youtube.com/watch?v=0-brF21ShRk][Gavin Freeborn - You Should Really Learn Org Mode - It's Easy]]
- [[https://protesilaos.com/codelog/2024-04-24-re-what-keeps-you-emacs/][Protesilaos Stavrou - Re: what keeps you coming back to Emacs?]]
- [[https://protesilaos.com/commentary/2024-04-10-joy-of-writing/][Protesilaos Stavrou - The joy of writing]]
- [[https://www.youtube.com/watch?v=-ybCiHPWKNA][TheVimeagen - Teaching Neovim From Scratch To A Noob]]
- [[https://gitlab.com/publicvoit/orgdown/-/blob/master/README.org][https://gitlab.com/publicvoit/orgdown/-/blob/master/README.org]]
  - Orgdown (in short “OD) is a lightweight markup language similar to Markdown
    but it’s consistent, easy to learn, simple to type even without
    tool-support, and it is based on its older brother: Org-mode
  - The purpose of this site is to provide basic information on the Orgdown
    syntax, supported software programs, mobile apps, services, and parsers.
- [[https://www.youtube.com/watch?v=mmqDYw9C30I][Josean Martinez - 7 Amazing CLI Tools You Need To Try]]
- [[https://www.youtube.com/watch?v=uOnL4fEnldA][Josean Martinez - How To Make
  Your Boring macOS Terminal Amazing With Alacritty (some of the tips apply to
  linux Alacritty use as well)]]
- https://github.com/james-stoup/org-mode-better-defaults
- https://github.com/james-stoup/emacs-org-mode-tutorial/
- https://orgmode.org/quickstart.html
- https://karl-voit.at/2021/07/23/emacs-lock-in/
- https://lazyvim-ambitious-devs.phillips.codes/ - LazyVim for Ambitious Developers (LazyVim Distribution for neovim free e-book)
- https://omakub.org/ - An Omakase Developer Setup for Ubuntu 24.04 by DHH (eza, fzf, rg, zoxide, and bg)
  - quote from above site: Use the six default workspaces for apps (hotkeys:
    Super+1/2/3/…), preferably full-screen ones on laptop displays (hotkey:
    F11), or tiled neatly using Tactile (hotkey: Super+T). Speed of motion is
    also why all the transition animations have been nerfed. And start any app
    in the dock (hotkey: Super) based on it’s position (hotkey: Alt+1/2/3/4). So
    browser is just Alt+1, Terminal Alt+2, etc. Additionally, Ulauncher provides
    an app launcher ala Raycast, which you trigger with Super+Space. And you can
    quickly enter emojis with the compose key (which is mapped to Caps Lock) m
    and then a single letter representing the emoji. Run omakub, pick hotkeys,
    and there you can see it all.

** Additional Configuration File Notes
*** kitty kitty.conf current-theme.conf
#+begin_example
# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

# font_family      monospace
# bold_font        auto
# italic_font      auto
# bold_italic_font auto

font_family      FiraCode Nerd Font
bold_font        auto
italic_font      auto
bold_italic_font auto

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: +list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

# font_size 11.0
font_size 12.0

#: Font size (in pts).

# force_ltr no

#: kitty does not support BIDI (bidirectional text), however, for RTL
#: scripts, words are automatically displayed in RTL. That is to say,
#: in an RTL script, the words "HELLO WORLD" display in kitty as
#: "WORLD HELLO", and if you try to select a substring of an RTL-
#: shaped string, you will get the character that would be there had
#: the string been LTR. For example, assuming the Hebrew word ירושלים,
#: selecting the character that on the screen appears to be ם actually
#: writes into the selection buffer the character י. kitty's default
#: behavior is useful in conjunction with a filter to reverse the word
#: order, however, if you wish to manipulate RTL glyphs, it can be
#: very challenging to work with, so this option is provided to turn
#: it off. Furthermore, this option can be used with the command line
#: program GNU FriBidi <https://github.com/fribidi/fribidi#executable>
#: to get BIDI support, because it will force kitty to always treat
#: the text as LTR, which FriBidi expects for terminals.

# symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#: The syntax is::

#:     symbol_map codepoints Font Family Name

# narrow_symbols

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1

#: Usually, for Private Use Unicode characters and some symbol/dingbat
#: characters, if the character is followed by one or more spaces,
#: kitty will use those extra cells to render the character larger, if
#: the character in the font has a wide aspect ratio. Using this
#: option you can force kitty to restrict the specified code points to
#: render in the specified number of cells (defaulting to one cell).
#: This option can be specified multiple times. The syntax is::

#:     narrow_symbols codepoints [optionally the number of cells]

# disable_ligatures never

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them. You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features option.

# font_features

#: E.g. font_features none

#: Choose exactly which OpenType features to enable or disable. This
#: is useful as some fonts might have features worthwhile in a
#: terminal. For example, Fira Code includes a discretionary feature,
#: zero, which in that font changes the appearance of the zero (0), to
#: make it more easily distinguishable from Ø. Fira Code also includes
#: other discretionary features known as Stylistic Sets which have the
#: tags ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: HarfBuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, font features are first read from the FontConfig database
#: and then this option is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use `kitty +list-fonts
#: --psnames`:

#: .. code-block:: sh

#:     $ kitty +list-fonts --psnames | grep Fira
#:     Fira Code
#:     Fira Code Bold (FiraCode-Bold)
#:     Fira Code Light (FiraCode-Light)
#:     Fira Code Medium (FiraCode-Medium)
#:     Fira Code Regular (FiraCode-Regular)
#:     Fira Code Retina (FiraCode-Retina)

#: The part in brackets is the PostScript name.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero in the bold font::

#:     font_features FiraCode-Bold +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

# modify_font

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.

# box_drawing_scale 0.001, 1, 1.5, 2

#: The sizes of the lines used for the box drawing Unicode characters.
#: These values are in pts. They will be scaled by the monitor DPI to
#: arrive at a pixel value. There must be four values corresponding to
#: thin, normal, thick, and very thick lines.

# undercurl_style thin-sparse

#: The style with which undercurls are rendered. This option takes the
#: form (thin|thick)-(sparse|dense). Thin and thick control the
#: thickness of the undercurl. Sparse and dense control how often the
#: curl oscillates. With sparse the curl will peak once per character,
#: with dense twice.

# text_composition_strategy platform

#: Control how kitty composites text glyphs onto the background color.
#: The default value of platform tries for text rendering as close to
#: "native" for the platform kitty is running on as possible.

#: A value of legacy uses the old (pre kitty 0.28) strategy for how
#: glyphs are composited. This will make dark text on light
#: backgrounds look thicker and light text on dark backgrounds
#: thinner. It might also make some text appear like the strokes are
#: uneven.

#: You can fine tune the actual contrast curve used for glyph
#: composition by specifying up to two space-separated numbers for
#: this setting.

#: The first number is the gamma adjustment, which controls the
#: thickness of dark text on light backgrounds. Increasing the value
#: will make text appear thicker. The default value for this is 1.0 on
#: Linux and 1.7 on macOS. Valid values are 0.01 and above. The result
#: is scaled based on the luminance difference between the background
#: and the foreground. Dark text on light backgrounds receives the
#: full impact of the curve while light text on dark backgrounds is
#: affected very little.

#: The second number is an additional multiplicative contrast. It is
#: percentage ranging from 0 to 100. The default value is 0 on Linux
#: and 30 on macOS.

#: If you wish to achieve similar looking thickness in light and dark
#: themes, a good way to experiment is start by setting the value to
#: 1.0 0 and use a dark theme. Then adjust the second parameter until
#: it looks good. Then switch to a light theme and adjust the first
#: parameter until the perceived thickness matches the dark theme.

# text_fg_override_threshold 0

#: The minimum accepted difference in luminance between the foreground
#: and background color, below which kitty will override the
#: foreground color. It is percentage ranging from 0 to 100. If the
#: difference in luminance of the foreground and background is below
#: this threshold, the foreground color will be set to white if the
#: background is dark or black if the background is light. The default
#: value is 0, which means no overriding is performed. Useful when
#: working with applications that use colors that do not contrast well
#: with your preferred color scheme.

#: WARNING: Some programs use characters (such as block characters)
#: for graphics display and may expect to be able to set the
#: foreground and background to the same color (or similar colors).
#: If you see unexpected stripes, dots, lines, incorrect color, no
#: color where you expect color, or any kind of graphic display
#: problem try setting text_fg_override_threshold to 0 to see if this
#: is the cause of the problem.

#: }}}

#: Cursor customization {{{

# cursor #cccccc

#: Default cursor color. If set to the special value none the cursor
#: will be rendered with a "reverse video" effect. Its color will be
#: the color of the text in the cell it is over and the text will be
#: rendered with the background color of the cell. Note that if the
#: program running in the terminal sets a cursor color, this takes
#: precedence. Also, the cursor colors are modified if the cell
#: background and foreground colors have very low contrast. Note that
#: some themes set this value, so if you want to override it, place
#: your value after the lines where the theme file is included.

# cursor_text_color #111111

#: The color of text under the cursor. If you want it rendered with
#: the background color of the cell underneath instead, use the
#: special keyword: `background`. Note that if cursor is set to none
#: then this option is ignored. Note that some themes set this value,
#: so if you want to override it, place your value after the lines
#: where the theme file is included.

# cursor_shape block

#: The cursor shape can be one of block, beam, underline. Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape, applications running in the terminal
#: can override it. In particular, shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.

# cursor_shape_unfocused hollow

#: Defines the text cursor shape when the OS window is not focused.
#: The unfocused cursor shape can be one of block, beam, underline,
#: hollow.

# cursor_beam_thickness 1.5

#: The thickness of the beam cursor (in pts).

# cursor_underline_thickness 2.0

#: The thickness of the underline cursor (in pts).

# cursor_blink_interval -1

cursor_blink_interval 0

#: The interval to blink the cursor (in seconds). Set to zero to
#: disable blinking. Negative values mean use system default. Note
#: that the minimum interval will be limited to repaint_delay.

# cursor_stop_blinking_after 15.0

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity. Set to zero to never stop blinking.

#: }}}

#: Scrollback {{{

# scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_indicator_opacity 1.0

#: The opacity of the scrollback indicator which is a small colored
#: rectangle that moves along the right hand side of the window as you
#: scroll, indicating what fraction you have scrolled. The default is
#: one which means fully opaque, aka visible. Set to a value between
#: zero and one to make the indicator less visible.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

# scrollback_pager_history_size 0

#: Separate scrollback history size (in MB), used only for browsing
#: the scrollback buffer with pager. This separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. The
#: current implementation stores the data in UTF-8, so approximately
#: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_fill_enlarged_window no

#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

# wheel_scroll_multiplier 5.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.

# touch_scroll_multiplier 1.0

#: Multiplier for the number of lines scrolled by a touchpad. Note
#: that this is only used for high precision scrolling devices on
#: platforms such as macOS and Wayland. Use negative numbers to change
#: scroll direction.

#: }}}

#: Mouse {{{

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

# url_color #0087bd
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed.

# open_url_with default

#: The program to open clicked URLs. The special value default will
#: first look for any URL handlers defined via the open_actions
#: <https://sw.kovidgoyal.net/kitty/open_actions/> facility and if non
#: are found, it will use the Operating System's default URL handler
#: (open on macOS and xdg-open on Linux).

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

# detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable. See also the
#: underline_hyperlinks option to control how hyperlinks (as opposed
#: to plain text URLs) are displayed.

# url_excluded_characters

#: Additional characters to be disallowed from URLs, when detecting
#: URLs under the mouse cursor. By default, all characters that are
#: legal in URLs are allowed. Additionally, newlines are allowed (but
#: stripped). This is to accommodate programs such as mutt that add
#: hard line breaks even for continued lines. \n can be added to this
#: option to disable this behavior. Special characters can be
#: specified using backslash escapes, to specify a backslash use a
#: double backslash.

# show_hyperlink_targets no

#: When the mouse hovers over a terminal hyperlink, show the actual
#: URL that will be activated when the hyperlink is clicked.

# underline_hyperlinks hover

#: Control how hyperlinks are underlined. They can either be
#: underlined on mouse hover, always (i.e. permanently underlined) or
#: never which means that kitty will not apply any underline styling
#: to hyperlinks. Uses the url_style and url_color settings for the
#: underline style. Note that reloading the config and changing this
#: value to/from always will only affect text subsequently received by
#: kitty.

# copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, selecting text with the mouse will cause the text to be
#: copied to clipboard. Useful on platforms such as macOS that do not
#: have the concept of primary selection. You can instead specify a
#: name such as a1 to copy to a private kitty buffer. Map a shortcut
#: with the paste_from_buffer action to paste from this private
#: buffer. For example::

#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# paste_actions quote-urls-at-prompt,confirm

#: A comma separated list of actions to take when pasting text into
#: the terminal. The supported paste actions are:

#: quote-urls-at-prompt:
#:     If the text being pasted is a URL and the cursor is at a shell prompt,
#:     automatically quote the URL (needs shell_integration).
#: replace-dangerous-control-codes
#:     Replace dangerous control codes from pasted text, without confirmation.
#: replace-newline
#:     Replace the newline character from pasted text, without confirmation.
#: confirm:
#:     Confirm the paste if the text to be pasted contains any terminal control codes
#:     as this can be dangerous, leading to code execution if the shell/program running
#:     in the terminal does not properly handle these.
#: confirm-if-large
#:     Confirm the paste if it is very large (larger than 16KB) as pasting
#:     large amounts of text into shells can be very slow.
#: filter:
#:     Run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. The text returned by the
#:     function will be actually pasted.
#: no-op:
#:     Has no effect.

# strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. A value of always will always do it.

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the Unicode database will be matched.

# select_by_word_characters_forward

#: Characters considered part of a word when extending the selection
#: forward on double clicking. In addition to these characters any
#: character that is marked as an alphanumeric character in the
#: Unicode database will be matched.

#: If empty (default) select_by_word_characters will be used for both
#: directions.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around. On macOS, this will also cause the OS Window under
#: the mouse to be focused automatically when the mouse enters it.

# pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse.

# default_pointer_shape beam

#: The default shape of the mouse pointer.

# pointer_shape_when_dragging beam

#: The default shape of the mouse pointer when dragging across text.

#: Mouse actions {{{

#: Mouse buttons can be mapped to perform arbitrary actions. The
#: syntax is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where button-name is one of left, middle, right, b1 ... b8 with
#: added keyboard modifiers. For example: ctrl+shift+left refers to
#: holding the Ctrl+Shift keys while clicking with the left mouse
#: button. The value b1 ... b8 can be used to refer to up to eight
#: buttons on a mouse.

#: event-type is one of press, release, doublepress, triplepress,
#: click, doubleclick. modes indicates whether the action is performed
#: when the mouse is grabbed by the program running in the terminal,
#: or not. The values are grabbed or ungrabbed or a comma separated
#: combination of them. grabbed refers to when the program running in
#: the terminal has requested mouse events. Note that the click and
#: double click events have a delay of click_interval to disambiguate
#: from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap a button, map it to nothing. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed

#: See all the mappable actions including mouse actions here
#: <https://sw.kovidgoyal.net/kitty/actions/>.

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: Remove all mouse action definitions up to this point. Useful, for
#: instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  Variant with Ctrl+Shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#::  Prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a URL.

#: Paste from the primary selection

# mouse_map middle release ungrabbed paste_from_selection

#: Start selecting text

# mouse_map left press ungrabbed mouse_selection normal

#: Start selecting text in a rectangle

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: Select a word

# mouse_map left doublepress ungrabbed mouse_selection word

#: Select a line

# mouse_map left triplepress ungrabbed mouse_selection line

#: Select line from point

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line. If you
#::  would like to select the word at the point and then extend to the
#::  rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#: Select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line even when
#::  grabbed. If you would like to select the word at the point and
#::  then extend to the rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: }}}

#: Performance tuning {{{

# repaint_delay 10

#: Delay between screen updates (in milliseconds). Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS, you have to
#: either set sync_to_monitor to no or use a monitor with a high
#: refresh rate. Also, to minimize latency when there is pending input
#: to be processed, this option is ignored.

# input_delay 3

#: Delay before input from the program running in the terminal is
#: processed (in milliseconds). Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.
#: This setting is ignored when the input buffer is almost full.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents screen tearing
#: <https://en.wikipedia.org/wiki/Screen_tearing> when scrolling.
#: However, it limits the rendering speed to the refresh rate of your
#: monitor. With a very high speed mouse/high keyboard repeat rate,
#: you may notice some slight input latency. If so, set this to no.

#: }}}

#: Terminal bell {{{

# enable_audio_bell yes

#: The audio bell. Useful to disable it in environments that require
#: silence.

# visual_bell_duration 0.0

#: The visual bell duration (in seconds). Flash the screen when a bell
#: occurs for the specified number of seconds. Set to zero to disable.

# visual_bell_color none

#: The color used by visual bell. Set to none will fall back to
#: selection background color. If you feel that the visual bell is too
#: bright, you can set it to a darker color.

# window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on Linux.

# bell_on_tab "🔔 "

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has a bell. If you want to use leading
#: or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

#: For backwards compatibility, values of yes, y and true are
#: converted to the default bell symbol and no, n, false and none are
#: converted to the empty string.

# command_on_bell none

#: Program to run when a bell occurs. The environment variable
#: KITTY_CHILD_CMDLINE can be used to get the program running in the
#: window in which the bell occurred.

# bell_path none

#: Path to a sound file to play as the bell sound. If set to none, the
#: system default bell sound is used. Must be in a format supported by
#: the operating systems sound API, such as WAV or OGA on Linux
#: (libcanberra) or AIFF, MP3 or WAV on macOS (NSSound).

# linux_bell_theme __custom

#: The XDG Sound Theme kitty will use to play the bell sound. Defaults
#: to the custom theme name used by GNOME and Budgie, falling back to
#: the default freedesktop theme if it does not exist. This option may
#: be removed if Linux ever provides desktop-agnostic support for
#: setting system sound themes.

#: }}}

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

#: If enabled, the OS Window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the OS Window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

# enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. The cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.

# window_border_width 0.5pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified, the unit is assumed
#: to be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

# draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: borders that separate the window from a neighbor are drawn. Note
#: that setting a non-zero window_margin_width overrides this and
#: causes all borders to be drawn.

# window_margin_width 0

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.

# single_window_margin_width -1

#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

# window_padding_width 0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

# single_window_padding_width -1

#: The window padding to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_padding_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

# placement_strategy center

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be
#: only at the bottom and right edges. The value can be one of: top-
#: left, top, top-right, left, center, right, bottom-left, bottom,
#: bottom-right.

# active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: The color for the border of inactive windows.

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred.

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# hide_window_decorations no

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only and titlebar-and-corners can be used
#: to only hide the titlebar and the rounded corners. Whether this
#: works and exactly what effect it has depends on the window
#: manager/operating system. Note that the effects of changing this
#: option when reloading config are undefined. When using titlebar-
#: only, it is useful to also set window_margin_width and
#: placement_strategy to prevent the rounded corners from clipping
#: text. Or use titlebar-and-corners.

# window_logo_path none

#: Path to a logo image. Must be in PNG format. Relative paths are
#: interpreted relative to the kitty config directory. The logo is
#: displayed in a corner of every kitty window. The position is
#: controlled by window_logo_position. Individual windows can be
#: configured to have different logos either using the launch action
#: or the remote control <https://sw.kovidgoyal.net/kitty/remote-
#: control/> facility.

# window_logo_position bottom-right

#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

# window_logo_alpha 0.5

#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.

# window_logo_scale 0

#: The percentage (0-100] of the window size to which the logo should
#: scale. Using a single number means the logo is scaled to that
#: percentage of the shortest window dimension, while preseving aspect
#: ratio of the logo image.

#: Using two numbers means the width and height of the logo are scaled
#: to the respective percentage of the window's width and height.

#: Using zero as the percentage disables scaling in that dimension. A
#: single zero (the default) disables all scaling of the window logo.

# resize_debounce_time 0.1 0.5

#: The time to wait (in seconds) before asking the program running in
#: kitty to resize and redraw the screen during a live resize of the
#: OS window, when no new resize events have been received, i.e. when
#: resizing is either paused or finished. On platforms such as macOS,
#: where the operating system sends events corresponding to the start
#: and end of a live resize, the second number is used for redraw-
#: after-pause since kitty can distinguish between a pause and end of
#: resizing. On such systems the first number is ignored and redraw is
#: immediate after end of resize. On other systems only the first
#: number is used so that kitty is "ready" quickly after the end of
#: resizing, while not also continuously redrawing, to save energy.

# resize_in_steps no

#: Resize the OS window in steps as large as the cells, instead of
#: with the usual pixel accuracy. Combined with initial_window_width
#: and initial_window_height in number of cells, this option can be
#: used to keep the margins as small as possible when resizing the OS
#: window. Note that this does not currently work on Wayland.

# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set 0-9A-Z\-=[];',./\\`. Specify your
#: preference as a string of characters.

# confirm_os_window_close -1

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: The edge to show the tab bar on, top or bottom.

# tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts).

# tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

# tab_bar_style fade

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create
#:     a mapping for the select_tab action which presents you with a list of
#:     tabs and allows for easy switching to a tab.

# tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

# tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown.

# tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_powerline_style angled

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

# tab_activity_symbol none

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

# tab_title_max_length 0

#: The maximum number of cells that can be used to render the text in
#: a tab. A value of zero means that no limit is applied.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.
#: keyboard_mode
#:     The name of the current keyboard mode <https://sw.kovidgoyal.net/kitty/mapping/#modal-mappings> or the empty string if no keyboard mode is active.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.

# active_tab_title_template none

#: Template to use for active tabs. If not specified falls back to
#: tab_title_template.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles.

# tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

# tab_bar_margin_color none

#: Color for the tab bar margin area. Defaults to using the terminal
#: background color for margins above and below the tab bar. For side
#: margins the default color is chosen to match the background color
#: of the neighboring tab.

#: }}}

#: Color scheme {{{

# foreground #dddddd
# background #000000

#: The foreground and background colors.

# background_opacity 1.0

#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. Be aware that using a value less than 1.0 is a (possibly
#: significant) performance hit. When using a low value for this
#: setting, it is desirable that you set the background color to a
#: color the matches the general color of the desktop background, for
#: best text rendering.  If you want to dynamically change
#: transparency of windows, set dynamic_background_opacity to yes
#: (this is off by default as it has a performance cost). Changing
#: this option when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.

# background_blur 0

#: Set to a positive value to enable background blur (blurring of the
#: visuals behind a transparent window) on platforms that support it.
#: Only takes effect when background_opacity is less than one. On
#: macOS, this will also control the blur radius (amount of blurring).
#: Setting it to too high a value will cause severe performance issues
#: and/or rendering artifacts. Usually, values up to 64 work well.
#: Note that this might cause performance issues, depending on how the
#: platform implements it, so use with care. Currently supported on
#: macOS and KDE.

# background_image none

#: Path to a background image. Must be in PNG format.

# background_image_layout tiled

#: Whether to tile, scale or clamp the background image. The value can
#: be one of tiled, mirror-tiled, scaled, clamped, centered or
#: cscaled. The scaled and cscaled values scale the image to the
#: window size, with cscaled preserving the image aspect ratio.

# background_image_linear no

#: When background image is scaled, whether linear interpolation
#: should be used.

# dynamic_background_opacity no

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: Changing this option by reloading the config is not supported.

# background_tint 0.0

#: How much to tint the background image by the background color. This
#: option makes it easier to read the text. Tinting is done using the
#: current background color for each window. This option applies only
#: if background_opacity is set and transparent windows are supported
#: or background_image is set.

# background_tint_gaps 1.0

#: How much to tint the background image at the window gaps by the
#: background color, after applying background_tint. Since this is
#: multiplicative with background_tint, it can be used to lighten the
#: tint over the window gaps for a *separated* look.

# dim_opacity 0.4

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000
# selection_background #fffacd

#: The foreground and background colors for text selected with the
#: mouse. Setting both of these to none will cause a "reverse video"
#: effect for selections, where the selection will be the cell text
#: color and the text will become the cell background color. Setting
#: only selection_foreground to none will cause the foreground color
#: to be used unchanged. Note that these colors can be overridden by
#: the program running in the terminal.

#: The color table {{{

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

# color0 #000000
# color8 #767676

#: black

# color1 #cc0403
# color9 #f2201f

#: red

# color2  #19cb00
# color10 #23fd00

#: green

# color3  #cecb00
# color11 #fffd00

#: yellow

# color4  #0d73cc
# color12 #1a8fff

#: blue

# color5  #cb1ed1
# color13 #fd28ff

#: magenta

# color6  #0dcdcd
# color14 #14ffff

#: cyan

# color7  #dddddd
# color15 #ffffff

#: white

# mark1_foreground black

#: Color for marks of type 1

# mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

# mark2_foreground black

#: Color for marks of type 2

# mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

# mark3_foreground black

#: Color for marks of type 3

# mark3_background #f274bc

#: Color for marks of type 3 (violet)

#: }}}

#: }}}

#: Advanced {{{

# shell .

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files. Environment
#: variables are expanded in this setting.

# editor .

#: The terminal based text editor (such as vim or nano) to use when
#: editing the kitty config file or similar tasks.

#: The default value of . means to use the environment variables
#: VISUAL and EDITOR in that order. If these variables aren't set,
#: kitty will run your shell ($SHELL -l -i -c env) to see if your
#: shell startup rc files set VISUAL or EDITOR. If that doesn't work,
#: kitty will cycle through various known editors (vim, emacs, etc.)
#: and take the first one that exists on your system.

# close_on_child_death no

#: Close the window when the child process (usually the shell) exits.
#: With the default value no, the terminal will remain open when the
#: child exits as long as there are still other processes outputting
#: to the terminal (for example disowned or backgrounded processes).
#: When enabled with yes, the window will close as soon as the child
#: process exits. Note that setting it to yes means that any
#: background processes still using the terminal can fail silently
#: because their stdout/stderr/stdin no longer work.

# remote_control_password

#: Allow other programs to control kitty using passwords. This option
#: can be specified multiple times to add multiple passwords. If no
#: passwords are present kitty will ask the user for permission if a
#: program tries to use remote control with a password. A password can
#: also *optionally* be associated with a set of allowed remote
#: control actions. For example::

#:     remote_control_password "my passphrase" get-colors set-colors focus-window focus-tab

#: Only the specified actions will be allowed when using this
#: password. Glob patterns can be used too, for example::

#:     remote_control_password "my passphrase" set-tab-* resize-*

#: To get a list of available actions, run::

#:     kitten @ --help

#: A set of actions to be allowed when no password is sent can be
#: specified by using an empty password. For example::

#:     remote_control_password "" *-colors

#: Finally, the path to a python module can be specified that provides
#: a function is_cmd_allowed that is used to check every remote
#: control command. For example::

#:     remote_control_password "my passphrase" my_rc_command_checker.py

#: Relative paths are resolved from the kitty configuration directory.
#: See rc_custom_auth <https://sw.kovidgoyal.net/kitty/remote-
#: control/#rc-custom-auth> for details.

# allow_remote_control no

#: Allow other programs to control kitty. If you turn this on, other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over SSH
#: connections. The default setting of no prevents any form of remote
#: control. The meaning of the various values are:

#: password
#:     Remote control requests received over both the TTY device and the socket
#:     are confirmed based on passwords, see remote_control_password.

#: socket-only
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are denied.
#:     See listen_on.

#: socket
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are confirmed based on
#:     password.

#: no
#:     Remote control is completely disabled.

#: yes
#:     Remote control requests are always accepted.

# listen_on none

#: Listen to the specified socket for remote control connections. Note
#: that this will apply to all kitty instances. It can be overridden
#: by the kitty --listen-on command line option. For UNIX sockets,
#: such as unix:${TEMP}/mykitty or unix:@mykitty (on Linux).
#: Environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. If {kitty_pid} is present,
#: then it is replaced by the PID of the kitty process, otherwise the
#: PID of the kitty process is appended to the value, with a hyphen.
#: For TCP sockets such as tcp:localhost:0 a random port is always
#: used even if a non-zero port number is specified.  See the help for
#: kitty --listen-on for more details. Note that this will be ignored
#: unless allow_remote_control is set to either: yes, socket or
#: socket-only. Changing this option by reloading the config is not
#: supported.

# env

#: Specify the environment variables to be set in all child processes.
#: Using the name with an equal sign (e.g. env VAR=) will set it to
#: the empty string. Specifying only the name (e.g. env VAR) will
#: remove the variable from the child process' environment. Note that
#: environment variables are expanded recursively, for example::

#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b

#: The value of VAR2 will be <path to home directory>/a/b.

# watcher

#: Path to python file which will be loaded for watchers
#: <https://sw.kovidgoyal.net/kitty/launch/#watchers>. Can be
#: specified more than once to load multiple watchers. The watchers
#: will be added to every kitty window. Relative paths are resolved
#: relative to the kitty config directory. Note that reloading the
#: config will only affect windows created after the reload.

# exe_search_path

#: Control where kitty finds the programs to run. The default search
#: order is: First search the system wide PATH, then ~/.local/bin and
#: ~/bin. If still not found, the PATH defined in the login shell
#: after sourcing all its startup files is tried. Finally, if present,
#: the PATH specified by the env option is tried.

#: This option allows you to prepend, append, or remove paths from
#: this search order. It can be specified multiple times for multiple
#: paths. A simple path will be prepended to the search order. A path
#: that starts with the + sign will be append to the search order,
#: after ~/bin above. A path that starts with the - sign will be
#: removed from the entire search order. For example::

#:     exe_search_path /some/prepended/path
#:     exe_search_path +/some/appended/path
#:     exe_search_path -/some/excluded/path

# update_check_interval 24

#: The interval to periodically check if an update to kitty is
#: available (in hours). If an update is found, a system notification
#: is displayed informing you of the available update. The default is
#: to check every 24 hours, set to zero to disable. Update checking is
#: only done by the official binary builds. Distro packages or source
#: builds do not do update checking. Changing this option by reloading
#: the config is not supported.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session =none command line option
#: for individual instances. See sessions
#: <https://sw.kovidgoyal.net/kitty/overview/#sessions> in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded. Changing this option by reloading the
#: config is not supported. Note that if kitty is invoked with command
#: line arguments specifying a command to run, this option is ignored.

# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: possible actions are: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via SSH can read your clipboard. See also
#: clipboard_max_size.

# clipboard_max_size 512

#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.

# file_transfer_confirmation_bypass

#: The password that can be supplied to the file transfer kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
#: transfer confirmation prompt. This should only be used when
#: initiating transfers from trusted computers, over trusted networks
#: or encrypted transports, as it allows any programs running on the
#: remote machine to read/write to the local filesystem, without
#: permission.

# allow_hyperlinks yes

#: Process hyperlink escape sequences (OSC 8). If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click with the mouse or by using the hints
#: kitten <https://sw.kovidgoyal.net/kitty/kittens/hints/>. The
#: special value of ask means that kitty will ask before opening the
#: link when clicked.

# shell_integration enabled

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells. Set to
#: disabled to turn off shell integration, completely. It is also
#: possible to disable individual features, set to a space separated
#: list of these values: no-rc, no-cursor, no-title, no-cwd, no-
#: prompt-mark, no-complete, no-sudo. See Shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> for details.

# allow_cloning ask

#: Control whether programs running in the terminal can request new
#: windows to be created. The canonical example is clone-in-kitty
#: <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
#: By default, kitty will ask for permission for each clone request.
#: Allowing cloning unconditionally gives programs running in the
#: terminal (including over SSH) permission to execute arbitrary code,
#: as the user who is running the terminal, on the computer that the
#: terminal is running on.

# clone_source_strategies venv,conda,env_var,path

#: Control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window. The supported strategies are:

#: venv
#:     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#:     Python stdlib venv module and allows cloning venvs automatically.
#: conda
#:     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#:     environments created by conda.
#: env_var
#:     Execute the contents of the environment variable
#:     KITTY_CLONE_SOURCE_CODE with eval.
#: path
#:     Source the file pointed to by the environment variable
#:     KITTY_CLONE_SOURCE_PATH.

#: This option must be a comma separated list of the above values.
#: Only the first valid match, in the order specified, is sourced.

# notify_on_cmd_finish never

#: Show a desktop notification when a long-running command finishes
#: (needs shell_integration). The possible values are:

#: never
#:     Never send a notification.

#: unfocused
#:     Only send a notification when the window does not have keyboard focus.

#: invisible
#:     Only send a notification when the window both is unfocused and not visible
#:     to the user, for example, because it is in an inactive tab or its OS window
#:     is not currently active.

#: always
#:     Always send a notification, regardless of window state.

#: There are two optional arguments:

#: First, the minimum duration for what is considered a long running
#: command. The default is 5 seconds. Specify a second argument to set
#: the duration. For example: invisible 15. Do not set the value too
#: small, otherwise a command that launches a new OS Window and exits
#: will spam a notification.

#: Second, the action to perform. The default is notify. The possible
#: values are:

#: notify
#:     Send a desktop notification.

#: bell
#:     Ring the terminal bell.

#: command
#:     Run a custom command. All subsequent arguments are the cmdline to run.

#: Some more examples::

#:     # Send a notification when a command takes more than 5 seconds in an unfocused window
#:     notify_on_cmd_finish unfocused
#:     # Send a notification when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0
#:     # Ring a bell when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0 bell
#:     # Run 'notify-send' when a command takes more than 10 seconds in a invisible window
#:     # Here %c is replaced by the current command line and %s by the job exit code
#:     notify_on_cmd_finish invisible 10.0 command notify-send "job finished with status: %s" %c

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

# terminfo_type path

#: The value of the TERMINFO environment variable to set. This
#: variable is used by programs running in the terminal to search for
#: terminfo databases. The default value of path causes kitty to set
#: it to a filesystem location containing the kitty terminfo database.
#: A value of direct means put the entire database into the env var
#: directly. This can be useful when connecting to containers, for
#: example. But, note that not all software supports this. A value of
#: none means do not touch the variable.

# forward_stdio no

#: Forward STDOUT and STDERR of the kitty process to child processes
#: as file descriptors 3 and 4. This is useful for debugging as it
#: allows child processes to print to kitty's STDOUT directly. For
#: example, echo hello world >&3 in a shell will print to the parent
#: kitty's STDOUT. When enabled, this also sets the
#: KITTY_STDIO_FORWARDED=3 environment variable so child processes
#: know about the forwarding.

# menu_map

#: Specify entries for various menus in kitty. Currently only the
#: global menubar on macOS is supported. For example::

#:    menu_map global "Actions::Launch something special" launch --hold --type=os-window sh -c "echo hello world"

#: This will create a menu entry named "Launch something special" in
#: an "Actions" menu in the macOS global menubar. Sub-menus can be
#: created by adding more levels separated by the :: characters.

#: }}}

#: OS specific tweaks {{{

# wayland_titlebar_color system

#: The color of the kitty window's titlebar on Wayland systems with
#: client side window decorations such as GNOME. A value of system
#: means to use the default system colors, a value of background means
#: to use the background color of the currently active kitty window
#: and finally you can use an arbitrary color, such as #12af59 or red.

# macos_titlebar_color system

#: The color of the kitty window's titlebar on macOS. A value of
#: system means to use the default system color, light or dark can
#: also be used to set it explicitly. A value of background means to
#: use the background color of the currently active window and finally
#: you can use an arbitrary color, such as #12af59 or red. WARNING:
#: This option works by using a hack when arbitrary color (or
#: background) is configured, as there is no proper Cocoa API for it.
#: It sets the background color of the entire window and makes the
#: titlebar transparent. As such it is incompatible with
#: background_opacity. If you want to use both, you are probably
#: better off just hiding the titlebar with hide_window_decorations.

# macos_option_as_alt no

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.

# macos_hide_from_tasks no

#: Hide the kitty window from running tasks on macOS (⌘+Tab and the
#: Dock). Changing this option by reloading the config is not
#: supported.

# macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed on macOS.
#: By default, kitty will stay running, even with no open windows, as
#: is the expected behavior on macOS.

# macos_window_resizable yes

#: Disable this if you want kitty top-level OS windows to not be
#: resizable on macOS.

# macos_thicken_font 0

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes on macOS. For example, a
#: value of 0.75 will result in rendering that looks similar to sub-
#: pixel antialiasing at common font sizes. Note that in modern kitty,
#: this option is obsolete (although still supported). Consider using
#: text_composition_strategy instead.

# macos_traditional_fullscreen no

#: Use the macOS traditional full-screen transition, that is faster,
#: but less pretty.

# macos_show_window_title_in all

#: Control where the window title is displayed on macOS. A value of
#: window will show the title of the currently active window at the
#: top of the macOS window. A value of menubar will show the title of
#: the currently active window in the macOS global menu bar, making
#: use of otherwise wasted space. A value of all will show the title
#: in both places, and none hides the title. See
#: macos_menubar_title_max_length for how to control the length of the
#: title in the menu bar.

# macos_menubar_title_max_length 0

#: The maximum number of characters from the window title to show in
#: the macOS global menu bar. Values less than one means that there is
#: no maximum limit.

# macos_custom_beam_cursor no

#: Use a custom mouse cursor for macOS that is easier to see on both
#: light and dark backgrounds. Nowadays, the default macOS cursor
#: already comes with a white border. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines. Changing this option
#: by reloading the config is not supported.

# macos_colorspace srgb

#: The colorspace in which to interpret terminal colors. The default
#: of srgb will cause colors to match those seen in web browsers. The
#: value of default will use whatever the native colorspace of the
#: display is. The value of displayp3 will use Apple's special
#: snowflake display P3 color space, which will result in over
#: saturated (brighter) colors with some color shift. Reloading
#: configuration will change this value only for newly created OS
#: windows.

# linux_display_server auto

#: Choose between Wayland and X11 backends. By default, an appropriate
#: backend based on the system state is chosen automatically. Set it
#: to x11 or wayland to force the choice. Changing this option by
#: reloading the config is not supported.

# wayland_enable_ime yes

#: Enable Input Method Extension on Wayland. This is typically used
#: for inputting text in East Asian languages. However, its
#: implementation in Wayland is often buggy and introduces latency
#: into the input loop, so disable this if you know you dont need it.
#: Changing this option by reloading the config is not supported, it
#: will not have any effect.

#: }}}

#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: etc. For functional keys, such as Enter or Escape, the names are
#: present at Functional key definitions
#: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: For modifier keys, the names are ctrl (control, ⌃), shift (⇧), alt
#: (opt, option, ⌥), super (cmd, command, ⌘).

#: Simple shortcut mapping is done with the map directive. For full
#: details on advanced mapping including modal and per application
#: maps, see mapping <https://sw.kovidgoyal.net/kitty/mapping/>. Some
#: quick examples to illustrate common tasks::

#:     # unmap a keyboard shortcut, passing it to the program running in kitty
#:     map kitty_mod+space
#:     # completely ignore a keyboard event
#:     map ctrl+alt+f1 discard_event
#:     # combine multiple actions
#:     map kitty_mod+e combine : new_window : next_layout
#:     # multi-key shortcuts
#:     map ctrl+x>ctrl+y>z action

#: The full list of actions that can be mapped to key presses is
#: available here <https://sw.kovidgoyal.net/kitty/actions/>.

# kitty_mod ctrl+shift

#: Special modifier key alias for default shortcuts. You can change
#: the value of this option to alter all default shortcuts that use
#: kitty_mod.

# clear_all_shortcuts no

#: Remove all shortcut definitions up to this point. Useful, for
#: instance, to remove the default shortcuts.

# action_alias

#: E.g. action_alias launch_tab launch --type=tab --cwd=current

#: Define action aliases to avoid repeating the same options in
#: multiple mappings. Aliases can be defined for any action and will
#: be expanded recursively. For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::

#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs

#: Similarly, to alias kitten invocation::

#:     action_alias hints kitten hints --hints-offset=0

# kitten_alias

#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above, but specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

#: Clipboard {{{

#: Copy to clipboard

# map kitty_mod+c copy_to_clipboard
# map cmd+c       copy_to_clipboard

#::  There is also a copy_or_interrupt action that can be optionally
#::  mapped to Ctrl+C. It will copy only if there is a selection and
#::  send an interrupt otherwise. Similarly,
#::  copy_and_clear_or_interrupt will copy and clear the selection or
#::  send an interrupt if there is no selection.

#: Paste from clipboard

# map kitty_mod+v paste_from_clipboard
# map cmd+v       paste_from_clipboard

#: Paste from selection

# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection

#: Pass selection to program

# map kitty_mod+o pass_selection_to_program

#::  You can also pass the contents of the current selection to any
#::  program with pass_selection_to_program. By default, the system's
#::  open program is used, but you can specify your own, the selection
#::  will be passed as a command line argument to the program. For
#::  example::

#::      map kitty_mod+o pass_selection_to_program firefox

#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::

#::      map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

#: Scroll line up

# map kitty_mod+up    scroll_line_up
# map kitty_mod+k     scroll_line_up
# map opt+cmd+page_up scroll_line_up
# map cmd+up          scroll_line_up

#: Scroll line down

# map kitty_mod+down    scroll_line_down
# map kitty_mod+j       scroll_line_down
# map opt+cmd+page_down scroll_line_down
# map cmd+down          scroll_line_down

#: Scroll page up

# map kitty_mod+page_up scroll_page_up
# map cmd+page_up       scroll_page_up

#: Scroll page down

# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down

#: Scroll to top

# map kitty_mod+home scroll_home
# map cmd+home       scroll_home

#: Scroll to bottom

# map kitty_mod+end scroll_end
# map cmd+end       scroll_end

#: Scroll to previous shell prompt

# map kitty_mod+z scroll_to_prompt -1

#::  Use a parameter of 0 for scroll_to_prompt to scroll to the last
#::  jumped to or the last clicked position. Requires shell
#::  integration <https://sw.kovidgoyal.net/kitty/shell-integration/>
#::  to work.

#: Scroll to next shell prompt

# map kitty_mod+x scroll_to_prompt 1

#: Browse scrollback buffer in pager

# map kitty_mod+h show_scrollback

#::  You can pipe the contents of the current screen and history
#::  buffer as STDIN to an arbitrary program using launch --stdin-
#::  source. For example, the following opens the scrollback buffer in
#::  less in an overlay window::

#::      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#::  For more details on piping screen and buffer contents to external
#::  programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#: Browse output of the last shell command in pager

# map kitty_mod+g show_last_command_output

#::  You can also define additional shortcuts to get the command
#::  output. For example, to get the first command output on screen::

#::      map f1 show_first_command_output_on_screen

#::  To get the command output that was last accessed by a keyboard
#::  action or mouse action::

#::      map f1 show_last_visited_command_output

#::  You can pipe the output of the last command run in the shell
#::  using the launch action. For example, the following opens the
#::  output in less in an overlay window::

#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#::  To get the output of the first command on the screen, use
#::  @first_cmd_output_on_screen. To get the output of the last jumped
#::  to command, use @last_visited_cmd_output.

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: Window management {{{

#: New window

# map kitty_mod+enter new_window
# map cmd+enter       new_window

#::  You can open a new kitty window running an arbitrary program, for
#::  example::

#::      map kitty_mod+y launch mutt

#::  You can open a new window with the current working directory set
#::  to the working directory of the current window using::

#::      map ctrl+alt+enter launch --cwd=current

#::  You can open a new window that is allowed to control kitty via
#::  the kitty remote control facility with launch --allow-remote-
#::  control. Any programs running in that window will be allowed to
#::  control kitty. For example::

#::      map ctrl+enter launch --allow-remote-control some_program

#::  You can open a new window next to the currently active window or
#::  as the first window, with::

#::      map ctrl+n launch --location=neighbor
#::      map ctrl+f launch --location=first

#::  For more details, see launch
#::  <https://sw.kovidgoyal.net/kitty/launch/>.

#: New OS window

# map kitty_mod+n new_os_window
# map cmd+n       new_os_window

#::  Works like new_window above, except that it opens a top-level OS
#::  window. In particular you can use new_os_window_with_cwd to open
#::  a window with the current working directory.

#: Close window

# map kitty_mod+w close_window
# map shift+cmd+d close_window

#: Next window

# map kitty_mod+] next_window

#: Previous window

# map kitty_mod+[ previous_window

#: Move window forward

# map kitty_mod+f move_window_forward

#: Move window backward

# map kitty_mod+b move_window_backward

#: Move window to top

# map kitty_mod+` move_window_to_top

#: Start resizing window

# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window

#: First window

# map kitty_mod+1 first_window
# map cmd+1       first_window

#: Second window

# map kitty_mod+2 second_window
# map cmd+2       second_window

#: Third window

# map kitty_mod+3 third_window
# map cmd+3       third_window

#: Fourth window

# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window

#: Fifth window

# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window

#: Sixth window

# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window

#: Seventh window

# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window

#: Eighth window

# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window

#: Ninth window

# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window

#: Tenth window

# map kitty_mod+0 tenth_window

#: Visually select and focus window

# map kitty_mod+f7 focus_visible_window

#::  Display overlay numbers and alphabets on the window, and switch
#::  the focus to the window when you press the key. When there are
#::  only two windows, the focus will be switched directly without
#::  displaying the overlay. You can change the overlay characters and
#::  their order with option visual_window_select_characters.

#: Visually swap window with another

# map kitty_mod+f8 swap_with_window

#::  Works like focus_visible_window above, but swaps the window.

#: }}}

#: Tab management {{{

#: Next tab

# map kitty_mod+right next_tab
# map shift+cmd+]     next_tab
# map ctrl+tab        next_tab

#: Previous tab

# map kitty_mod+left previous_tab
# map shift+cmd+[    previous_tab
# map ctrl+shift+tab previous_tab

#: New tab

# map kitty_mod+t new_tab
# map cmd+t       new_tab

#: Close tab

# map kitty_mod+q close_tab
# map cmd+w       close_tab

#: Close OS window

# map shift+cmd+w close_os_window

#: Move tab forward

# map kitty_mod+. move_tab_forward

#: Move tab backward

# map kitty_mod+, move_tab_backward

#: Set tab title

# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title


#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and new_tab_with_cwd.
#: Finally, if you want the new tab to open next to the current tab
#: rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:     map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size

# map kitty_mod+equal  change_font_size all +2.0
# map kitty_mod+plus   change_font_size all +2.0
# map kitty_mod+kp_add change_font_size all +2.0
# map cmd+plus         change_font_size all +2.0
# map cmd+equal        change_font_size all +2.0
# map shift+cmd+equal  change_font_size all +2.0

#: Decrease font size

# map kitty_mod+minus       change_font_size all -2.0
# map kitty_mod+kp_subtract change_font_size all -2.0
# map cmd+minus             change_font_size all -2.0
# map shift+cmd+minus       change_font_size all -2.0

#: Reset font size

# map kitty_mod+backspace change_font_size all 0
# map cmd+0               change_font_size all 0


#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

# map kitty_mod+e open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Useful for
#::  the output of things like: `ls -1`.

#: Insert selected word

# map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

# map kitty_mod+p>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses SHA1 hashes to identify
#::  commits.

#: Open the selected file at the selected line

# map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  your default editor at the specified line number.

#: Open the selected hyperlink

# map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by `ls --hyperlink=auto`).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see hints kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/hints/>.
#: }}}

#: Miscellaneous {{{

#: Show documentation

# map kitty_mod+f1 show_kitty_doc overview

#: Toggle fullscreen

# map kitty_mod+f11 toggle_fullscreen
# map ctrl+cmd+f    toggle_fullscreen

#: Toggle maximized

# map kitty_mod+f10 toggle_maximized

#: Toggle macOS secure keyboard entry

# map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Unicode input

# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input

#: Edit config file

# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file

#: Open the kitty command shell

# map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window / tab / overlay / os_window
#::  to control kitty using commands.

#: Increase background opacity

# map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity

# map kitty_mod+a>l set_background_opacity -0.1

#: Make background fully opaque

# map kitty_mod+a>1 set_background_opacity 1

#: Reset background opacity

# map kitty_mod+a>d set_background_opacity default

#: Reset the terminal

# map kitty_mod+delete clear_terminal reset active
# map opt+cmd+r        clear_terminal reset active

#::  You can create shortcuts to clear/reset the terminal. For
#::  example::

#::      # Reset the terminal
#::      map f1 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map f1 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map f1 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map f1 clear_terminal scroll active
#::      # Clear everything on screen up to the line with the cursor or the start of the current prompt (needs shell integration)
#::      map f1 clear_terminal to_cursor active
#::      # Same as above except cleared lines are moved into scrollback
#::      map f1 clear_terminal to_cursor_scroll active

#::  If you want to operate on all kitty windows instead of just the
#::  current one, use all instead of active.

#::  Some useful functions that can be defined in the shell rc files
#::  to perform various kinds of clearing of the current window:

#::  .. code-block:: sh

#::      clear-only-screen() {
#::          printf "\e[H\e[2J"
#::      }

#::      clear-screen-and-scrollback() {
#::          printf "\e[H\e[3J"
#::      }

#::      clear-screen-saving-contents-in-scrollback() {
#::          printf "\e[H\e[22J"
#::      }

#::  For instance, using these escape codes, it is possible to remap
#::  Ctrl+L to both scroll the current screen contents into the
#::  scrollback buffer and clear the screen, instead of just clearing
#::  the screen. For ZSH, in ~/.zshrc, add:

#::  .. code-block:: zsh

#::      ctrl_l() {
#::          builtin print -rn -- $'\r\e[0J\e[H\e[22J' >"$TTY"
#::          builtin zle .reset-prompt
#::          builtin zle -R
#::      }
#::      zle -N ctrl_l
#::      bindkey '^l' ctrl_l

#::  Alternatively, you can just add map ctrl+l clear_terminal
#::  to_cursor_scroll active to kitty.conf which works with no changes
#::  to the shell rc files, but only clears up to the prompt, it does
#::  not clear anytext at the prompt itself.

#: Clear up to cursor line

# map cmd+k clear_terminal to_cursor active

#: Reload kitty.conf

# map kitty_mod+f5 load_config_file
# map ctrl+cmd+,   load_config_file

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of options cannot be dynamically
#::  changed and require a full restart of kitty. Particularly, when
#::  changing shortcuts for actions located on the macOS global menu
#::  bar, a full restart is needed. You can also map a keybinding to
#::  load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all options from the original kitty.conf are discarded,
#::  in other words the new configuration *replace* the old ones.

#: Debug kitty configuration

# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent decodes ANSI C escapes
#::  <https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-
#::  Quoting.html> so you can use escapes like \e to send control
#::  codes or \u21fb to send Unicode characters (or you can just input
#::  the Unicode characters directly as UTF-8 text). You can use
#::  `kitten show_key` to get the key escape codes you want to
#::  emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\e[H
#::      map ctrl+alt+a send_text application Word\eOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

#: Open kitty Website

# map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/

#: Hide macOS kitty application

# map cmd+h hide_macos_app

#: Hide macOS other applications

# map opt+cmd+h hide_macos_other_apps

#: Minimize macOS window

# map cmd+m minimize_macos_window

#: Quit kitty

# map cmd+q quit

#: }}}

#: }}}


# BEGIN_KITTY_THEME
# Gruvbox Material Dark Hard
include current-theme.conf
# END_KITTY_THEME
#+end_example
#+begin_example
# vim:ft=kitty
## name: Gruvbox Material Dark Hard
## author: Sainnhe Park
## license: MIT
## upstream: https://raw.githubusercontent.com/rsaihe/gruvbox-material-kitty/main/colors/gruvbox-material-dark-hard.conf
## blurb: A modified version of Gruvbox with softer contrasts

background #1d2021
foreground #d4be98

selection_background #d4be98
selection_foreground #1d2021

cursor #a89984
cursor_text_color background

# Black
color0 #665c54
color8 #928374

# Red
color1 #ea6962
color9 #ea6962

# Green
color2  #a9b665
color10 #a9b665

# Yellow
color3  #e78a4e
color11 #d8a657

# Blue
color4  #7daea3
color12 #7daea3

# Magenta
color5  #d3869b
color13 #d3869b

# Cyan
color6  #89b482
color14 #89b482

# White
color7  #d4be98
color15 #d4be98
#+end_example
*** mailcap .mailcap (for use with alot that works with notmuch)
#+begin_example
text/html; elinks -dump '%s'; nametemplate=%s.html; copiousoutput
#+end_example
**** alot example command
#+begin_example
alot --notmuch-config=/home/david/.notmuch-config search "tag:archived date:06-2024"
#+end_example
**** reference links for searching notmuch
https://alot.readthedocs.io/en/latest/usage/index.html
https://notmuchmail.org/doc/latest/man1/notmuch-search.html
https://notmuchmail.org/doc/latest/man7/notmuch-search-terms.html#notmuch-search-terms-7
https://notmuchmail.org/notmuch-emacs/
https://notmuchmail.org/screenshots/
https://notmuchmail.org/emacstips/
http://elinks.or.cz/
https://github.com/rkd77/elinks - elinks is a text based browser for the terminal
**** alot config theme
#+begin_example
###############################################################################
# SOLARIZED DARK
#
# colour theme for alot. © 2012 Patrick Totzke, GNU GPL3+
# http://ethanschoonover.com/solarized
# https://github.com/pazz/alot
###############################################################################
#
# Define mappings from solarized colour names to urwid attribute names for 16
# and 256 colour modes. These work well assuming you use the solarized term
# colours via Xressources/Xdefaults. You might want to change this otherwise

16_base03 = 'dark gray'
16_base02 = 'black'
16_base01 = 'light green'
16_base00 = 'yellow'
16_base0 = 'light blue'
16_base1 = 'light cyan'
16_base2 = 'light gray'
16_base3 = 'white'
16_yellow = 'brown'
16_orange = 'light red'
16_red = 'dark red'
16_magenta = 'dark magenta'
16_violet = 'light magenta'
16_blue = 'dark blue'
16_cyan = 'dark cyan'
16_green = 'dark green'

# Use a slightly different mapping here to be able to use "bold" in 256c mode
256_base03 = 'dark gray'
256_base02 = 'black'
256_base01 = 'light green'
256_base00 = 'yellow'
256_base0 = 'g66'
256_base1 = 'g70'
256_base2 = 'light gray'
256_base3 = 'white'
256_yellow = 'brown'  #da0 for bold
256_orange = 'light red'
256_red = 'dark red'
256_magenta = 'dark magenta'
256_violet = 'light magenta'
256_blue = 'dark blue'
256_cyan = '#088'
256_green = 'dark green'


# This is the actual alot theme
[global]
    footer = 'standout','default','%(16_base1)s','%(16_base02)s','%(256_base1)s','%(256_base02)s'
    body = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    notify_error = 'standout','default','%(16_base3)s','%(16_red)s','%(256_base3)s','%(256_red)s'
    notify_normal = 'default','default','%(16_base01)s','%(16_base02)s','%(256_base01)s','%(256_base02)s'
    prompt = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
    tag = 'default','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
    tag_focus = 'standout','default','%(16_base03)s','%(16_yellow)s','%(256_base03)s','%(256_yellow)s'
[help]
    text = 'default','default','%(16_base1)s','%(16_base02)s','%(256_base1)s','%(256_base02)s'
    section = 'underline','default','%(16_base1)s,underline','%(16_base02)s','%(256_base1)s,underline','%(256_base02)s'
    title = 'standout','default','%(16_base1)s','%(16_base02)s','%(256_base1)s,bold','%(256_base02)s'
    frame = 'standout','default','%(16_base1)s','%(16_base02)s','%(256_base1)s,bold','%(256_base02)s'
[taglist]
    line_focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    line_even = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    line_odd = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
[bufferlist]
    line_focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    line_even = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    line_odd = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
[thread]
    attachment = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    attachment_focus = 'underline','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    arrow_bars = 'default','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
    arrow_heads = 'default','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
    body = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'

   body_focus = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base02)s'
    header = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
    header_key = 'default','default','%(16_magenta)s','%(16_base02)s','%(256_magenta)s','%(256_base02)s'
    header_value = 'default','default','%(16_blue)s','%(16_base02)s','%(256_blue)s','%(256_base02)s'
    [[summary]]
      even = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
      focus = 'standout','default','%(16_base03)s','%(16_yellow)s','%(256_base03)s','%(256_yellow)s'
      odd = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
[envelope]
    body = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    header = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
    header_key = 'default','default','%(16_orange)s','%(16_base02)s','%(256_orange)s','%(256_base02)s'
    header_value = 'default','default','%(16_violet)s','%(16_base02)s','%(256_violet)s','%(256_base02)s'
[search]
    [[threadline]]
        normal = 'default','default','%(16_base1)s','%(16_base03)s','%(256_base1)s','%(256_base03)s'
        focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
        parts = date,mailcount,tags,authors,subject
        [[[date]]]
            normal = 'default','default','%(16_base1)s','%(16_base03)s','%(256_base1)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s,bold','%(16_yellow)s','%(256_base02)s,bold','%(256_yellow)s'
            alignment = right
            width = fit, 9, 9
        [[[mailcount]]]
            normal = 'default','default','%(16_base1)s','%(16_base03)s','%(256_base1)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
        [[[tags]]]
            normal = 'bold','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
        [[[authors]]]
            normal = 'default,underline','default','%(16_cyan)s','%(16_base03)s','%(256_cyan)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
            width = 'fit',0,30
        [[[subject]]]
            normal = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s,bold','%(16_yellow)s','%(256_base02)s,bold','%(256_yellow)s'
            width = 'weight',1
        [[[content]]]
            normal = 'default','default','%(16_base01)s','%(16_base03)s','%(256_base01)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    [[threadline-unread]]
        normal = 'default','default','%(16_base1)s,bold','%(16_base03)s','%(256_base1)s,bold','%(256_base03)s'
        tagged_with = 'unread'
        [[[date]]]
            normal = 'default','default','%(16_base2)s,bold','%(16_base03)s','%(256_base2)s,bold','%(256_base03)s'
        [[[mailcount]]]
            normal = 'default','default','%(16_base2)s,bold','%(16_base03)s','%(256_base2)s,bold','%(256_base03)s'
        [[[tags]]]
            normal = 'bold','default','%(16_yellow)s','%(16_base03)s','#da0','%(256_base03)s'
        [[[authors]]]
            normal = 'default,underline','default','%(16_cyan)s','%(16_base03)s','#088,bold','%(256_base03)s'
        [[[subject]]]
            normal = 'default','default','%(16_base2)s,bold','%(16_base03)s','%(256_base2)s,bold','%(256_base03)s'
        [[[content]]]
            normal = 'default','default','%(16_base01)s,bold','%(16_base03)s','%(256_base01)s,bold','%(256_base03)s'
[namedqueries]
    line_focus = 'standout','default','%(16_base2)s','%(16_yellow)s','%(256_base2)s','%(256_yellow)s'
    line_even = 'default','default','%(16_base00)s','%(16_base3)s','%(256_base00)s','%(256_base3)s'
    line_odd = 'default','default','%(16_base00)s','%(16_base2)s','%(256_base00)s','%(256_base2)s'
#+end_example
**** alot config
#+begin_example
theme = solarized_dark
search_threads_sort_order = newest_first
#+end_example
*** mailcap .mailcap (for use with notmuch inside of emacs)
This allows . v when the cursor is over the HTML version of the message to open
in default browser and show the actual HTML rendering
#+begin_example
text/html; xdg-open '%s'; nametemplate=%s.html;
#+end_example

*** bashrc .bashrc
# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
  PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
  for rc in ~/.bashrc.d/*; do
    if [ -f "$rc" ]; then
      . "$rc"
    fi
  done
fi
unset rc

. "$HOME/.cargo/env"
export EDITOR="nvim"
export SUDO_EDITOR="nvim"
export VISUAL="nvim"

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
*** bash profile .bash_profile
# .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi

# User specific environment and startup programs
. "$HOME/.cargo/env"

*** Notmuch config .notmuch-config
this is created automatically by running notmuch setup - you then run notmuch
new to index your emails
#+begin_example
# .notmuch-config - Configuration file for the notmuch mail system
#
# For more information about notmuch, see https://notmuchmail.org
# Database configuration
#
# The only value supported here is 'path' which should be the top-level
# directory where your mail currently exists and to where mail will be
# delivered in the future. Files should be individual email messages.
# Notmuch will store its database within a sub-directory of the path
# configured here named ".notmuch".
#
[database]
path=/run/media/david/myINTERNAL/reorganized_emails
# User configuration
#
# Here is where you can let notmuch know how you would like to be
# addressed. Valid settings are
#
#	name		Your full name.
#	primary_email	Your primary email address.
#	other_email	A list (separated by ';') of other email addresses
#			at which you receive email.
#
# Notmuch will use the various email addresses configured here when
# formatting replies. It will avoid including your own addresses in the
# recipient list of replies, and will set the From address based on the
# address to which the original email was addressed.
#
[user]
name=
primary_email=
other_email=
# Configuration for "notmuch new"
#
# The following options are supported here:
#
#	tags	A list (separated by ';') of the tags that will be
#		added to all messages incorporated by "notmuch new".
#
#	ignore	A list (separated by ';') of file and directory names
#		that will not be searched for messages by "notmuch new".
#
#		NOTE: *Every* file/directory that goes by one of those
#		names will be ignored, independent of its depth/location
#		in the mail store.
#
[new]
tags=archived
# Search configuration
#
# The following option is supported here:
#
#	exclude_tags
#		A ;-separated list of tags that will be excluded from
#		search results by default.  Using an excluded tag in a
#		query will override that exclusion.
#
[search]
# Maildir compatibility configuration
#
# The following option is supported here:
#
#	synchronize_flags      Valid values are true and false.
#
#	If true, then the following maildir flags (in message filenames)
#	will be synchronized with the corresponding notmuch tags:
#
#		Flag	Tag
#		----	-------
#		D	draft
#		F	flagged
#		P	passed
#		R	replied
#		S	unread (added when 'S' flag is not present)
#
#	The "notmuch new" command will notice flag changes in filenames
#	and update tags, while the "notmuch tag" and "notmuch restore"
#	commands will notice tag changes and update flags in filenames
#
[maildir]
#+end_example
*** mbsyncrc .mbsyncrc
#+begin_example
IMAPAccount gmail
Host imap.gmail.com
User emailgoeshere
Pass secretpasswordgoeshere
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path /run/media/david/myINTERNAL/Maildir/gmail/
Inbox /run/media/david/myINTERNAL/Maildir/gmail/INBOX
SubFolders Verbatim

Channel gmail
Far :gmail-remote:
Near :gmail-local:
Patterns * "[Gmail]/Sent Mail" "[Gmail]/Trash" "[Gmail]/All Mail" !"[Gmail]/Starred"
Create Near
SyncState *
#+end_example
*** wezterm lua .wezterm.lua
#+begin_example
-- Pull in the wezterm API
local wezterm = require("wezterm")

-- This will hold the configuration.
local config = wezterm.config_builder()

-- This is where you actually apply your config choices

config.font = wezterm.font("FiraCode Nerd Font")
config.font_size = 12

-- config.enable_tab_bar = false

config.window_decorations = "RESIZE"
config.window_background_opacity = 0.75
config.color_scheme = "tokyonight_night"
-- config.macos_window_background_blur = 8

-- and finally, return the configuration to wezterm
return config
#+end_example
*** git config .gitconfig
#+begin_example
[user]
	name = David R Rrrrr
	email = david.rrrrrr@yandex.com
[credential "https://github.com"]
	helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = !/usr/bin/gh auth git-credential
[core]
	editor = nvim
#+end_example
*** .authinfo
This is so I can send emails from Emacs through gmail account.
#+begin_example
machine smtp.gmail.com login <insert email> password <insert password> port 587
#+end_example

*** zellij config.kdl
this is just the default configuration it generates with a command
#+begin_example
// If you'd like to override the default keybindings completely, be sure to change "keybinds" to "keybinds clear-defaults=true"
keybinds {
    normal {
        // uncomment this and adjust key if using copy_on_select=false
        // bind "Alt c" { Copy; }
    }
    locked {
        bind "Ctrl g" { SwitchToMode "Normal"; }
    }
    resize {
        bind "Ctrl n" { SwitchToMode "Normal"; }
        bind "h" "Left" { Resize "Increase Left"; }
        bind "j" "Down" { Resize "Increase Down"; }
        bind "k" "Up" { Resize "Increase Up"; }
        bind "l" "Right" { Resize "Increase Right"; }
        bind "H" { Resize "Decrease Left"; }
        bind "J" { Resize "Decrease Down"; }
        bind "K" { Resize "Decrease Up"; }
        bind "L" { Resize "Decrease Right"; }
        bind "=" "+" { Resize "Increase"; }
        bind "-" { Resize "Decrease"; }
    }
    pane {
        bind "Ctrl p" { SwitchToMode "Normal"; }
        bind "h" "Left" { MoveFocus "Left"; }
        bind "l" "Right" { MoveFocus "Right"; }
        bind "j" "Down" { MoveFocus "Down"; }
        bind "k" "Up" { MoveFocus "Up"; }
        bind "p" { SwitchFocus; }
        bind "n" { NewPane; SwitchToMode "Normal"; }
        bind "d" { NewPane "Down"; SwitchToMode "Normal"; }
        bind "r" { NewPane "Right"; SwitchToMode "Normal"; }
        bind "x" { CloseFocus; SwitchToMode "Normal"; }
        bind "f" { ToggleFocusFullscreen; SwitchToMode "Normal"; }
        bind "z" { TogglePaneFrames; SwitchToMode "Normal"; }
        bind "w" { ToggleFloatingPanes; SwitchToMode "Normal"; }
        bind "e" { TogglePaneEmbedOrFloating; SwitchToMode "Normal"; }
        bind "c" { SwitchToMode "RenamePane"; PaneNameInput 0;}
    }
    move {
        bind "Ctrl h" { SwitchToMode "Normal"; }
        bind "n" "Tab" { MovePane; }
        bind "p" { MovePaneBackwards; }
        bind "h" "Left" { MovePane "Left"; }
        bind "j" "Down" { MovePane "Down"; }
        bind "k" "Up" { MovePane "Up"; }
        bind "l" "Right" { MovePane "Right"; }
    }
    tab {
        bind "Ctrl t" { SwitchToMode "Normal"; }
        bind "r" { SwitchToMode "RenameTab"; TabNameInput 0; }
        bind "h" "Left" "Up" "k" { GoToPreviousTab; }
        bind "l" "Right" "Down" "j" { GoToNextTab; }
        bind "n" { NewTab; SwitchToMode "Normal"; }
        bind "x" { CloseTab; SwitchToMode "Normal"; }
        bind "s" { ToggleActiveSyncTab; SwitchToMode "Normal"; }
        bind "b" { BreakPane; SwitchToMode "Normal"; }
        bind "]" { BreakPaneRight; SwitchToMode "Normal"; }
        bind "[" { BreakPaneLeft; SwitchToMode "Normal"; }
        bind "1" { GoToTab 1; SwitchToMode "Normal"; }
        bind "2" { GoToTab 2; SwitchToMode "Normal"; }
        bind "3" { GoToTab 3; SwitchToMode "Normal"; }
        bind "4" { GoToTab 4; SwitchToMode "Normal"; }
        bind "5" { GoToTab 5; SwitchToMode "Normal"; }
        bind "6" { GoToTab 6; SwitchToMode "Normal"; }
        bind "7" { GoToTab 7; SwitchToMode "Normal"; }
        bind "8" { GoToTab 8; SwitchToMode "Normal"; }
        bind "9" { GoToTab 9; SwitchToMode "Normal"; }
        bind "Tab" { ToggleTab; }
    }
    scroll {
        bind "Ctrl s" { SwitchToMode "Normal"; }
        bind "e" { EditScrollback; SwitchToMode "Normal"; }
        bind "s" { SwitchToMode "EnterSearch"; SearchInput 0; }
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Normal"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        // uncomment this and adjust key if using copy_on_select=false
        // bind "Alt c" { Copy; }
    }
    search {
        bind "Ctrl s" { SwitchToMode "Normal"; }
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Normal"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        bind "n" { Search "down"; }
        bind "p" { Search "up"; }
        bind "c" { SearchToggleOption "CaseSensitivity"; }
        bind "w" { SearchToggleOption "Wrap"; }
        bind "o" { SearchToggleOption "WholeWord"; }
    }
    entersearch {
        bind "Ctrl c" "Esc" { SwitchToMode "Scroll"; }
        bind "Enter" { SwitchToMode "Search"; }
    }
    renametab {
        bind "Ctrl c" { SwitchToMode "Normal"; }
        bind "Esc" { UndoRenameTab; SwitchToMode "Tab"; }
    }
    renamepane {
        bind "Ctrl c" { SwitchToMode "Normal"; }
        bind "Esc" { UndoRenamePane; SwitchToMode "Pane"; }
    }
    session {
        bind "Ctrl o" { SwitchToMode "Normal"; }
        bind "Ctrl s" { SwitchToMode "Scroll"; }
        bind "d" { Detach; }
        bind "w" {
            LaunchOrFocusPlugin "session-manager" {
                floating true
                move_to_focused_tab true
            };
            SwitchToMode "Normal"
        }
    }
    tmux {
        bind "[" { SwitchToMode "Scroll"; }
        bind "Ctrl b" { Write 2; SwitchToMode "Normal"; }
        bind "\"" { NewPane "Down"; SwitchToMode "Normal"; }
        bind "%" { NewPane "Right"; SwitchToMode "Normal"; }
        bind "z" { ToggleFocusFullscreen; SwitchToMode "Normal"; }
        bind "c" { NewTab; SwitchToMode "Normal"; }
        bind "," { SwitchToMode "RenameTab"; }
        bind "p" { GoToPreviousTab; SwitchToMode "Normal"; }
        bind "n" { GoToNextTab; SwitchToMode "Normal"; }
        bind "Left" { MoveFocus "Left"; SwitchToMode "Normal"; }
        bind "Right" { MoveFocus "Right"; SwitchToMode "Normal"; }
        bind "Down" { MoveFocus "Down"; SwitchToMode "Normal"; }
        bind "Up" { MoveFocus "Up"; SwitchToMode "Normal"; }
        bind "h" { MoveFocus "Left"; SwitchToMode "Normal"; }
        bind "l" { MoveFocus "Right"; SwitchToMode "Normal"; }
        bind "j" { MoveFocus "Down"; SwitchToMode "Normal"; }
        bind "k" { MoveFocus "Up"; SwitchToMode "Normal"; }
        bind "o" { FocusNextPane; }
        bind "d" { Detach; }
        bind "Space" { NextSwapLayout; }
        bind "x" { CloseFocus; SwitchToMode "Normal"; }
    }
    shared_except "locked" {
        bind "Ctrl g" { SwitchToMode "Locked"; }
        bind "Ctrl q" { Quit; }
        bind "Alt n" { NewPane; }
        bind "Alt i" { MoveTab "Left"; }
        bind "Alt o" { MoveTab "Right"; }
        bind "Alt h" "Alt Left" { MoveFocusOrTab "Left"; }
        bind "Alt l" "Alt Right" { MoveFocusOrTab "Right"; }
        bind "Alt j" "Alt Down" { MoveFocus "Down"; }
        bind "Alt k" "Alt Up" { MoveFocus "Up"; }
        bind "Alt =" "Alt +" { Resize "Increase"; }
        bind "Alt -" { Resize "Decrease"; }
        bind "Alt [" { PreviousSwapLayout; }
        bind "Alt ]" { NextSwapLayout; }
    }
    shared_except "normal" "locked" {
        bind "Enter" "Esc" { SwitchToMode "Normal"; }
    }
    shared_except "pane" "locked" {
        bind "Ctrl p" { SwitchToMode "Pane"; }
    }
    shared_except "resize" "locked" {
        bind "Ctrl n" { SwitchToMode "Resize"; }
    }
    shared_except "scroll" "locked" {
        bind "Ctrl s" { SwitchToMode "Scroll"; }
    }
    shared_except "session" "locked" {
        bind "Ctrl o" { SwitchToMode "Session"; }
    }
    shared_except "tab" "locked" {
        bind "Ctrl t" { SwitchToMode "Tab"; }
    }
    shared_except "move" "locked" {
        bind "Ctrl h" { SwitchToMode "Move"; }
    }
    shared_except "tmux" "locked" {
        bind "Ctrl b" { SwitchToMode "Tmux"; }
    }
}

plugins {
    tab-bar location="zellij:tab-bar"
    status-bar location="zellij:status-bar"
    strider location="zellij:strider"
    compact-bar location="zellij:compact-bar"
    session-manager location="zellij:session-manager"
    welcome-screen location="zellij:session-manager" {
        welcome_screen true
    }
    filepicker location="zellij:strider" {
        cwd "/"
    }
}

// Choose what to do when zellij receives SIGTERM, SIGINT, SIGQUIT or SIGHUP
// eg. when terminal window with an active zellij session is closed
// Options:
//   - detach (Default)
//   - quit
//
// on_force_close "quit"

//  Send a request for a simplified ui (without arrow fonts) to plugins
//  Options:
//    - true
//    - false (Default)
//
// simplified_ui true

// Choose the path to the default shell that zellij will use for opening new panes
// Default: $SHELL
//
// default_shell "fish"

// Choose the path to override cwd that zellij will use for opening new panes
//
// default_cwd ""

// Toggle between having pane frames around the panes
// Options:
//   - true (default)
//   - false
//
// pane_frames true

// Toggle between having Zellij lay out panes according to a predefined set of layouts whenever possible
// Options:
//   - true (default)
//   - false
//
// auto_layout true

// Whether sessions should be serialized to the cache folder (including their tabs/panes, cwds and running commands) so that they can later be resurrected
// Options:
//   - true (default)
//   - false
//
// session_serialization false

// Whether pane viewports are serialized along with the session, default is false
// Options:
//   - true
//   - false (default)
// serialize_pane_viewport true

// Scrollback lines to serialize along with the pane viewport when serializing sessions, 0
// defaults to the scrollback size. If this number is higher than the scrollback size, it will
// also default to the scrollback size. This does nothing if `serialize_pane_viewport` is not true.
//
// scrollback_lines_to_serialize 10000

// Define color themes for Zellij
// For more examples, see: https://github.com/zellij-org/zellij/tree/main/example/themes
// Once these themes are defined, one of them should to be selected in the "theme" section of this file
//
// themes {
//     dracula {
//         fg 248 248 242
//         bg 40 42 54
//         red 255 85 85
//         green 80 250 123
//         yellow 241 250 140
//         blue 98 114 164
//         magenta 255 121 198
//         orange 255 184 108
//         cyan 139 233 253
//         black 0 0 0
//         white 255 255 255
//     }
// }

// Choose the theme that is specified in the themes section.
// Default: default
//
// theme "default"

// The name of the default layout to load on startup
// Default: "default"
//
// default_layout "compact"

// Choose the mode that zellij uses when starting up.
// Default: normal
//
// default_mode "locked"

// Toggle enabling the mouse mode.
// On certain configurations, or terminals this could
// potentially interfere with copying text.
// Options:
//   - true (default)
//   - false
//
// mouse_mode false

// Configure the scroll back buffer size
// This is the number of lines zellij stores for each pane in the scroll back
// buffer. Excess number of lines are discarded in a FIFO fashion.
// Valid values: positive integers
// Default value: 10000
//
// scroll_buffer_size 10000

// Provide a command to execute when copying text. The text will be piped to
// the stdin of the program to perform the copy. This can be used with
// terminal emulators which do not support the OSC 52 ANSI control sequence
// that will be used by default if this option is not set.
// Examples:
//
// copy_command "xclip -selection clipboard" // x11
// copy_command "wl-copy"                    // wayland
// copy_command "pbcopy"                     // osx

// Choose the destination for copied text
// Allows using the primary selection buffer (on x11/wayland) instead of the system clipboard.
// Does not apply when using copy_command.
// Options:
//   - system (default)
//   - primary
//
// copy_clipboard "primary"

// Enable or disable automatic copy (and clear) of selection when releasing mouse
// Default: true
//
// copy_on_select false

// Path to the default editor to use to edit pane scrollbuffer
// Default: $EDITOR or $VISUAL
//
// scrollback_editor "/usr/bin/vim"

// When attaching to an existing session with other users,
// should the session be mirrored (true)
// or should each user have their own cursor (false)
// Default: false
//
// mirror_session true

// The folder in which Zellij will look for layouts
//
// layout_dir "/path/to/my/layout_dir"

// The folder in which Zellij will look for themes
//
// theme_dir "/path/to/my/theme_dir"

// Enable or disable the rendering of styled and colored underlines (undercurl).
// May need to be disabled for certain unsupported terminals
// Default: true
//
// styled_underlines false

// Enable or disable writing of session metadata to disk (if disabled, other sessions might not know
// metadata info on this session)
// Default: false
//
// disable_session_metadata true
#+end_example
