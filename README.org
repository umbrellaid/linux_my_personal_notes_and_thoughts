* Linux My Personal Notes and Thoughts                                              :TOC_9:
  - [[#linux-notes--thoughts][Linux Notes / Thoughts]]
    - [[#fedora-silverblue-and-bluefin-customized-version-of-fedora-silverblue-plus-fedora-kinoite-and-aurora-customized-version-of-fedora-kinoite][Fedora Silverblue and bluefin customized version of Fedora Silverblue, plus Fedora Kinoite and Aurora customized version of Fedora Kinoite]]
    - [[#doom-emacs][doom emacs]]
    - [[#cheat-sheet-links][Cheat Sheet Links]]
    - [[#manjaro-linux-plasma-kde][Manjaro Linux Plasma KDE]]
    - [[#opensuse-linux-leap-155-x86_64-plasma-kde][openSUSE Linux Leap 15.5 x86_64 Plasma KDE]]
    - [[#random-linux-commands-flag-notes][Random Linux Commands Flag Notes]]
    - [[#random-linux-commands][Random Linux Commands]]
      - [[#trash-cli-commands][Trash-cli commands]]
      - [[#other-random-opensuse-links][Other Random openSUSE Links]]
    - [[#linux-distributions][Linux Distributions]]
    - [[#apps][Apps]]
    - [[#configurations-and-tweaks][Configurations and Tweaks]]
      - [[#alacritty][Alacritty]]
        - [[#main-configuration-from-here][Main Configuration From Here]]
        - [[#other-interesting-configurations][Other Interesting Configurations]]
    - [[#emacs-m-x-commands-i-randomly-use][Emacs M-x Commands I randomly use]]
    - [[#greader-notes][Greader Notes]]
      - [[#my-greader-workflow-in-detail][My Greader Workflow In Detail]]
  - [[#newsboat-configuration-and-my-youtube-playlist-watch-list][Newsboat Configuration and My Youtube Playlist Watch list]]
    - [[#config-file][config file]]
    - [[#urls][urls]]
  - [[#additional-links][Additional Links]]
  - [[#additional-configuration-file-notes][Additional Configuration File Notes]]
    - [[#dot-distroboxrc-file][dot distroboxrc file]]
    - [[#kitty-general-notes][kitty general notes]]
    - [[#mailcap-mailcap-for-use-with-alot-that-works-with-notmuch][mailcap .mailcap (for use with alot that works with notmuch)]]
      - [[#alot-example-command][alot example command]]
      - [[#reference-links-for-searching-notmuch][reference links for searching notmuch]]
      - [[#alot-config-theme][alot config theme]]
      - [[#alot-config][alot config]]
    - [[#mailcap-mailcap-for-use-with-notmuch-inside-of-emacs][mailcap .mailcap (for use with notmuch inside of emacs)]]
    - [[#notmuch-config-notmuch-config][Notmuch config .notmuch-config]]
    - [[#mbsyncrc-mbsyncrc][mbsyncrc .mbsyncrc]]
    - [[#git-config-gitconfig][git config .gitconfig]]
    - [[#authinfo][.authinfo]]

** Linux Notes / Thoughts
*** Fedora Silverblue and bluefin customized version of Fedora Silverblue, plus Fedora Kinoite and Aurora customized version of Fedora Kinoite
- [[https://docs.fedoraproject.org/en-US/quick-docs/fonts/][Adding New Fonts in Fedora]]
- [[https://docs.fedoraproject.org/en-US/fedora/latest/][Fedora Linux User Documentation]]
- [[https://docs.fedoraproject.org/en-US/quick-docs/][Fedora Quick Docs]]
- [[https://docs.fedoraproject.org/en-US/fedora-silverblue/][Fedora Silverblue User Guide]]
- [[https://universal-blue.discourse.group/t/gui-install-which-order/2018/9][GUI install, which order?]]
- [[https://universal-blue.discourse.group/docs?topic=41][Introduction to Bluefin]]
- [[https://projectbluefin.io/][Project Bluefin home]]
- [[https://docs.fedoraproject.org/en-US/docs/][User Documentation - Fedora Linux]]
- [[https://universal-blue.discourse.group/docs][Welcome to Universal Blue General Documentation]]
- [[https://getaurora.dev/][Get Aurora home]]
- [[https://fedoraproject.org/atomic-desktops/kinoite/][Fedora Kinoite]]
#+begin_example
-$ cat ~/.distroboxrc
/home/linuxbrew/.linuxbrew/opt/isync/bin/mbsync -a
aspell dicts - lists dictionaries installed - en_US worked in emacs
brew install aspell
brew install aspell
brew install detox
brew install espeak-ng
brew install gh
brew install git
brew install hyfetch
brew install isync
brew install newsboat
brew services start isync
cd /usr/bin/
distrobox enter ubuntu_box_22_04_new_2
sudo apt-get update
sudo apt-get install -y xfce4 xfce4-goodies
cd ~/projects  # or any directory you prefer
sudo apt-get update
$ apt-cache show emacs | grep Version
Version: 1:27.1+1-3ubuntu3
Version: 1:26.3+1-1ubuntu2
https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
git clone https://git.savannah.gnu.org/git/emacs.git
apt-get update
apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
nvim /etc/apt/sources.list
newer ubuntu location:
nvim # Ubuntu sources have moved to /etc/apt/sources.list.d/ubuntu.sources
Types: deb deb-src
URIs: http://us.archive.ubuntu.com/ubuntu/
Suites: noble noble-updates noble-backports
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
Types: deb deb-src
URIs: http://security.ubuntu.com/ubuntu/
Suites: noble-security
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
add-apt-repository ppa:ubuntu-toolchain-r/ppa
apt-get update
apt-get install gcc-10 libgccjit0 libgccjit-10-dev
apt-get build-dep emacs
apt-get install libjansson4 libjansson-dev
export CC="gcc-10"
./configure --prefix=$HOME/.local --without-compress-install --with-native-compilation
git clone -b master git://git.sv.gnu.org/emacs.git
git clone https://github.com/emacs-mirror/emacs.git
./autogen.sh
./configure --help
When installing software from source on Fedora Silverblue, or any other
immutable system like it, you might prefer to install to a different prefix to
avoid potential issues with the system's default configuration and to keep the
system directories clean. The default installation prefix (/usr/local) is
generally fine for most systems, but on Fedora Silverblue, you might want to use
a user-specific directory or an alternative location that doesn't interfere with
the system-managed directories. A common alternative is to use $HOME/.local or
/opt/emacs. Here’s how you can specify an alternative prefix during the
./configure step: ./configure --prefix=$HOME/.local
make
sudo make install
distrobox enter fedora_box_39
dnf group list -v --available | grep desktop
sudo dnf update
sudo dnf groupinstall "MATE Desktop" "MATE Applications"
sudo systemctl enable lightdm
sudo systemctl set-default graphical.target
sudo reboot
sudo dnf check-update
sudo dnf install python-pip
dnf search fonts
fc-match Font Name
flatpak install
flatpak list
flatpak update
gh auth
gh auth login
gh auth setup-git
gh auth status
git config --global user.email "david.rrrrrr@yandex.com"
git config --global user.name "David R Rrrrr"
homebrew is for CLI apps. examples: neovim, dysk, gh, glances, grype, helix,
micro, ollama, spf, ranger, ripgrep, and yt-dlp.
hyfetch - prints system information in nice format for screenshots
nano ~/.gitconfig
rpm-ostree install htop (do not install software this way)
rpm-ostree status
rpm-ostree upgrade
sudo apt install xfce4 xfce4-goodies
sudo dnf install -y bat
sudo dnf install -y dua-cli
sudo dnf install -y eza
sudo dnf install -y feh
sudo dnf install -y htop
sudo dnf install -y tldr
sudo dnf install -y tmux
sudo dnf install -y tree
sudo dnf install -y which
sudo dnf install ./VMware-Horizon-Client-2312.1-8.12.1-23543969.x64.rpm
sudo dnf install ./google-chrome-stable_current_x86_64.rpm
sudo dnf install ./microsoft-edge-stable-125.0.2535.79-1.x86_64.rpm
sudo dnf install @xfce-desktop-environment
sudo dnf install aspell
sudo dnf install aspell-en
sudo dnf install emacs
sudo dnf install espeak-ng
sudo dnf install libreoffice-opensymbol-fonts
sudo dnf install python3 - this was already installed
sudo dnf update
sudo fc-cache -fv
sudo ln -s /usr/bin/espeak-ng espeak
sudo ostree admin status
sudo rpm-ostree status
sudo rpm-ostree update
sudo systemctl status
sudo unzip -d . ~/Downloads/FontArchive.zip
systemctl reboot
ubuntu-family-fonts - these are preinstalled do not need to install them
xhost +si:localuser:$USER >/dev/null
mkdir -p ~/.local/share/fonts
mv /path/to/your/downloaded/font.ttf ~/.local/share/fonts/
or you can do .fonts folder instead if preferred
mkdir -p ~/.fonts
mv ~/Downloads/<your-font-file.ttf> ~/.fonts/
fc-cache -fv
fc-list | grep -i <partial-font-name>
# Aliases to use nvim instead of vi or vim
alias vi='nvim'
alias vim='nvim'
distrobox create --init --image docker.io/library/archlinux:latest --name arch_box_latest --pre-init-hooks "pacman -Syu --noconfirm"
distrobox enter arch_box_latest
sudo pacman -S  mate mate-extra (file manager name caja)
sudo pacman -S xfce4 xfce4-goodies
https://wiki.archlinux.org/title/MATE
sudo pacman -Syu - update system
to fix error:
packages kicking back the 'signature from  "so-and-so <some@email.com>" is unknown trust
https://forum.artixlinux.org/index.php/topic,4912.0.html
ok I fixed it. Followed instructions here: https://bbs.archlinux.org/viewtopic.php?id=201776 and here: https://wiki.gentoo.org/wiki/Ntp

Not sure if these steps aren't redundant but:

# sync time with a gentoo server
ntpdate -b -u 0.gentoo.pool.ntp.org

# start some time sync service, why not?
rc-service ntp-client start

# nuke pacman master key
(*) sudo rm -fr /etc/pacman.d/gnupg

# create pacman master key
(*) sudo pacman-key --init

# reload keys from keyring resources
(*) pacman-key --populate
other notes:
sudo rm -r /etc/pacman.d/gnupg
sudo pacman -Sy gnupg archlinux-keyring
sudo pacman-key --init
sudo pacman-key --populate archlinux
sudo pacman-key --refresh-keys
sudo pacman -Sc
You can try to reinstall the key using sudo pacman -S archlinux-keyring  After reinstalling it you can try to refresh the key using sudo pacman-key --refresh-keys.

If above solutions don't work you can manually trust the key with the following command:

sudo pacman-key --lsign-key tpkessler@archlinux.org
distrobox create --init --image docker.io/library/ubuntu:22.04 --name ubuntu_box_22_04_new_2 --pre-init-hooks "apt-get update && apt-get upgrade -y" --additional-packages "systemd"
exit
distrobox rm fedora_box_39
distrobox create --init --image quay.io/fedora/fedora:39 --name fedora_box_39 --pre-init-hooks "dnf update -y" --additional-packages "systemd"
https://distrobox.it/useful_tips/#resolve-error-cannot-open-display-0
Resolve “Error cannot open display: :0”
If your container is not able to connect to your host xserver, make sure to install xhost on the host machine and run xhost +si:localuser:$USER. If you wish to enable this functionality on future reboots add the above command to your ~/.distroboxrc
-$ cat ~/.distroboxrc
xhost +si:localuser:$USER >/dev/null
sudo pacman -Rs php - remove a package (manually delete config files left behind)
sudo pacman -Ss php - search for package
sudo pacman -Qs php - search for an already installed package
sudo pacman -Qm php - search for an already installed package that is from outside of the offical repositories like the AUR
https://aur.archlinux.org
sudo pacman -S --needed base-devel
sudo pacman -S git
git clone <url>
git clone https://github.com/Jguer/yay.git
yay.git
cd into directory
makepkg -si
sudo pacman -U yay-ver.pkg.tar.zst
yay --version
yay -Syu - run update with packages installed from AUR
https://github.com/Jguer/yay
First Use
Development packages upgrade

    Use yay -Y --gendb to generate a development package database for *-git packages that were installed without yay. This command should only be run once.

    yay -Syu --devel will then check for development package updates

    Use yay -Y --devel --save to make development package updates permanently enabled (yay and yay -Syu will then always check dev packages)
check latest version of google chrome using this command
curl -sSf https://dl.google.com/linux/chrome/deb/dists/stable/main/binary-amd64/Packages | \
     grep -A1 "Package: google-chrome-stable" | \
     awk '/Version/{print $2}' | \
     cut -d '-' -f1
from: https://aur.archlinux.org/packages/google-chrome
yay -S google-chrome
yay -R google-chrome
yay -Rns google-chrome
==> NOTE: Custom flags should be put directly in: ~/.config/chrome-flags.conf
==> NOTE: The launcher is called: 'google-chrome-stable'
yay -S brave-bin
Flatpak
Brave is available as a Flatpak package from Flathub. While it is maintained by Brave Software, it is not yet working as well as our native packages. We currently recommend that users who are able to use our official package repositories do so instead of using the Flatpak.
brave-bin
https://cli.github.com/
https://github.com/cli/cli#installation
sudo pacman -S github-cli
sudo pacman -S aspell
sudo pacman -S aspell-en
sudo pacman -S espeak-ng
detox install for cleaning up filenames
added notes on this:
sudo pacman -S --needed base-devel gcc git mingw-w64-x86_64-toolchain
sudo pacman -Ss mingw
sudo pacman -Ss mingw | grep -i 'tool'
sudo pacman -Ss mingw-w64-binutils
sudo pacman -S mingw-w64-binutils
sudo pacman -S mingw-w64-gcc
end added notes
pacman -S --needed base-devel gcc git mingw-w64-x86_64-toolchain
# install command detox for fixing filenames https://github.com/dharple/detox
git clone -b main https://github.com/dharple/detox.git
cd detox
autoreconf --install
./configure
make
sudo make install
sudo pacman -S isync #mbsync
git clone https://git.savannah.gnu.org/git/emacs.git
sudo pacman -Syu base-devel git libjpeg-turbo libpng libtiff giflib gnutls jansson libxml2 libxpm libxaw librsvg gcc cmake
sudo pacman -S libgccjit
# Configure the build
./autogen.sh
./configure --prefix=/home/david/.local --without-compress-install --with-native-compilation --with-mailutils
# Build and install
make
sudo make install
sudo pacman -S meson
sudo pacman -S cmake
sudo pacman -S gmime3
sudo pacman -S xapian-core
yay -S cld2-git
git clone https://github.com/djcb/mu.git
./autogen.sh
make
sudo make install
notmuch
sudo pacman -S notmuch
dependencies for arch for wezterm
https://github.com/wez/wezterm/blob/main/get-deps
arch_deps() {
  PACMAN="$SUDO pacman"
  $PACMAN -S --noconfirm --needed \
    'base-devel' \
    'cargo' \
    'cmake' \
    'fontconfig' \
    'git' \
    'hicolor-icon-theme' \
    'libx11' \
    'libxkbcommon-x11' \
    'pkgconf' \
    'python3' \
    'wayland' \
    'xcb-util' \
    'xcb-util-image' \
    'xcb-util-keysyms' \
    'xcb-util-wm'

  if test_flag; then
    $PACMAN -S --noconfirm --needed \
      'openssh'
  fi
}
https://github.com/wez/wezterm
https://wezfurlong.org/wezterm/installation
User facing docs and guide at: https://wezfurlong.org/wezterm/
sudo pacman -S wezterm
Go ahead and install rust to give you the cargo option and some additional neovim compatibility
https://www.rust-lang.org/tools/install
sudo pacman -S neovim
lazyvim
live grep: ripgrep
If you're a Rust programmer, ripgrep can be installed with cargo.

    Note that the minimum supported version of Rust for ripgrep is 1.72.0, although ripgrep may work with older versions.
    Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run strip on the binary.

$ cargo install ripgrep

Alternatively, one can use cargo binstall to install a ripgrep binary directly from GitHub:

$ cargo binstall ripgrep
https://github.com/BurntSushi/ripgrep?tab=readme-ov-file#installation
find files: fd
https://github.com/sharkdp/fd
From source
With Rust's package manager cargo, you can install fd via:
cargo install fd-find
sudo pacman -S the_silver_searcher
possible problem, this is not updated anymore - you can use it with vim:
Editor Integration
Vim
You can use Ag with ack.vim by adding the following line to your .vimrc:
let g:ackprg = 'ag --nogroup --nocolor --column'
or:
let g:ackprg = 'ag --vimgrep'
Which has the same effect but will report every match on the line.
Emacs
You can use ag.el as an Emacs front-end to Ag. See also: helm-ag.
Note that rust version 1.77.2 or later is required.
Development
git clone https://github.com/sharkdp/fd

# Build
cd fd
cargo build

# Run unit tests and integration tests
cargo test

# Install
cargo install --path .
pacman -S fd
lazygit requirements
a terminal that support true color and undercurl:
    kitty (Linux & Macos)
    wezterm (Linux, Macos & Windows)
    alacritty (Linux, Macos & Windows)
    iterm2 (Macos)
# required
mv ~/.config/nvim{,.bak}

# optional but recommended
mv ~/.local/share/nvim{,.bak}
mv ~/.local/state/nvim{,.bak}
mv ~/.cache/nvim{,.bak}
git clone https://github.com/LazyVim/starter ~/.config/nvim
rm -rf ~/.config/nvim/.git
nvim
chat with ChatGPT
my question: if I want neovim and vim on the same system, where can I put my vim config for original vim where neovim won't look for it
answer from ChatGPT:
To have both Vim and Neovim on the same system with separate configurations, you can place your Vim configuration in the default location (`~/.vimrc` and `~/.vim/`) and Neovim will not use these files by default. Neovim uses a different location for its configuration files (`~/.config/nvim/init.vim` or `~/.config/nvim` for the directory). Here's how you can set it up:

### Vim Configuration
1. Place your Vim configuration in `~/.vimrc`.
2. Put any Vim-specific configuration files or plugins in `~/.vim/`.

### Neovim Configuration
1. Place your Neovim configuration in `~/.config/nvim/init.vim`.
2. Put any Neovim-specific configuration files or plugins in `~/.config/nvim/`.

### Example Setup

- **Vim**
  - Configuration file: `~/.vimrc`
  - Directory for plugins and other configurations: `~/.vim/`

- **Neovim**
  - Configuration file: `~/.config/nvim/init.vim`
  - Directory for plugins and other configurations: `~/.config/nvim/`

### Sample Directories and Files

#### Vim
```plaintext
~/.vimrc
~/.vim/
  ├── autoload/
  ├── colors/
  ├── plugin/
  └── ...
```

#### Neovim
```plaintext
~/.config/nvim/init.vim
~/.config/nvim/
  ├── lua/
  ├── plugin/
  └── ...
```

By keeping your Vim configuration files in `~/.vimrc` and `~/.vim/`, and your Neovim configuration files in `~/.config/nvim/init.vim` and `~/.config/nvim/`, you ensure that each editor uses its respective configuration files without conflict.
source: https://sw.kovidgoyal.net/kitty/faq/
Using a color theme with a background color does not work well in vim?
Sadly, vim has very poor out-of-the-box detection for modern terminal features. Furthermore, it recently broke detection even more. It kind of, but not really, supports terminfo, except it overrides it with its own hard-coded values when it feels like it. Worst of all, it has no ability to detect modern features not present in terminfo, at all, even security sensitive ones like bracketed paste.

Thankfully, probably as a consequence of this lack of detection, vim allows users to configure these low level details. So, to make vim work well with any modern terminal, including kitty, add the following to your ~/.vimrc.

" Mouse support
set mouse=a
set ttymouse=sgr
set balloonevalterm
" Styled and colored underline support
let &t_AU = "\e[58:5:%dm"
let &t_8u = "\e[58:2:%lu:%lu:%lum"
let &t_Us = "\e[4:2m"
let &t_Cs = "\e[4:3m"
let &t_ds = "\e[4:4m"
let &t_Ds = "\e[4:5m"
let &t_Ce = "\e[4:0m"
" Strikethrough
let &t_Ts = "\e[9m"
let &t_Te = "\e[29m"
" Truecolor support
let &t_8f = "\e[38:2:%lu:%lu:%lum"
let &t_8b = "\e[48:2:%lu:%lu:%lum"
let &t_RF = "\e]10;?\e\\"
let &t_RB = "\e]11;?\e\\"
" Bracketed paste
let &t_BE = "\e[?2004h"
let &t_BD = "\e[?2004l"
let &t_PS = "\e[200~"
let &t_PE = "\e[201~"
" Cursor control
let &t_RC = "\e[?12$p"
let &t_SH = "\e[%d q"
let &t_RS = "\eP$q q\e\\"
let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[1 q"
let &t_VS = "\e[?12l"
" Focus tracking
let &t_fe = "\e[?1004h"
let &t_fd = "\e[?1004l"
execute "set <FocusGained>=\<Esc>[I"
execute "set <FocusLost>=\<Esc>[O"
" Window title
let &t_ST = "\e[22;2t"
let &t_RT = "\e[23;2t"

" vim hardcodes background color erase even if the terminfo file does
" not contain bce. This causes incorrect background rendering when
" using a color theme with a background color in terminals such as
" kitty that do not support background color erase.
let &t_ut=''
These settings must be placed before setting the colorscheme. It is also important that the value of the vim term variable is not changed after these settings.
source: https://sw.kovidgoyal.net/kitty/faq/
I am using tmux and have a problem
First, terminal multiplexers are a bad idea, do not use them, if at all possible. kitty contains features that do all of what tmux does, but better, with the exception of remote persistence (#391). If you still want to use tmux, read on.

Using ancient versions of tmux such as 1.8 will cause gibberish on screen when pressing keys (#3541).

If you are using tmux with multiple terminals or you start it under one terminal and then switch to another and these terminals have different TERM variables, tmux will break. You will need to restart it as tmux does not support multiple terminfo definitions.

Displaying images while inside programs such as nvim or ranger may not work depending on whether those programs have adopted support for the unicode placeholders workaround that kitty created for tmux refusing to support images.

If you use any of the advanced features that kitty has innovated, such as styled underlines, desktop notifications, extended keyboard support, file transfer, the ssh kitten, shell integration etc. they may or may not work, depending on the whims of tmux’s maintainer, your version of tmux, etc.
sudo pacman -S python-pip
sudo pacman -S python-virtualenv
python3.12 -m venv ./myenv
source ./myenv/bin/activate
pip install --upgrade pip setuptools wheel
pip install pynvim
deactivate
sudo pacman -S python-pynvim
sudo pacman -S elinks
sudo pacman -S alacritty
sudo pacman -S kitty
sudo pacman -S fzf
Optional dependencies for fzf
    fish: fish keybindings
    tmux: fzf-tmux script for launching fzf in a tmux pane [installed]
    vim: plugin
    zsh: zsh keybindings
:: Running post-transaction hooks...
(1/1) Arming ConditionNeedsUpdate...
sudo pacman -S bat
sudo pacman -S gvim
sudo pacman -Syu
sudo pacman -S ffmpeg
sudo pacman -S wl-clipboard
yay -S vieb-bin (or yay -S vieb-git)
sudo pacman -S eza
sudo pacman -S zoxide
do not use: sudo pacman -S tldr (this gives and error so install directly python pip)
modern tools for command line from this video:
https://www.youtube.com/watch?v=H8-rLe6fXYw
Atuin: https://atuin.sh/
Bat: https://github.com/sharkdp/bat
direnv: https://direnv.net/
eza: https://github.com/eza-community/eza
fd: https://github.com/sharkdp/fd
gh: https://cli.github.com/
glab: https://docs.gitlab.com/ee/editor_ext...
ripgrep: https://github.com/BurntSushi/ripgrep
ugrep: https://github.com/Genivia/ugrep
yq: https://github.com/mikefarah/yq
Zoxide: https://github.com/ajeetdsouza/zoxide
default aliases from here:
https://github.com/ublue-os/bluefin/blob/main/system_files/shared/usr/share/ublue-os/bluefin-cli/bling.sh
#!/usr/bin/env sh

# ls aliases
if [ "$(command -v eza)" ]; then
    alias ll='eza -l --icons=auto --group-directories-first'
    alias l.='eza -d .*'
    alias ls='eza'
    alias l1='eza -1'
fi

# ugrep for grep
if [ "$(command -v ug)" ]; then
    alias grep='ug'
    alias egrep='ug -E'
    alias fgrep='ug -F'
    alias xzgrep='ug -z'
    alias xzegrep='ug -zE'
    alias xzfgrep='ug -zF'
fi

if [ "$(basename "$SHELL")" = "bash" ]; then
    #shellcheck disable=SC1091
    . /usr/share/bash-prexec
    [ "$(command -v atuin)" ] && eval "$(atuin init bash)"
    [ "$(command -v zoxide)" ] && eval "$(zoxide init bash)"
elif [ "$(basename "$SHELL")" = "zsh" ]; then
    [ "$(command -v atuin)" ] && eval "$(atuin init zsh)"
    [ "$(command -v zoxide)" ] && eval "$(zoxide init zsh)"
fi
default aliases running alias command inn terminal in bluefin
alias egrep='grep -E --color=auto'
alias fgrep='grep -F --color=auto'
alias grep='grep --color=auto'
alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias which='(alias; declare -f) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot'
alias xzegrep='xzegrep --color=auto'
alias xzfgrep='xzfgrep --color=auto'
alias xzgrep='xzgrep --color=auto'
alias zegrep='zegrep --color=auto'
alias zfgrep='zfgrep --color=auto'
alias zgrep='zgrep --color=auto'
results of running printenv | sort -i > printenv_results.txt
BREW_BASH_COMPLETION=1
COLORTERM=truecolor
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
DEBUGINFOD_URLS=https://debuginfod.fedoraproject.org/
DESKTOP_SESSION=gnome
DISPLAY=:0
EDITOR=vim
GDM_LANG=en_US.UTF-8
GDMSESSION=gnome
GNOME_SETUP_DISPLAY=:1
HISTCONTROL=ignoredups
HISTSIZE=1000
HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar
HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew
HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew
HOME=/var/home/david
HOSTNAME=fedora-laptop
INFOPATH=/home/linuxbrew/.linuxbrew/share/info:
INVOCATION_ID=f0a787312e0742d08f1ba3e3e06c6f0f
JOURNAL_STREAM=8:5184485
LANG=en_US.UTF-8
LESSOPEN=||/usr/bin/lesspipe.sh %s
LOGNAME=david
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;37;41:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.m4a=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.oga=01;36:*.opus=01;36:*.spx=01;36:*.xspf=01;36:*~=00;90:*#=00;90:*.bak=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.swp=00;90:*.tmp=00;90:*.dpkg-dist=00;90:*.dpkg-old=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:
MAIL=/var/spool/mail/david
MANAGERPID=5694
MEMORY_PRESSURE_WATCH=/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/app.slice/dbus-:1.2-org.gnome.Ptyxis@5.service/memory.pressure
MEMORY_PRESSURE_WRITE=c29tZSAyMDAwMDAgMjAwMDAwMAA=
MUTTER_DEBUG_FORCE_KMS_MODE=simple
MUTTER_DEBUG_KMS_THREAD_TYPE=user
PATH=/var/home/david/.local/kitty.app/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/var/home/david/.local/kitty.app/bin:/var/home/david/.local/bin:/var/home/david/bin:/usr/lib64/ccache:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin
PTYXIS_PROFILE=2871e8027773ae74d6c87a5f659bbc74
PTYXIS_VERSION=47.alpha
PWD=/var/home/david
QT_IM_MODULE=ibus
SESSION_MANAGER=local/unix:@/tmp/.ICE-unix/6042,unix/unix:/tmp/.ICE-unix/6042
SHELL=/bin/bash
SHLVL=1
SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
STARSHIP_SESSION_KEY=2693514851785816
STARSHIP_SHELL=bash
SUDO_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
SUDO_EDITOR=vim
SYSTEMD_EXEC_PID=617942
TERM=xterm-256color
USER=david
USERNAME=david
_=/usr/bin/printenv
VISUAL=vim
VTE_VERSION=7601
WAYLAND_DISPLAY=wayland-0
XAUTHORITY=/run/user/1000/.mutter-Xwaylandauth.E0QVR2
XDG_CURRENT_DESKTOP=GNOME
XDG_DATA_DIRS=/var/home/david/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/
XDG_MENU_PREFIX=gnome-
XDG_RUNTIME_DIR=/run/user/1000
XDG_SESSION_CLASS=user
XDG_SESSION_DESKTOP=gnome
XDG_SESSION_TYPE=wayland
XMODIFIERS=@im=ibus
fix for DISPLAY issue distrobox arch linux
It looks like there are still issues with the DISPLAY variable and xhost authorization. Let's take a few additional steps to resolve this:

1. **Ensure DISPLAY Variable is Correct:**
   The DISPLAY variable might not always be `:0`. You should check what the DISPLAY variable is set to on your host system and use that value.

   On your host system (outside the container):

   ```sh
   echo $DISPLAY
   ```

   Let's assume the output is `:0`. If it's different, replace `:0` with the correct value in the steps below.

2. **Pass DISPLAY Variable to Container:**
   When starting the container, you can pass the DISPLAY variable from the host to the container.

   ```sh
   distrobox-enter -n arch_box -- env DISPLAY=$DISPLAY xhost +local:$(whoami)
   ```

   If that works, you can add the DISPLAY export and xhost command to your `.distroboxrc`.

3. **Update `.distroboxrc` File:**
   Update your `.distroboxrc` to ensure the DISPLAY variable is set correctly:

   ```sh
   echo 'export DISPLAY=:0' >> ~/.distroboxrc
   echo 'xhost +local:$USER' >> ~/.distroboxrc
   ```

   Replace `:0` with the correct value if it's different.

4. **Try Running GUI Application:**
   Now, try running the Brave browser again:

   ```sh
   distrobox-enter -n arch_box
   brave &
   ```

If these steps still don't resolve the issue, here is an alternative approach using SSH with X11 forwarding:

### Alternative Approach: SSH with X11 Forwarding

1. **Enable X11 Forwarding in SSH:**
   Ensure your SSH server is configured to allow X11 forwarding. In your `sshd_config` file (usually located at `/etc/ssh/sshd_config`), ensure the following lines are present and not commented out:

   ```
   X11Forwarding yes
   X11DisplayOffset 10
   X11UseLocalhost yes
   ```

   Restart the SSH service if you made changes:

   ```sh
   sudo systemctl restart sshd
   ```

2. **Connect with X11 Forwarding:**
   Connect to your host system with X11 forwarding enabled:

   ```sh
   ssh -X user@host
   ```

3. **Set DISPLAY Variable:**
   Set the DISPLAY variable in your Distrobox container:

   ```sh
   export DISPLAY=$DISPLAY
   ```

4. **Run GUI Application:**
   Now, try running the Brave browser:

   ```sh
   brave &
   ```

These steps should help you resolve the issue with DISPLAY and xhost in your Distrobox container.
The error indicates that the DISPLAY environment variable is not set within your Distrobox container, and as a result, applications like Brave cannot connect to the X server. Your `.distroboxrc` file should theoretically set this up, but let's ensure everything is correctly configured.

Here are a few steps to troubleshoot and potentially fix the issue:

1. **Verify `.distroboxrc` Execution:**
   Ensure that the `.distroboxrc` script is being executed properly when you start your container.

   ```sh
   distrobox-enter -n arch_box -- echo "source ~/.distroboxrc"
   ```

2. **Set DISPLAY Variable Manually:**
   Try setting the DISPLAY variable manually in the container session.

   ```sh
   export DISPLAY=:0
   xhost +local:$(whoami)
   brave &
   ```

3. **Install `xhost` Package:**
   Ensure the `xorg-xhost` package is installed in your Arch Linux container.

   ```sh
   sudo pacman -S xorg-xhost
   ```

4. **Check Host X Server:**
   Make sure your host X server is running and accessible. You can verify this by running an X application directly on the host.

   ```sh
   xclock
   ```

5. **Distrobox Environment Variables:**
   Confirm that the necessary environment variables are set when entering the Distrobox container.

   ```sh
   distrobox-enter -n arch_box -- printenv | grep DISPLAY
   ```

   If `DISPLAY` is not set, you can add it to your `.distroboxrc` file:

   ```sh
   echo 'export DISPLAY=:0' >> ~/.distroboxrc
   echo 'xhost +local:$USER' >> ~/.distroboxrc
   ```

6. **Check X11 Forwarding:**
   If you are using SSH with X11 forwarding, ensure that the forwarding is properly configured.

   ```sh
   ssh -X user@host
   ```

### Example `.distroboxrc`

Here is a comprehensive example of what your `.distroboxrc` might look like:

```sh
# Ensure DISPLAY is set
export DISPLAY=:0
# Allow local user to connect to X server
xhost +si:localuser:$USER >/dev/null
```

### Restart the Container

After making these changes, restart your Distrobox container to ensure all settings are applied:

```sh
distrobox-stop arch_box
distrobox-enter arch_box
```

After these steps, try running Brave again within your Distrobox container.
Haruna video player linux
https://apps.kde.org/haruna/
If you push s it takes a screenshot and labels that it came from haruna
brackets [ ] increase playback speed
clapper video player linux
https://github.com/Rafostar/clapper
powered by gstreamer
< > increase playback speed
yay -S vieb-bin
notmuch search from:name
google-chrome > /dev/null 2>&1 &
============================================================
python3.12 -m pip install exifread
error: externally-managed-environment
× This environment is externally managed
╰─> To install Python packages system-wide, try brew install
xyz, where xyz is the package you are trying to
install.

If you wish to install a Python library that isn't in Homebrew,
use a virtual environment:

python3 -m venv path/to/venv
source path/to/venv/bin/activate
python3 -m pip install xyz

If you wish to install a Python application that isn't in Homebrew,
it may be easiest to use 'pipx install xyz', which will manage a
virtual environment for you. You can install pipx with

brew install pipx

You may restore the old behavior of pip by passing
the '--break-system-packages' flag to pip, or by adding
'break-system-packages = true' to your pip.conf file. The latter
will permanently disable this error.

If you disable this error, we STRONGLY recommend that you additionally
pass the '--user' flag to pip, or set 'user = true' in your pip.conf
file. Failure to do this can result in a broken Homebrew installation.

Read more about this behavior here: <https://peps.python.org/pep-0668/>
#+end_example
*** doom emacs
- before you start install these items
- git
- ripgrep
- Manjaro
- sudo pacman -S ripgrep
- should already be included in openSUSE or
- sudo zypper install ripgrep
- fd
- Manjaro
- pacman -S fd
- openSUSE
- because fd is out of date in the openSUSE Leap I am installing with cargo
  which is part of rust instead
- https://www.rust-lang.org/tools/install
- https://doc.rust-lang.org/book/ch01-01-installation.html
- https://learning-rust.github.io/docs/installation/
- https://en.opensuse.org/Rust - better to not use this and instead use the
  above, but it is another option
- cargo install fd-find
- snap install emacs --classic
- Manjaro
- # required dependencies
- pacman -S git emacs ripgrep
- # optional dependencies
- pacman -S fd
- openSUSE
- zypper addrepo
  https://download.opensuse.org/repositories/editors/openSUSE_Leap_15.1/editors.repo
- zypper refresh
- zypper install emacs
- git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
- ~/.emacs.d/bin/doom install
- cd ~/.local/share/fonts/
- https://www.nerdfonts.com/font-downloads
- save UbuntuMono Nerd Font files to the above folder
- https://design.ubuntu.com/font
- save Ubuntu font files to the above folder
- sudo fc-cache -fv
- fc-list | grep -i 'ubuntu'
- M-x all-the-icons-install-fonts
*** Cheat Sheet Links
- https://wiki.manjaro.org/index.php/CheatSheet
- https://wiki.manjaro.org/index.php/Main_Page
- https://docs.manjaro.org/
- https://forum.manjaro.org/
- https://en.opensuse.org/SDB:Zypper_usage
-
  https://doc.opensuse.org/documentation/leap/reference/single-html/book-reference/index.html#sec-zypper
- https://doc.opensuse.org/
*** Manjaro Linux Plasma KDE
- open graphical pamac
  - official repositories
    - refresh mirrors list (or sudo pacman-mirrors --fasttrack)
- hamburger menu
  - preferences
    - enable aur support
- terminal
  - sudo pacman -Syyu
- open graphical pamac
- terminal
  - sudo pacman -S base-devel
  - sudo pacman -S yay
  - sudo pacman -S espeak-ng
  - sudo pacman -S texlive-core texlive-bin texlive-latexextra
    - this is for exporting to pdf from org mode emacs command pdflatex
    - alternative for larger install: sudo pacman -S texlive-most texlive-lang
      - note this is a large install
    - to find additional packages: pacman -Ss texlive
  - sudo pacman -S isync #mbsync
*** openSUSE Linux Leap 15.5 x86_64 Plasma KDE
- [[https://www.opensuse.org/#Leap][openSUSE Leap]]
- [[https://snapcraft.io/install/snap-store/opensuse][Install Snap on openSUSE]]
- [[https://flatpak.org/setup/openSUSE][Install Flatpak on openSUSE]]
- [[https://opensuse-guide.org/help.php][Unofficial guide - Appendix A: Help and Docs]]
- [[https://opensuse-guide.org/contribute.php][Unofficial guide - Appendix E: Getting Involved]]
- [[https://build.opensuse.org/][Build openSUSE.org]]
*** Random Linux Commands Flag Notes
grep [options] [pattern] [file or folder or .]
- I ignore binary files from search
- L files-without-match - just list filenames that do not contain matches
- i ignore-case
- l files-with-matches - just list filenames that contain matches
- r recursive
- v instead of returning matches return everything that does NOT match
  (invert-match)
detox
- detox -n or --dry-run to see what is going to do before running a command
- detox -rvn path/ then once you are sure changes are ok detox -rv path/
- n --dry-run does not change anything
- r recursive into subfolders (any folders starting with . such as .git and
  .cache are skipped by default)
- v be verbose about files being renamed
rsync
- a - archive mode - quick way to tell it you want recursion and preserve almost
  everything about the file properties permissions
- v - verbose
- h - output numbers in a human-readable format
- --delete (automatically calls --delete-during) - tells rsync to delete
  extraneous files - read the manual (man) page for this option as their are
  some complex nuances to it for difference scenarios, but for my backup to
  external hard drive use this is a good option
- --exclude - exclude something from being synced
#+begin_example
sudo dnf install kde-gtk-config
sudo dnf install vim-X11
sudo dnf remove nano-default-editor
sudo dnf install vim-default-editor
https://forums.fedoraforum.org/showthread.php?323000-Fedora-31-installing
Yes and no. There are package groups, installed with the dnf group
install "<package_name>" command.
Code:
$ sudo dnf group list hidden | grep Development
   Development and Creative Workstation
   C Development Tools and Libraries
   D Development Tools and Libraries
   Development Libraries
   Development Tools
   GNOME Software Development
   Java Development
   KDE Software Development
   KDE Frameworks 5 Software Development
   Legacy Software Development
   LibreOffice Development
   Perl Development
   RPM Development Tools
   X Software Development
   Xfce Software Development
You can preview what packages are included in a group. For example:
Code:
$ sudo dnf group info "C Development Tools and Libraries"
Last metadata expiration check: 0:10:20 ago on Fri 03 Jan 2020 09:14:21 AM EST.
Group: C Development Tools and Libraries
 Description: These tools include core development tools such as
automake, gcc and debuggers.
 Mandatory Packages:
   autoconf
   automake
   binutils
   bison
   flex
   gcc
   gcc-c++
   gdb
   glibc-devel
   libtool
   make
   pkgconf
   strace
 Default Packages:
   byacc
   ccache
   cscope
   ctags
   elfutils
   indent
   ltrace
   perf
   valgrind
 Optional Packages:
   ElectricFence
   astyle
   cbmc
   check
   cmake
   coan
   cproto
   insight
   nasm
   pscan
   python2-scons
   remake
   scorep
   splint
   trinity
   yasm
   zzuf
https://github.com/openssl/openssl/issues/13761
dnf install perl
#+end_example
*** Random Linux Commands
Here are a bunch of commands I have run recently just for future reference. I
may or may not have continued using some of these, but you have to sometimes
play around and try different options to find out what is helpful. Some of this
is general command line and some is openSUSE or Manjaro specific.
#+begin_example
In Vim, when you search for a term, you can use the `:noh` command to clear the highlighting, and then use the following steps to see how many results there are:

1. **Search for the term:**
   Use the `/` command followed by the term you want to search for, then press `Enter`. For example, to search for the term "example," you would type `/example` and press `Enter`.

2. **Count the matches:**
   After performing the search, use the following command to count the matches:
   ```vim
   :%s//&/gn
   ```
   - The `:%s` command performs a substitution over the entire file (`%`).
   - The `//&/` part means "substitute the search term (`//`) with itself (`&`) but don't change anything."
   - The `gn` flag at the end stands for "global" and "count matches only," which counts the number of matches without making any substitutions.

After running this command, Vim will display the number of matches found in the command-line area at the bottom.

For example, if you searched for the term "example" and ran `:%s//&/gn`, you might see something like:
```
8 matches on 8 lines
```
This indicates that there are 8 matches of the term "example" in your file.
cat /etc/os-release
sudo zypper refresh
# if you are running tumbleweed sudo zypper dup
# --allow-vendor-change dup stands for distribution upgrades whereas
# zypper up is for package updates
sudo zypper update
# command not found - it will tell you what to install to make a
# certain command available to you
cnf <command>
# compiling and linking applications needed for make, make install commands
sudo zypper install patterns-devel-base-devel_basis # minimal set of tools for
sudo apt install autoconf automake bison flex gcc make pkg-config
# install command detox for fixing filenames https://github.com/dharple/detox
mkdir ~/build
cd ~/build
wget
https://github.com/dharple/detox/releases/download/v2.0.0/detox-2.0.0.tar.gz
tar xzvf detox-2.0.0.tar.gz
cd detox-2.0.0
./configure
make
sudo sudo make install
# tool for hp printer
sudo zypper install hplip
sudo zypper install git-core
git --version
git config --global user.name "David R Rrrrr"
git config --global user.email "david.rrrrrr@yandex.com"
git config --global core.editor "vim"
git config --global user.name
git config --global user.email
git config --global core.editor
sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
sudo zypper refresh
sudo zypper install gh
gh auth login
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo zypper addrepo https://packages.microsoft.com/yumrepos/edge
microsoft-edge
sudo zypper refresh
sudo zypper install microsoft-edge-stable
# alternative method for obtaining edge below
sudo zypper install opi
opi msedge
# other interesting options for opi - brave, megasync, vivaldi, vscode,
yandex-browser
opi codecs
sudo zypper install fetchmsttfonts
sudo zypper install fira-code-fonts
sudo zypper install the_silver_searcher
sudo zypper install ripgrep
# to make sure there are no emacs files that need to be deleted before I
# install doom emacs
find ~ -type f \( -name ".emacs" -o -name ".emacs.el" -o -name "init.el" \)
-print
sudo zypper install pandoc
sudo zypper install isync # mbsync
sudo zypper install espeak-ng
sudo zypper install espeak-ng-compat
sudo zypper addrepo
https://download.opensuse.org/repositories/Emulators:/Wine/15.4/Emulators:Wine.repo
sudo zypper refresh
sudo zypper install wine-staging
wine --version
# adjust windows version to latest
winecfg
wine AdobeDNGConverter_x64_16_2_1.exe
sudo zypper install aspell
# adding tex support to a system is a substantial large install
# you could export the latex source and upload to a website like
# overleaf and have their system render the pdf from the latex source
# if you are doing a lot of updates it might be annoying to keep
# refreshing, but if you just do something occassionally it might be
# sufficent
sudo zypper install texlive texlive-pdflatex
pandoc -f markdown -t org -o note.org /tmp/md_note.md
python3.11 -m pip install exifread
python3.11 -m pip install hyfetch
python3.11 -m pip install trash-cli
sudo rsync -avh --delete <copy from path> <copy to path>
sudo rsync -avh --delete
/run/media/david/140a6cd2-c07c-4339-bb9a-c87b592bafe5/
/run/media/david/01d0e521-1a65-41ad-a1b2-e77f68c41894/
sudo rsync -avh --delete --exclude='.cache/' --exclude='*~' /home/david/ .
sudo rsync -avh --delete /var/mnt/140a6cd2-c07c-4339-bb9a-c87b592bafe5/{i,m}/
.
sudo mkdir /mnt/internal_data/
sudo blkid # find drive uuid
# edit /etc/fstab - man fstab for details if needed
# add line:
# openSUSE
UUID=140a6cd2-c07c-4339-bb9a-c87b592bafe5 /mnt/internal_data btrfs user 0 0
# Manjaro
UUID=140a6cd2-c07c-4339-bb9a-c87b592bafe5 /mnt/internal_data btrfs users 0 0
sudo snap install mpv
find /path/to/search -type d \( -iname "*elfeed*" -o -iname ".*elfeed*" \)
sudo rsync -avh /run/media/david/AmazonThumbDrive/reorganized_emails/
/home/david/Maildir/reorganized_emails/
ln -s /home/david/reorganized_emails /home/david/Maildir/reorganized_emails
awk '{for(i=1;i<=NF;i++){printf "%s%s",$i,(i%10==0? ".\n":" ")}}' input.txt >
output.txt
# https://photoqt.org/downpopupflatpak
# https://flathub.org/apps/org.photoqt.PhotoQt
flatpak install flathub org.photoqt.PhotoQt
# https://www.xnview.com/en/xnviewmp/
# https://flathub.org/apps/com.xnview.XnViewMP
flatpak update
sudo snap refresh
# iname is case insensitive (versus name)
find ~/ -iname "*vim*"
rsync -av --remove-source-files ~/Maildir/gmail/INBOX/
~/Maildir/reorganized_emails/
mv ~/Maildir/gmail/INBOX/* ~/Maildir/gmail/Trash/
mbsync -a
You can also update Ubuntu using the terminal.
Press CTRL+ALT+T to bring up a Terminal window (or click the terminal icon in the sidebar).
Type in:
sudo apt update
You will be prompted to enter your login password.
This will check for updates and tell you if there are any that need applying. To apply any updates, type:
sudo apt upgrade
Type Y, then press ENTER to confirm to finish the update process.
sudo apt update
sudo apt install python3.12-venv
sudo apt install python3.12-dev (I don't think I need this?)
python3.12 -m venv myenv
source myenv/bin/activate
deactivate
python -m ensurepip --upgrade
pip install pandas
wget -qO- https://omakub.org/install | bash
sudo apt install gnutls-bin (not confident I need this)
sudo apt-get install meson libgmime-3.0-dev libxapian-dev
cd projects/
git clone https://github.com/djcb/mu.git
./autogen.sh && make
sudo make install
git clone -b main https://github.com/dharple/detox.git
autoreconf --install
./configure
make
sudo make install
man detox
emacs
pacman to install libgccjit and mailutils (gnu)
./autogen.sh
./configure --without-compress-install --with-native-compilation --with-mailutils
make
sudo make install
for python
use pacman to install python-virtualenv
pamac install base-devel
sudo pacman -S github-cli
gh auth
gh auth login
gh auth setup-git
gh auth status
sudo pacman -Syu
sudo pacman -S base-devel git texinfo
sudo apt update
sudo apt upgrade
sudo apt install python3-pip
mkdir Projects-Python
cd Projects-Python/
sudo apt install python3-venv
sudo apt install python3.12-pip
python3.12 -m venv myenv
source myenv/bin/activate
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade setuptools wheel
sudo snap install hello-world
hello-world
sudo apt-get install -s ffmpeg (to see what version would be
installed) -s does a simulated install without actually installing
anything
[david@arch_box_latest applications]$ ls -la
total 4
drwxr-xr-x 1 david david  46 Jul  8 00:55 .
drwxr-xr-x 1 david david 672 Jul  8 00:50 ..
-rw-r--r-- 1 david david 357 Jul  7 01:07 arch_box_latest.desktop
[david@arch_box_latest applications]$ pwd
/var/home/david/.local/share/applications
[david@arch_box_latest applications]$ mv /var/home/david/.local/share/applications/arch_box_latest.desktop /var/home/david/.local/share/applications/arch_box_latest.desktop.bak
[david@arch_box_latest applications]$ ls
arch_box_latest.desktop.bak
[david@arch_box_latest applications]$
I had to remove extra emacs shortcuts from the above folder that were not needed and did not work after manually installing emacs
I was not sure if I needed the one so I renamed it, but I probably do not need it.
git config --global core.editor "nvim"
git config --global --get core.editor (should return nvim)
sudo pacman -S tmux
sudo pacman -S lazygit
mac os x brew install note for fzf
==> fzf
To set up shell integration, add this to your shell configuration file:
  # bash
  eval "$(fzf --bash)"
  # zsh
  source <(fzf --zsh)
  # fish
  fzf --fish | source
To use fzf in Vim, add the following line to your .vimrc:
  set rtp+=/opt/homebrew/opt/fzf
#+end_example
**** Trash-cli commands
- trash-put           trash files and directories.
- trash-empty         empty the trashcan(s).
- trash-list          list trashed files.
- trash-restore       restore a trashed file.
- trash-rm            remove individual files from the trashcan.
#+begin_example
  # add to .bashrc
  alias rm='echo "use trash-put or backslash rm to use rm normally"; false'
#+end_example
**** Other Random openSUSE Links
- [[https://en.opensuse.org/Additional_package_repositories]]
- [[https://www.techhut.tv/opensuse-5-things-you-must-do-after-installing/]]
*** Linux Distributions
We are lucky there are so many great distributions out there, here a few but
there are many more.
- [[https://fedoraproject.org/]]
- [[https://www.linuxmint.com/]]
- [[https://pop.system76.com/]]
- [[https://system76.com/]]
  - company sells computers with pop OS pre-installed
- [[https://ubuntu.com/]]
- [[https://manjaro.org/][https://Manjaro.org/]]
*** Apps
- Adobe DNG Converter (windows app run through emulation on wine)
  - [[https://helpx.adobe.com/camera-raw/using/adobe-dng-converter.html]]
  - [[https://helpx.adobe.com/camera-raw/digital-negative.html]]
  - [[https://www.adobe.com/creativecloud/file-types/image/raw/dng-file.html]]
- Alacritty terminal emulator
  - [[https://alacritty.org/]]
- Brave Browser
  - [[https://brave.com/linux/]]
- Emacs - installed from snap
  - [[https://snapcraft.io/emacs]]
- Espeak
  - installed from system package manager
- FD find entries on your file system
  - [[https://github.com/sharkdp/fd]]
  - installed from system package manager
- Handbrake
  - [[https://handbrake.fr/downloads.php]]
  - Flatpak - [[https://flathub.org/apps/fr.handbrake.ghb]]
- MEGA (online backup)
  - [[https://help.mega.io/installs-apps/desktop-syncing]]
    [[https://help.mega.io/installs-apps/desktop-syncing/linux]]
    [[https://mega.io/desktop#download]]
    [[https://mega.nz/linux/repo/]]
- Mbsync
  - installed from system package manager
  - called isync in package manager
- Microsoft Edge Browser
  - [[https://www.microsoft.com/en-us/edge/download?form=MA13FJ]]
- Neovim
  - [[https://github.com/neovim/neovim/blob/master/INSTALL.md]]
- Newsboat
  - installed from snap - [[https://snapcraft.io/newsboat]]
- Opera Browser
  - [[https://www.opera.com/download]]
  - RPM is hidden further down on page or can be installed from snap
  - [[https://snapcraft.io/opera]]
- Pandoc
  - [[https://pandoc.org/installing.html]]
  - installed from system package manager
- Ripgrep (rg)
  - Has some similarities to grep, but also includes its own defaults and
    optimizations that make it behave slightly differently in some cases.
  - [[https://github.com/BurntSushi/ripgrep]]
  - installed from system package manager
- The Silver Searcher (ag)
  - Behavior and syntax are very close to GNU grep.
  - [[https://github.com/ggreer/the_silver_searcher]]
- Vivaldi Browser
  - [[https://vivaldi.com/download/]]
  -
    [[https://help.vivaldi.com/desktop/install-update/manual-setup-vivaldi-linux-repositories/]]
- Wine (windows emulation)
  - [[https://wiki.winehq.org/Download]]
*** Configurations and Tweaks
**** Alacritty
***** Main Configuration From Here
- https://www.josean.com/posts/how-to-setup-alacritty-terminal
mkdir -p ~/.config/alacritty
nvim alacritty.toml
git clone https://github.com/alacritty/alacritty-theme themes
curl https://raw.githubusercontent.com/josean-dev/dev-environment-files/main/.config/alacritty/themes/themes/coolnight.toml --output ~/.config/alacritty/themes/themes/coolnight.toml
***** Other Interesting Configurations
- [[https://github.com/Widkidone/AlacrittyToml/blob/main/alacritty.toml]]
- [[https://github.com/sabinpocris/alacritty.toml/blob/main/alacritty.toml]]
- [[https://github.com/scalarwaves/dotfiles/blob/main/alacritty/alacritty.toml]]
#+begin_src toml
  import = [
    "~/.config/alacritty/themes/themes/gruvbox_material_hard_dark.toml"
      ]

  [env]
  TERM = "xterm-256color"

  [window]
  padding.x = 10
  padding.y = 10

  decorations = "Buttonless"

  opacity = 0.7
  blur = true

  option_as_alt = "Both"

  [font]
  normal.family = "CaskaydiaCove Nerd Font"

  size = 12
#+end_src
*** Emacs M-x Commands I randomly use
- auto-fill-mode - automatically inserts line lines at specified line width
- avy-copy-line
- avy-move-line
- buffer-menu
- capitalize-word
- check-parens
- dired
- display-fill-column-indicator-mode - shows vertical bar on the number of
  characters you have set for fill-column value
- eshell
- flush-lines (with parameter ^$) - deletes blank lines in highlighted region
- greader-mode
- ibuffer
- list-command-history (shows minibuffer history)
- manual-entry (shows manual page inside of emacs)
- narrow-to-region (widen to re-expand - this allows you to just work on a small
  part of your file without accidentally messing up something off screen)
- olivetti-mode
- org-insert-link
- org-lint
- org-mark-subtree
- org-narrow-to-block
- org-narrow-to-element
- org-narrow-to-subtree
- org-open-at-point - opens a link under the point (cursor) when on a link in
  org mode
- org-sort
- org-sort-list
- org-toggle-narrow-to-subtree
- query-replace-regexp
- set-variable (fill-column for location of text width to adjust to 80
  characters or whatever)
- sort-columns
- sort-fields
- sort-lines
- sort-numeric-fields
- sort-paragraphs
- treemacs-edit-workspaces
- turn-off-evil-mode
- turn-on-evil-mode
- visual-line-mode
- wakib-keys
- whitespace-cleanup
- whitespace-mode
- yank-from-kill-ring
*** Greader Notes
First you have to install espeak on your system. Then install greader.
**** My Greader Workflow In Detail
Open Emacs then open the text file I want to have read to me with the robotic
voice. Note the reading speed of the robot is set in your Emacs configuration
file with variable: ~(setq greader-espeak-rate 300)~. You vary the number to
whatever suites your preferred speaking pace. I would keep in mind that since it
is reading text it is not perfectly comparable to the rate that people talk or
what speed you would normally read. So just try different speeds until you find
what works best for you.

A customization I like to use it to toggle olivetti-mode (or some other zen type
mode) before reading. =M-x= type =greader-mode ENTER=. To have it start reading
you do =C-r SPACE= and to have it stop you do =SPACE=.
** Newsboat Configuration and My Youtube Playlist Watch list
*** config file
#+begin_example
  browser "xdg-open '%u'
#+end_example
*** urls
#+begin_example
"query:Unread Articles:unread = \"yes\""
"query:Read Articles:unread = \"no\""
"https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg" ;DistroTube
#+end_example
** Additional Links
- TMUX: [[https://www.youtube.com/watch?v=U-omALWIBos][How I Use Tmux With Neovim For An Awesome Dev Workflow On My Mac]]
- TMUX: https://github.com/josean-dev/dev-environment-files
- TMUX: https://www.josean.com/posts/tmux-setup
- TMUX: https://github.com/dreamsofcode-io/tmux/blob/main/tmux.conf
- TMUX: https://www.youtube.com/watch?v=DzNmUNvnB04
- https://unifreak.github.io/ref/ref-emacs
- https://asciidoc.org/
- https://powerman.name/doc/asciidoc
- https://pandoc.org/
- Vim/Neovim: [[https://github.com/YanivZalach/Vim_Config_NO_PLUGINS]]
- Vim/Neovim: [[https://github.com/YanivZalach/Vim_Config]]
- Neovim: [[https://github.com/YanivZalach/Nvim_Config]]
- Emacs: [[https://github.com/doomemacs/doomemacs]]
- Emacs: [[https://github.com/corgi-emacs/corgi]]
- Markdown: [[https://www.markdownguide.org/]]
- Org Mode: [[https://orgmode.org/]]
- LaTeX (if you need precise formatting control): [[https://www.latex-project.org/]]
- Github Markdown: [[https://docs.github.com/en/get-started/writing-on-github]]
- Markdown Cheat Sheet:
  [[https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet]]
- Markdown Here: [[https://github.com/adam-p/markdown-here]]
- Emacs: [[https://distro.tube/]]
- Emacs: [[https://emacsconf.org/2023/talks/]]
- Emacs: [[https://emacs.stackexchange.com/]]
- Emacs: [[https://github.com/daviwil/dotfiles/]]
- Emacs: [[https://github.com/daviwil/emacs-from-scratch]]
- Emacs: [[https://github.com/Gavinok/emacs.d]]
- Emacs: [[https://github.com/susam/dotfiles]]
- Emacs: [[https://github.com/susam/emfy]]
- Emacs: [[https://github.com/SystemCrafters/crafted-emacs]]
- Emacs: [[https://gitlab.com/Clsmith1]]
- Emacs: [[https://gitlab.com/dwt1]]
- Emacs: [[https://gitlab.com/protesilaos/dotfiles]]
- Emacs: [[https://planet.emacslife.com/]]
- Emacs: [[https://protesilaos.com/]]
- Emacs: [[https://protesilaos.com/emacs/]]
- Emacs: [[https://protesilaos.com/emacs/iosevka-comfy-pictures]]
- Emacs: [[https://systemcrafters.net/emacs-from-scratch/]]
- Emacs: [[https://www.masteringemacs.org/]]
- Emacs: [[https://www.masteringemacs.org/book]]
- Font GNU Unifont on Wikipedia: [[https://en.wikipedia.org/wiki/GNU_Unifont]]
- Font Unifont Download: [[https://ftp.gnu.org/gnu/unifont/]]
- Font Unifont: [[http://unifoundry.com/unifont/index.html]]
- Font YouTube Video about Unifont: [[https://www.youtube.com/watch?v=ckrkW8VHRIs]]
- YouTube Channel: [[https://www.youtube.com/@bwestbro/videos][https://www.youtube.com/@bwestbro/videos]]
- YouTube Channel: [[https://www.youtube.com/@DistroTube/videos][https://www.youtube.com/@DistroTube/videos]]
- YouTube Channel: [[https://www.youtube.com/@linuxtechgeek/videos][https://www.youtube.com/@linuxtechgeek/videos]]
- YouTube Channel: [[https://www.youtube.com/@protesilaos/videos][https://www.youtube.com/@protesilaos/videos]]
- YouTube Channel: [[https://www.youtube.com/@SystemCrafters/videos][https://www.youtube.com/@SystemCrafters/videos]]
- YouTube Channel: [[https://www.youtube.com/@mzamansky/videos][https://www.youtube.com/@mzamansky/videos]]
- YouTube Channel: [[https://www.youtube.com/@abcdw/videos][https://www.youtube.com/@abcdw/videos]]
- YouTube Channel: [[https://www.youtube.com/@GavinFreeborn/videos][https://www.youtube.com/@GavinFreeborn/videos]]
- YouTube Channel: [[https://www.youtube.com/@emacselements/videos][https://www.youtube.com/@emacselements/videos]]
- Neovim: [[https://github.com/rvbug/neovim]]
- Neovim: [[https://github.com/NormalNvim/NormalNvim]]
- Neovim: [[https://github.com/rockerBOO/awesome-neovim]]
- Neovim: [[https://dotfyle.com/neovim/plugins/top?categories=preconfigured]]
- Vim: [[https://github.com/ibhagwan/vim-cheatsheet]]
- Vim: [[https://github.com/vbd/Fieldnotes/blob/main/vim.md]]
- Emacs:
  [[http://yummymelon.com/devnull/announcing-casual-an-opinionated-porcelain-for-emacs-calc.html]]
- Emacs: [[https://xenodium.com/my-emacs-eye-candy/]]
- Emacs: [[https://github.com/xenodium/dotsies]]
- Neovim: [[https://github.com/itsvinayak/TurboNvimConfig.nvim]]
- Vim/Neovim: [[https://www.youtube.com/watch?v=5BU2gBOe9RU][YouTube Video: Vim
  Tips I Wish I Knew Earlier by Sebastian Daschner]]
- Neovim: [[https://www.youtube.com/watch?v=6pAG3BHurdM][YouTube Video: How I
  Setup Neovim On My Mac To Make It AMAZING In 2024 by Josean Martinez]]
- [[https://github.com/trishume/dotfiles]]
- [[https://github.com/trishume]]
- [[https://elpa.gnu.org/packages/greader.html]]
- [[https://github.com/emacs-straight/greader]]
- [[https://github.com/emacs-straight]]
- [[https://espeak.sourceforge.net/]]
- [[https://github.com/espeak-ng/espeak-ng]]
- [[https://github.com/thinkhuman/writingwithemacs]]
- [[https://www.gnu.org/manual/manual.html][GNU Manuals Online]]
- [[https://www.gnu.org/doc/doc.html][Documentation of the GNU Project]]
- [[https://www.gnu.org/software/emacs/documentation.html][GNU Emacs Documentation & Support]]
- [[https://www.gnu.org/software/emacs/manual/index.html][GNU Emacs Manuals Online]]
- [[https://www.gnu.org/software/emacs/refcards/index.html][GNU Emacs Reference Cards]]
- [[https://www.gnu.org/doc/other-free-books.html][Free Books from Other Publishers]]
-
   [[https://github.com/SilverSnake0/File-Automated-Assistant-Mover][SilverSnake0/File-Automated-Assistant-Mover
   Excellent Python Toolkit for Organizing and Searching Files - You can run it
   on a folder and it will sort all of the loose files into file type sub folders
   and it will not mess with your existing subfolders - it also has tools for
   searching and finding through sets of files uses python 3]]
- [[https://www.youtube.com/@cantucodes/videos][Cantu Codes - Weekly Neovim Plugin Series]]
- [[https://github.com/alextricity25/nvim_weekly_plugin_configs][Alex Cantu Github for Code from the Weekly Neovim Plugin Series]]
- [[https://www.youtube.com/watch?v=jgogUgeuBPo][goparism youtube channel video: Where To Learn Emacs in 2024]]
- [[https://www.youtube.com/@goparism/videos][goparism youtube channel]]
- [[https://francopasut.netlify.app/post/markdown-vim-emacs-sublime-vscode/][Markdown with Vim, Emacs, Sublime Text 4 and Visual Studio Code - Franco Pasut]]
- [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Article Org Mode
  Syntax Is One of the Most Reasonable Markup Languages to Use for Text]]
- [[https://missing.csail.mit.edu/2020/editors/]]
- [[https://www.youtube.com/watch?v=aiBt8CieE7U][Gavin Freeborn - Double Your Productivity With Emacs Org-Mode]]
- [[https://www.youtube.com/watch?v=DEeStDz_imQ][Gavin Freeborn - 5 Reasons I Love Emacs Orgmode]]
- [[https://www.youtube.com/watch?v=0-brF21ShRk][Gavin Freeborn - You Should Really Learn Org Mode - It's Easy]]
- [[https://protesilaos.com/codelog/2024-04-24-re-what-keeps-you-emacs/][Protesilaos Stavrou - Re: what keeps you coming back to Emacs?]]
- [[https://protesilaos.com/commentary/2024-04-10-joy-of-writing/][Protesilaos Stavrou - The joy of writing]]
- [[https://www.youtube.com/watch?v=-ybCiHPWKNA][TheVimeagen - Teaching Neovim From Scratch To A Noob]]
- [[https://gitlab.com/publicvoit/orgdown/-/blob/master/README.org][https://gitlab.com/publicvoit/orgdown/-/blob/master/README.org]]
  - Orgdown (in short “OD) is a lightweight markup language similar to Markdown
    but it’s consistent, easy to learn, simple to type even without
    tool-support, and it is based on its older brother: Org-mode
  - The purpose of this site is to provide basic information on the Orgdown
    syntax, supported software programs, mobile apps, services, and parsers.
- [[https://www.youtube.com/watch?v=mmqDYw9C30I][Josean Martinez - 7 Amazing CLI Tools You Need To Try]]
- [[https://www.youtube.com/watch?v=uOnL4fEnldA][Josean Martinez - How To Make
  Your Boring macOS Terminal Amazing With Alacritty (some of the tips apply to
  linux Alacritty use as well)]]
- https://github.com/james-stoup/org-mode-better-defaults
- https://github.com/james-stoup/emacs-org-mode-tutorial/
- https://orgmode.org/quickstart.html
- https://karl-voit.at/2021/07/23/emacs-lock-in/
- https://lazyvim-ambitious-devs.phillips.codes/ - LazyVim for Ambitious Developers (LazyVim Distribution for neovim free e-book)
- https://omakub.org/ - An Omakase Developer Setup for Ubuntu 24.04 by DHH (eza, fzf, rg, zoxide, and bg)
  - quote from above site: Use the six default workspaces for apps (hotkeys:
    Super+1/2/3/…), preferably full-screen ones on laptop displays (hotkey:
    F11), or tiled neatly using Tactile (hotkey: Super+T). Speed of motion is
    also why all the transition animations have been nerfed. And start any app
    in the dock (hotkey: Super) based on it’s position (hotkey: Alt+1/2/3/4). So
    browser is just Alt+1, Terminal Alt+2, etc. Additionally, Ulauncher provides
    an app launcher ala Raycast, which you trigger with Super+Space. And you can
    quickly enter emojis with the compose key (which is mapped to Caps Lock) m
    and then a single letter representing the emoji. Run omakub, pick hotkeys,
    and there you can see it all.
- [[https://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/][Dotfiles Are Meant to Be Forked by Zach Holman]]
** Additional Configuration File Notes
*** dot distroboxrc file
#+begin_example
xhost +si:localuser:$USER >/dev/null
export DISPLAY=:0
#+end_example
*** kitty general notes
#+begin_example
Random Notes:
https://sw.kovidgoyal.net/kitty/
https://sw.kovidgoyal.net/kitty/_downloads/433dadebd0bf504f8b008985378086ce/kitty.conf
Scrolling
Action
Shortcut
Line up
ctrl+shift+up (also ⌥+⌘+⇞ and ⌘+↑ on macOS)
Line down
ctrl+shift+down (also ⌥+⌘+⇟ and ⌘+↓ on macOS)
Page up
ctrl+shift+page_up (also ⌘+⇞ on macOS)
Page down
ctrl+shift+page_down (also ⌘+⇟ on macOS)
Top
ctrl+shift+home (also ⌘+↖ on macOS)
Bottom
ctrl+shift+end (also ⌘+↘ on macOS)
Previous shell prompt
ctrl+shift+z (see Shell integration)
Next shell prompt
ctrl+shift+x (see Shell integration)
Browse scrollback in less
ctrl+shift+h
Browse last cmd output
ctrl+shift+g (see Shell integration)
Tabs
Action
Shortcut
New tab
ctrl+shift+t (also ⌘+t on macOS)
Close tab
ctrl+shift+q (also ⌘+w on macOS)
Next tab
ctrl+shift+right (also ⌃+⇥ and ⇧+⌘+] on macOS)
Previous tab
ctrl+shift+left (also ⇧+⌃+⇥ and ⇧+⌘+[ on macOS)
Next layout
ctrl+shift+l
Move tab forward
ctrl+shift+.
Move tab backward
ctrl+shift+,
Set tab title
ctrl+shift+alt+t (also ⇧+⌘+i on macOS)
Windows
Action
Shortcut
New window
ctrl+shift+enter (also ⌘+↩ on macOS)
New OS window
ctrl+shift+n (also ⌘+n on macOS)
Close window
ctrl+shift+w (also ⇧+⌘+d on macOS)
Resize window
ctrl+shift+r (also ⌘+r on macOS)
Next window
ctrl+shift+]
Previous window
ctrl+shift+[
Move window forward
ctrl+shift+f
Move window backward
ctrl+shift+b
Move window to top
ctrl+shift+`
Visually focus window
ctrl+shift+f7
Visually swap window
ctrl+shift+f8
Focus specific window
ctrl+shift+1, ctrl+shift+2 … ctrl+shift+0 (also ⌘+1, ⌘+2 … ⌘+9 on macOS) (clockwise from the top-left)
Other keyboard shortcuts
The full list of actions that can be mapped to key presses is available here. To learn how to do more sophisticated keyboard mappings, such as modal mappings, per application mappings, etc. see Making your keyboard dance.
Action
Shortcut
Show this help
ctrl+shift+f1
Copy to clipboard
ctrl+shift+c (also ⌘+c on macOS)
Paste from clipboard
ctrl+shift+v (also ⌘+v on macOS)
Paste from selection
ctrl+shift+s
Pass selection to program
ctrl+shift+o
Increase font size
ctrl+shift+equal (also ⌘++ on macOS)
Decrease font size
ctrl+shift+minus (also ⌘+- on macOS)
Restore font size
ctrl+shift+backspace (also ⌘+0 on macOS)
Toggle fullscreen
ctrl+shift+f11 (also ⌃+⌘+f on macOS)
Toggle maximized
ctrl+shift+f10
Input Unicode character
ctrl+shift+u (also ⌃+⌘+space on macOS)
Open URL in web browser
ctrl+shift+e
Reset the terminal
ctrl+shift+delete (also ⌥+⌘+r on macOS)
Edit kitty.conf
ctrl+shift+f2 (also ⌘+, on macOS)
Reload kitty.conf
ctrl+shift+f5 (also ⌃+⌘+, on macOS)
Debug kitty.conf
ctrl+shift+f6 (also ⌥+⌘+, on macOS)
Open a kitty shell
ctrl+shift+escape
Increase background opacity
ctrl+shift+a>m
Decrease background opacity
ctrl+shift+a>l
Full background opacity
ctrl+shift+a>1
Reset background opacity
ctrl+shift+a>d
Layouts
A layout is an arrangement of multiple kitty windows inside a top-level OS window. The layout manages all its windows automatically, resizing and moving them as needed. You can create a new window using the ctrl+shift+enter key combination.
Currently, there are seven layouts available:
Fat -- One (or optionally more) windows are shown full width on the top, the rest of the windows are shown side-by-side on the bottom
Grid -- All windows are shown in a grid
Horizontal -- All windows are shown side-by-side
Splits -- Windows arranged in arbitrary patterns created using horizontal and vertical splits
Stack -- Only a single maximized window is shown at a time
Tall -- One (or optionally more) windows are shown full height on the left, the rest of the windows are shown one below the other on the right
Vertical -- All windows are shown one below the other
By default, all layouts are enabled and you can switch between layouts using the ctrl+shift+l key combination. You can also create shortcuts to select particular layouts, and choose which layouts you want to enable, see Layout management for examples. The first layout listed in enabled_layouts becomes the default layout.
For more details on the layouts and how to use them see the documentation.
Startup Sessions
You can control the tabs, kitty window layout, working directory, startup programs, etc. by creating a session file and using the kitty --session command line flag or the startup_session option in kitty.conf. An example, showing all available commands:
# Set the layout for the current tab
layout tall
# Set the working directory for windows in the current tab
cd ~
# Create a window and run the specified command in it
launch zsh
# Create a window with some environment variables set and run vim in it
launch --env FOO=BAR vim
# Set the title for the next window
launch --title "Chat with x" irssi --profile x
# Create a new tab
# The part after new_tab is the optional tab title which will be displayed in
# the tab bar, if omitted, the title of the active window will be used instead.
new_tab my tab
cd ~/somewhere
# Set the layouts allowed in this tab
enabled_layouts tall,stack
# Set the current layout
layout stack
launch zsh
# Create a new OS window
# Any definitions specified before the first new_os_window will apply to first OS window.
new_os_window
# Set new window size to 80x24 cells
os_window_size 80c 24c
# Set the --class for the new OS window
os_window_class mywindow
# Change the OS window state to normal, fullscreen, maximized or minimized
os_window_state normal
launch sh
# Resize the current window (see the resize_window action for details)
resize_window wider 2
# Make the current window the active (focused) window in its tab
focus
# Make the current OS Window the globally active window (not supported on Wayland)
focus_os_window
launch emacs
#+end_example
*** mailcap .mailcap (for use with alot that works with notmuch)
#+begin_example
text/html; elinks -dump '%s'; nametemplate=%s.html; copiousoutput
#+end_example
**** alot example command
#+begin_example
alot --notmuch-config=/home/david/.notmuch-config search "tag:archived date:06-2024"
#+end_example
**** reference links for searching notmuch
#+begin_example
https://alot.readthedocs.io/en/latest/usage/index.html
https://notmuchmail.org/doc/latest/man1/notmuch-search.html
https://notmuchmail.org/doc/latest/man7/notmuch-search-terms.html#notmuch-search-terms-7
https://notmuchmail.org/notmuch-emacs/
https://notmuchmail.org/screenshots/
https://notmuchmail.org/emacstips/
http://elinks.or.cz/
https://github.com/rkd77/elinks - elinks is a text based browser for the terminal
#+end_example
**** alot config theme
#+begin_example
###############################################################################
# SOLARIZED DARK
#
# colour theme for alot. © 2012 Patrick Totzke, GNU GPL3+
# http://ethanschoonover.com/solarized
# https://github.com/pazz/alot
###############################################################################
#
# Define mappings from solarized colour names to urwid attribute names for 16
# and 256 colour modes. These work well assuming you use the solarized term
# colours via Xressources/Xdefaults. You might want to change this otherwise

16_base03 = 'dark gray'
16_base02 = 'black'
16_base01 = 'light green'
16_base00 = 'yellow'
16_base0 = 'light blue'
16_base1 = 'light cyan'
16_base2 = 'light gray'
16_base3 = 'white'
16_yellow = 'brown'
16_orange = 'light red'
16_red = 'dark red'
16_magenta = 'dark magenta'
16_violet = 'light magenta'
16_blue = 'dark blue'
16_cyan = 'dark cyan'
16_green = 'dark green'

# Use a slightly different mapping here to be able to use "bold" in 256c mode
256_base03 = 'dark gray'
256_base02 = 'black'
256_base01 = 'light green'
256_base00 = 'yellow'
256_base0 = 'g66'
256_base1 = 'g70'
256_base2 = 'light gray'
256_base3 = 'white'
256_yellow = 'brown'  #da0 for bold
256_orange = 'light red'
256_red = 'dark red'
256_magenta = 'dark magenta'
256_violet = 'light magenta'
256_blue = 'dark blue'
256_cyan = '#088'
256_green = 'dark green'


# This is the actual alot theme
[global]
    footer = 'standout','default','%(16_base1)s','%(16_base02)s','%(256_base1)s','%(256_base02)s'
    body = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    notify_error = 'standout','default','%(16_base3)s','%(16_red)s','%(256_base3)s','%(256_red)s'
    notify_normal = 'default','default','%(16_base01)s','%(16_base02)s','%(256_base01)s','%(256_base02)s'
    prompt = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
    tag = 'default','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
    tag_focus = 'standout','default','%(16_base03)s','%(16_yellow)s','%(256_base03)s','%(256_yellow)s'
[help]
    text = 'default','default','%(16_base1)s','%(16_base02)s','%(256_base1)s','%(256_base02)s'
    section = 'underline','default','%(16_base1)s,underline','%(16_base02)s','%(256_base1)s,underline','%(256_base02)s'
    title = 'standout','default','%(16_base1)s','%(16_base02)s','%(256_base1)s,bold','%(256_base02)s'
    frame = 'standout','default','%(16_base1)s','%(16_base02)s','%(256_base1)s,bold','%(256_base02)s'
[taglist]
    line_focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    line_even = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    line_odd = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
[bufferlist]
    line_focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    line_even = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    line_odd = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
[thread]
    attachment = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    attachment_focus = 'underline','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    arrow_bars = 'default','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
    arrow_heads = 'default','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
    body = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'

   body_focus = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base02)s'
    header = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
    header_key = 'default','default','%(16_magenta)s','%(16_base02)s','%(256_magenta)s','%(256_base02)s'
    header_value = 'default','default','%(16_blue)s','%(16_base02)s','%(256_blue)s','%(256_base02)s'
    [[summary]]
      even = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
      focus = 'standout','default','%(16_base03)s','%(16_yellow)s','%(256_base03)s','%(256_yellow)s'
      odd = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
[envelope]
    body = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
    header = 'default','default','%(16_base0)s','%(16_base02)s','%(256_base0)s','%(256_base02)s'
    header_key = 'default','default','%(16_orange)s','%(16_base02)s','%(256_orange)s','%(256_base02)s'
    header_value = 'default','default','%(16_violet)s','%(16_base02)s','%(256_violet)s','%(256_base02)s'
[search]
    [[threadline]]
        normal = 'default','default','%(16_base1)s','%(16_base03)s','%(256_base1)s','%(256_base03)s'
        focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
        parts = date,mailcount,tags,authors,subject
        [[[date]]]
            normal = 'default','default','%(16_base1)s','%(16_base03)s','%(256_base1)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s,bold','%(16_yellow)s','%(256_base02)s,bold','%(256_yellow)s'
            alignment = right
            width = fit, 9, 9
        [[[mailcount]]]
            normal = 'default','default','%(16_base1)s','%(16_base03)s','%(256_base1)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
        [[[tags]]]
            normal = 'bold','default','%(16_yellow)s','%(16_base03)s','%(256_yellow)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
        [[[authors]]]
            normal = 'default,underline','default','%(16_cyan)s','%(16_base03)s','%(256_cyan)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
            width = 'fit',0,30
        [[[subject]]]
            normal = 'default','default','%(16_base0)s','%(16_base03)s','%(256_base0)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s,bold','%(16_yellow)s','%(256_base02)s,bold','%(256_yellow)s'
            width = 'weight',1
        [[[content]]]
            normal = 'default','default','%(16_base01)s','%(16_base03)s','%(256_base01)s','%(256_base03)s'
            focus = 'standout','default','%(16_base02)s','%(16_yellow)s','%(256_base02)s','%(256_yellow)s'
    [[threadline-unread]]
        normal = 'default','default','%(16_base1)s,bold','%(16_base03)s','%(256_base1)s,bold','%(256_base03)s'
        tagged_with = 'unread'
        [[[date]]]
            normal = 'default','default','%(16_base2)s,bold','%(16_base03)s','%(256_base2)s,bold','%(256_base03)s'
        [[[mailcount]]]
            normal = 'default','default','%(16_base2)s,bold','%(16_base03)s','%(256_base2)s,bold','%(256_base03)s'
        [[[tags]]]
            normal = 'bold','default','%(16_yellow)s','%(16_base03)s','#da0','%(256_base03)s'
        [[[authors]]]
            normal = 'default,underline','default','%(16_cyan)s','%(16_base03)s','#088,bold','%(256_base03)s'
        [[[subject]]]
            normal = 'default','default','%(16_base2)s,bold','%(16_base03)s','%(256_base2)s,bold','%(256_base03)s'
        [[[content]]]
            normal = 'default','default','%(16_base01)s,bold','%(16_base03)s','%(256_base01)s,bold','%(256_base03)s'
[namedqueries]
    line_focus = 'standout','default','%(16_base2)s','%(16_yellow)s','%(256_base2)s','%(256_yellow)s'
    line_even = 'default','default','%(16_base00)s','%(16_base3)s','%(256_base00)s','%(256_base3)s'
    line_odd = 'default','default','%(16_base00)s','%(16_base2)s','%(256_base00)s','%(256_base2)s'
#+end_example
**** alot config
#+begin_example
theme = solarized_dark
search_threads_sort_order = newest_first
#+end_example
*** mailcap .mailcap (for use with notmuch inside of emacs)
This allows . v when the cursor is over the HTML version of the message to open
in default browser and show the actual HTML rendering
#+begin_example
text/html; xdg-open '%s'; nametemplate=%s.html;
#+end_example

*** Notmuch config .notmuch-config
this is created automatically by running notmuch setup - you then run notmuch
new to index your emails
#+begin_example
# .notmuch-config - Configuration file for the notmuch mail system
#
# For more information about notmuch, see https://notmuchmail.org
# Database configuration
#
# The only value supported here is 'path' which should be the top-level
# directory where your mail currently exists and to where mail will be
# delivered in the future. Files should be individual email messages.
# Notmuch will store its database within a sub-directory of the path
# configured here named ".notmuch".
#
[database]
path=/run/media/david/myINTERNAL/reorganized_emails
# User configuration
#
# Here is where you can let notmuch know how you would like to be
# addressed. Valid settings are
#
#	name		Your full name.
#	primary_email	Your primary email address.
#	other_email	A list (separated by ';') of other email addresses
#			at which you receive email.
#
# Notmuch will use the various email addresses configured here when
# formatting replies. It will avoid including your own addresses in the
# recipient list of replies, and will set the From address based on the
# address to which the original email was addressed.
#
[user]
name=
primary_email=
other_email=
# Configuration for "notmuch new"
#
# The following options are supported here:
#
#	tags	A list (separated by ';') of the tags that will be
#		added to all messages incorporated by "notmuch new".
#
#	ignore	A list (separated by ';') of file and directory names
#		that will not be searched for messages by "notmuch new".
#
#		NOTE: *Every* file/directory that goes by one of those
#		names will be ignored, independent of its depth/location
#		in the mail store.
#
[new]
tags=archived
# Search configuration
#
# The following option is supported here:
#
#	exclude_tags
#		A ;-separated list of tags that will be excluded from
#		search results by default.  Using an excluded tag in a
#		query will override that exclusion.
#
[search]
# Maildir compatibility configuration
#
# The following option is supported here:
#
#	synchronize_flags      Valid values are true and false.
#
#	If true, then the following maildir flags (in message filenames)
#	will be synchronized with the corresponding notmuch tags:
#
#		Flag	Tag
#		----	-------
#		D	draft
#		F	flagged
#		P	passed
#		R	replied
#		S	unread (added when 'S' flag is not present)
#
#	The "notmuch new" command will notice flag changes in filenames
#	and update tags, while the "notmuch tag" and "notmuch restore"
#	commands will notice tag changes and update flags in filenames
#
[maildir]
#+end_example
*** mbsyncrc .mbsyncrc
#+begin_example
IMAPAccount gmail
Host imap.gmail.com
User emailgoeshere
Pass secretpasswordgoeshere
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path /run/media/david/myINTERNAL/Maildir/gmail/
Inbox /run/media/david/myINTERNAL/Maildir/gmail/INBOX
SubFolders Verbatim

Channel gmail
Far :gmail-remote:
Near :gmail-local:
Patterns * !INBOX !"[Gmail]/Sent Mail" !"[Gmail]/Trash" "[Gmail]/All Mail" !"[Gmail]/Starred" !"[Gmail]/Important" !"[Gmail]/Drafts" !"[Gmail]/Spam"
Create Near
Expunge Both
SyncState *
#+end_example
other notes:
#+begin_example
mu init --maildir=/var/mnt/25b369a9-cff5-47ef-9512-3b135fce7ef6/Maildir/ --my-address=@gmail.com --my-address=@gmail.com
pacman -Qs ca-certificates
local/ca-certificates 20211016-4
    Common CA certificates (default providers)
sudo pacman -S ca-certificates
#+end_example
*** git config .gitconfig
#+begin_example
[user]
	name = David R Rrrrr
	email = david.rrrrrr@yandex.com
[credential "https://github.com"]
	helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = !/usr/bin/gh auth git-credential
[core]
	editor = vim
#+end_example
*** .authinfo
This is so I can send emails from Emacs through gmail account.
#+begin_example
machine smtp.gmail.com login <insert email> password <insert password> port 587
#+end_example
